# ============================================
# L3 类型层 v1.0.0
# PlantUML Class (类图) 规范
# ============================================

[meta]
level = "L3"
language = "plantuml"
diagram_type = "class"
version = "1.0.0"
description = "PlantUML 类图规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关的元数据
complexity = "high"
target_length = 3200
use_cases = ["面向对象设计", "系统架构", "领域建模", "设计模式"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "面向对象设计专家",
  "软件架构师"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **可见性修饰符规范**: 所有属性和方法必须标注可见性修饰符:
  - `-` : private (私有)
  - `+` : public (公开)
  - `#` : protected (受保护)
  - `~` : package (包内可见)
  这是 UML 规范的一部分,必须明确标注。
  """,

  """
  **关系类型规范**: 必须使用正确的 UML 关系符号:
  - `<|--` : 继承/泛化 (实心三角形,extends)
  - `<|..` : 实现接口 (空心三角形 + 虚线,implements)
  - `*--` : 组合 (实心菱形,强拥有,生命周期绑定)
  - `o--` : 聚合 (空心菱形,弱拥有,独立生命周期)
  - `-->` : 关联 (普通箭头)
  - `..>` : 依赖 (虚线箭头,临时使用)
  """,

  """
  **关系方向规范**: 关系箭头的方向必须符合 UML 约定:
  - 继承: 箭头从子类指向父类 (Parent <|-- Child)
  - 实现: 箭头从实现类指向接口 (IInterface <|.. ConcreteClass)
  - 组合/聚合: 箭头从整体指向部分 (Whole *-- Part)
  - 关联/依赖: 箭头表示依赖方向
  """,

  """
  **类定义规范**: 类的定义必须包含:
  - 类名 (使用大驼峰命名)
  - 属性列表 (可见性 + 名称 + 类型)
  - 方法列表 (可见性 + 名称 + 参数 + 返回类型)
  - 抽象类使用 `abstract class`
  - 接口使用 `interface`
  - 抽象方法使用 `{abstract}` 标注
  """,

  """
  **关系基数约束**: 关联关系应该标注基数约束:
  - `"1"` : 一对一
  - `"0..1"` : 零或一
  - `"1..*"` 或 `"1..n"` : 一对多
  - `"0..*"` 或 `"*"` : 零对多
  基数约束帮助理解类之间的数量关系。
  """,

  """
  **命名规范**: 遵循标准命名约定:
  - 类名: 大驼峰 (PascalCase)
  - 方法名: 小驼峰 (camelCase)
  - 属性名: 小驼峰 (camelCase)
  - 常量: 全大写下划线 (UPPER_SNAKE_CASE)
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别核心实体和概念**:
  - 分析需求,识别系统的核心实体 (用户、订单、商品等)
  - 确定类的类型 (普通类、抽象类、接口、枚举)
  - 识别类的职责和边界
  - 设计合理的类层次结构
  """,

  """
  **2. 设计类结构**:
  - 定义类的属性 (字段) 和方法 (行为)
  - 标注可见性修饰符 (+/-/#/~)
  - 标注静态成员 ({static})
  - 标注抽象方法 ({abstract})
  - 使用合理的数据类型
  """,

  """
  **3. 设计类关系**:
  - 识别继承关系 (is-a 关系,使用 <|--)
  - 识别实现关系 (implements,使用 <|..)
  - 识别组合关系 (强拥有,使用 *--)
  - 识别聚合关系 (弱拥有,使用 o--)
  - 识别关联关系 (一般关联,使用 -->)
  - 识别依赖关系 (临时使用,使用 ..>)
  - 标注关系基数约束
  """,

  """
  **4. 组织复杂结构**:
  - 使用 `package` 进行模块分组 (按层次或功能)
  - 大型类图 (>20 个类) 使用包分组
  - 超大类图 (>50 个类) 考虑拆分为多个独立图表
  - 使用 `hide empty members` 简化显示
  - 使用注释 (note) 说明设计意图
  """,

  """
  **5. 优化可读性**:
  - 合理控制类成员数量 (建议每个类 ≤ 10 个成员)
  - 复杂类可以省略部分成员,用 `..` 表示省略
  - 只保留核心关系,简化或隐藏辅助性依赖
  - 使用布局指令 (left to right direction) 优化布局
  - 避免关系交叉,保持图表清晰
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **UML 规范符合性**:
  - 所有属性和方法都标注了可见性修饰符
  - 关系类型使用正确 (继承、实现、组合、聚合、关联、依赖)
  - 关系方向符合 UML 约定 (继承箭头从子类指向父类)
  - 抽象类和抽象方法正确标注
  - 接口使用 `interface` 关键字定义
  """,

  """
  **关系合理性**:
  - 继承关系不超过 5 层深度
  - 组合关系正确表达生命周期绑定
  - 聚合关系正确表达独立生命周期
  - 关联关系有明确的业务含义
  - 依赖关系表达临时使用关系
  - 关系基数约束准确
  """,

  """
  **命名规范性**:
  - 类名使用大驼峰 (PascalCase)
  - 方法名使用小驼峰 (camelCase)
  - 属性名使用小驼峰 (camelCase)
  - 命名清晰表达业务含义
  - 避免使用缩写或过于简单的名称
  """,

  """
  **可读性和专业性**:
  - 类数量适中 (建议 ≤ 50 个)
  - 使用包 (package) 组织复杂结构
  - 布局合理,避免元素过度拥挤
  - 关系线不交叉或交叉最少
  - 适当使用注释说明设计意图
  - 大型类图使用 hide/show 聚焦关键元素
  """
]
