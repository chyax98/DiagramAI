# ============================================
# L3 类型层 - WaveDrom Timing 时序波形图规范
# ============================================
# 版本: 1.0.0
# 创建日期: 2025-10-19
# 图表类型: timing - 精确时序波形图
# ============================================

[meta]
level = "L3"
language = "wavedrom"
diagram_type = "timing"
version = "1.0.0"
description = "L3: WaveDrom - Timing 时序波形图生成规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型元数据
complexity = "high"
target_length = 3200
use_cases = ["数字电路时序分析", "总线协议时序", "时序约束标注", "硬件验证"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "时序波形图专家 - 精通数字信号时序关系、建立时间、保持时间、传播延迟等时序约束概念",
  "总线协议专家 - 掌握 SPI、I2C、UART、DDR 等常见总线协议的精确时序特性和握手机制",
  "时序标注工程师 - 熟练使用 node/edge 系统标注时序约束、延迟关系和因果关系"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **Timing 特有字段**: Timing 图表需要使用时序标注相关字段:
  - `node`: 节点标记字符串,与 wave 长度相同,标记关键时间点(a-z/A-Z)
  - `edge`: 时序约束数组,定义节点间的时序关系(如 "a~>b t_setup")
  - `period`: 信号周期控制(0.5/1/2),用于多时钟域
  - `phase`: 相位偏移控制,配合 period 使用
  - 这些字段是 Timing 图与 Signal 图的核心区别
  """,

  """
  **Node 标记规则**: node 字符串用于标记 wave 上的关键时间点:
  - node 字符串长度必须与 wave 完全相同(字符对字符对应)
  - 使用 a-z、A-Z 单字母标记关键点,`.` 表示无标记
  - 示例: `{"wave":"p.....","node":".a..b."}` 在第2、5个位置标记节点
  - 错误示例: `{"wave":"p.....","node":"ab"}` (长度不匹配)
  """,

  """
  **Edge 箭头语法**: edge 数组定义节点间的时序约束关系:
  - 格式: `"起始节点 连接符 终止节点 标签"`
  - 连接符类型: `~>` (曲线箭头)、`->` (直线箭头)、`-|>` (T型箭头)、`->>` (双线箭头)
  - 推荐使用 `~>` 标注时序约束(setup/hold time)
  - 每个 edge 只能连接两个节点,链式约束需拆分
  - 示例: `["a~>b t_setup", "b~>c t_hold"]`
  """,

  """
  **信号分组规范**: Timing 图使用信号分组增强可读性:
  - 使用 `{}` 创建空行分隔符
  - 使用 `["组名", {...}, {...}]` 创建带标题的信号组
  - 分组顺序: 时钟信号 → 控制信号 → 数据信号
  - 示例: `["Clock & Reset", {"name":"clk","wave":"p..."}, {"name":"rst","wave":"01..."}]`
  """,

  """
  **Period 和 Phase 控制**: 用于多时钟域或差分时钟:
  - `period`: 控制单个信号的时钟周期(默认 1)
    - `period: 0.5` → 双倍速率(如 DDR 的 DQS)
    - `period: 2` → 半速率
  - `phase`: 控制信号相位偏移(配合 period 使用)
  - 示例: `{"name":"DQS","wave":"p.p.p.","period":0.5}`
  """,

  """
  **间隔符 `|` 的使用**: `|` 在 wave 字符串中创建视觉分隔:
  - 用途: 区分不同时序阶段(如读/写周期)、标记协议边界(如帧起始/结束)
  - 示例: `{"wave":"p..|.p..|.."}` 将时序分为 3 个阶段
  - 注意: `|` 只是视觉分隔符,不影响实际周期,与 period 功能冲突时删除 period
  """,

  """
  **配置选项规范**: Timing 图的 config 配置:
  - `hscale`: 水平缩放(1-3,推荐 1-2),控制时间轴拉伸程度
  - `skin`: 主题样式(default/narrow/lowkey)
  - `head/foot`: 添加标题和说明文本
  - 错误示例: `hscale > 3` 会导致图表过宽不可读
  - 最佳实践: 复杂时序使用 `hscale: 1.5-2` 便于查看细节
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别时序要素**:
  - 时钟信号: 主时钟、派生时钟、差分时钟(CK/CK_N)
  - 控制信号: 使能(EN)、片选(CS)、读写(RD/WR)、请求应答(REQ/ACK)
  - 数据信号: 地址(ADDR)、数据(DATA)、总线(BUS)
  - 时序约束点: 建立时间(setup)、保持时间(hold)、传播延迟(delay)
  - 协议边界: 帧起始、帧结束、周期分隔
  """,

  """
  **2. 提取时序逻辑**:
  - 主流程: 正常情况下的标准时序路径(如 SPI 读操作: CS→SCLK→MOSI/MISO)
  - 时序约束: 关键时序关系(如 DDR 的 DQS-DQ 关系、握手协议的 REQ-ACK 延迟)
  - 多时钟域: 识别不同时钟域和时钟倍率关系
  - 协议阶段: 区分不同时序阶段(如 TCP 握手的 SYN、SYN-ACK、ACK)
  """,

  """
  **3. 设计 Wave 和 Node**:
  - 确定所有信号的 wave 字符串(长度必须一致)
  - 在关键时序点添加 node 标记(a-z/A-Z)
  - 使用数据符号(2-9)配合 data 数组标注数据内容
  - 使用 `|` 分隔不同协议阶段或时序周期
  - 示例: `{"name":"CLK","wave":"p.....","node":".a..b."}` 标记第2、5个时钟沿
  """,

  """
  **4. 标注时序约束(Edge)**:
  - 建立 edge 数组定义节点间的时序关系
  - 使用 `~>` 标注 setup/hold time 约束
  - 使用 `->` 标注因果关系或数据流
  - 添加清晰的约束标签(如 "t_setup", "t_response", "t_hold")
  - 示例: `["a~>b t_setup", "b~>c t_hold"]`
  """,

  """
  **5. 应用分组和配置**:
  - 使用信号分组将相关信号归类(时钟组/控制组/数据组)
  - 应用 period/phase 控制多时钟域或差分时钟
  - 设置合适的 hscale 优化显示(复杂时序用 1.5-2)
  - 添加 head/foot 说明图表用途和关键信息
  - 示例: `{"config":{"hscale":2},"head":{"text":"SPI Read Timing"}}`
  """,

  """
  **6. 验证时序正确性**:
  - 检查所有 wave 字符串长度一致
  - 验证 node 字符串长度与 wave 匹配
  - 确认 edge 引用的节点存在且合理
  - 验证时序逻辑符合实际硬件规范(如 setup time < clock period)
  - 测试渲染结果,确保时序约束箭头清晰可见
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **时序标注完整性**:
  - 关键时序点必须有 node 标记(setup point、sample point、hold point)
  - 时序约束必须有 edge 定义(setup time、hold time、response time)
  - 标签清晰表达约束含义(使用标准术语: t_setup、t_hold、t_response)
  - 所有 node 必须在 edge 中被引用(无悬空节点)
  """,

  """
  **Node/Edge 语法正确性**:
  - node 字符串长度与 wave 完全相同
  - node 使用合法字符(a-z/A-Z 和 `.`)
  - edge 格式正确("节点~>节点 标签")
  - edge 引用的节点在 node 字符串中存在
  - 箭头类型合理(时序约束用 ~>、因果关系用 ->)
  """,

  """
  **信号分组清晰度**:
  - 时钟信号放在最前面或单独分组
  - 相关信号使用分组归类(如 ["SPI Interface", ...])
  - 使用 {} 分隔符增强可读性
  - 分组名称简洁明了(3-12 字符)
  """,

  """
  **时序逻辑合理性**:
  - 信号变化符合实际硬件时序关系(如 CS 先有效再发 SCLK)
  - 时序约束符合物理可行性(如 setup time > 0)
  - 多时钟域关系正确(period/phase 设置合理)
  - 协议阶段划分清晰(使用 `|` 分隔)
  """,

  """
  **可读性和专业性**:
  - 信号命名使用标准硬件术语(CLK/RST/REQ/ACK/MOSI/MISO)
  - 时序约束标签使用标准术语(t_setup/t_hold/t_delay)
  - 配置参数合理(hscale 1-2、skin 选择适当)
  - 添加必要的 head/foot 说明
  - 复杂时序图使用分组和间隔符增强可读性
  """
]

# ============================================
# Section 5: 使用场景 (Use Cases)
# ============================================

[[use_cases]]
title = "SPI 总线读操作时序"
scenario = "展示 SPI 主机从从机读取数据的完整时序,包括片选、时钟、MOSI/MISO 信号的时序关系"
key_points = [
  "使用分组将 SCLK、CS_N、MOSI、MISO 信号归类",
  "使用 `|` 分隔命令和数据阶段",
  "MISO 使用 `z` 表示高阻态",
  "添加 head/foot 说明读操作细节",
  "hscale: 2 拉伸时序便于查看"
]

[[use_cases]]
title = "握手协议时序约束标注"
scenario = "展示请求-应答握手协议,标注 REQ 到 ACK 的响应时间、DATA 到 ACK 的保持时间等时序约束"
key_points = [
  "在 CLK、REQ、ACK、DATA 信号上标记 node",
  "使用 edge 定义 a~>b t_response、c~>b t_hold 等约束",
  "时序约束箭头清晰表达 setup/hold 关系",
  "分组将时钟、控制、数据信号分离",
  "验证时序逻辑(REQ → ACK → DATA 的因果关系)"
]

[[use_cases]]
title = "DDR 内存接口时序"
scenario = "展示 DDR 双倍速率数据传输,包括差分时钟(CK/CK_N)、地址/命令信号、数据信号(DQ)和数据选通(DQS)"
key_points = [
  "使用 period: 0.5 实现 DQS 双倍速率",
  "使用分组区分地址/命令组和数据组",
  "DQS 在 DQ 边沿采样(DDR 特性)",
  "CK/CK_N 差分时钟展示",
  "多行布局展示复杂时序关系"
]

[[use_cases]]
title = "多模块仲裁总线时序"
scenario = "展示主从设备间带仲裁的总线事务,包括 Master 请求、Arbiter 授权、Slave 响应的完整时序流程"
key_points = [
  "三层分组(Master/Arbiter/Slave)展示模块层次",
  "使用 node/edge 标注跨模块的时序约束",
  "M_REQ → ARB_GNT → S_ACK 的完整握手流程",
  "时序约束跨模块标注(Grant Delay、Response Time)",
  "hscale: 1.5 优化显示宽度"
]
