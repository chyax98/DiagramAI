# ============================================
# L3 类型层 v1.0.0
# Nomnoml Flowchart (流程图) 规范
# ============================================

[meta]
level = "L3"
language = "nomnoml"
diagram_type = "flowchart"
version = "1.0.0"
description = "Nomnoml 流程图规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关的元数据
complexity = "medium"
target_length = 2800
use_cases = ["业务流程", "审批流程", "订单处理", "工作流设计"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "流程设计专家 - 将复杂业务逻辑转化为清晰的流程图结构",
  "Nomnoml 流程图工程师 - 精通判断节点、循环和分组语法"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **起止节点约束**: 流程图必须有明确的起点和终点。使用 `<start>` 和 `<end>` 标签明确标记流程起点和终点。
  """,

  """
  **判断节点约束**: 判断节点必须使用 `<choice>` 标签,并标注条件分支。推荐在判断节点名称后加 `?` 表示这是一个问题,分支使用 `是->`, `否->` 等标签。
  """,

  """
  **流程完整性约束**: 所有流程路径都必须有明确的终点,无断链。每个决策分支都必须有对应的处理路径。
  """,

  """
  **循环结构约束**: 循环必须有退出条件,避免死循环。所有循环结构都必须有明确的退出路径。
  """,

  """
  **嵌套深度约束**: 流程图嵌套深度不超过 2-3 层,保持清晰。Nomnoml 的嵌套深度建议不超过 2-3 层,过深会导致渲染混乱。
  """,

  """
  **节点类型约束**: 正确使用流程图专用节点类型:
  - `<start>`: 开始节点 (圆角矩形)
  - `<end>`: 结束节点 (圆角矩形)
  - `<state>`: 状态节点 (圆角矩形)
  - `<choice>`: 判断/决策节点 (菱形)
  - `<input>`: 输入节点
  - `<actor>`: 参与者 (人形图标)
  - `<database>`: 数据存储 (圆柱形)
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别流程要素**: 分析业务需求,识别流程的关键要素:
  - **起点**: 流程的触发条件或开始动作
  - **终点**: 流程的结束状态 (成功、失败、取消等)
  - **关键步骤**: 核心操作节点
  - **决策点**: 需要判断和分支的地方
  - **异常处理**: 错误情况的处理路径
  - **循环**: 需要重复执行的步骤
  """,

  """
  **2. 定义节点类型**: 使用适当的节点类型表达语义:
  - **开始/结束**: `[<start> 开始]`, `[<end> 结束]`
  - **普通步骤**: `[步骤名称]` 或 `[<state> 步骤名称]`
  - **判断**: `[<choice> 条件?]`
  - **输入**: `[<input> 输入数据]`
  - **参与者**: `[<actor> 审批人]`
  - **数据存储**: `[<database> 数据库]`
  """,

  """
  **3. 设计流程路径**: 连接节点形成完整流程:
  - **顺序流**: `[步骤A] -> [步骤B]`
  - **条件分支**: `[<choice> 条件?] 是-> [路径A]`
  - **多路径汇聚**: 多个路径汇聚到同一节点
  - **循环**: 使用反向连接形成循环,确保有退出条件
  """,

  """
  **4. 组织复杂流程**: 使用分组增强可读性:
  - **阶段分组**: 使用 `<frame>` 按阶段分组
  - **子流程**: 使用 `<package>` 表示子流程
  - **并行任务**: 在同一分组中定义并行任务
  """,

  """
  **5. 应用指令配置**: 在文件开头设置样式指令:
  - #direction: down (布局方向,down 适合流程图)
  - #spacing: 40 (节点间距)
  - #padding: 8 (节点内边距)
  - #fill: #E3F2FD (填充颜色)
  - #stroke: #1976D2 (边框颜色)
  """,

  """
  **6. 验证流程完整性**:
  - 检查所有路径都有明确的终点
  - 检查判断节点的所有分支都有处理
  - 检查循环有退出条件
  - 检查无悬空节点或断裂路径
  - 测试渲染确保语法正确
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **Nomnoml 语法符合性**:
  - 所有指令在文件开头
  - 判断节点使用 `<choice>` 标签
  - 起止节点使用 `<start>` 和 `<end>` 标签
  - 嵌套层级适度 (建议 ≤ 3 层)
  - 条件分支使用 `条件->` 标注
  """,

  """
  **流程逻辑完整性**:
  - 有明确的起点和终点
  - 所有流程路径都有明确的终点,无断链
  - 判断节点的所有分支都有处理
  - 循环有明确的退出条件,无死循环
  - 异常情况有处理路径
  """,

  """
  **决策节点清晰度**:
  - 判断节点使用 `<choice>` 标签
  - 判断条件清晰明确
  - 每个分支都有标签说明
  - 覆盖所有可能的情况
  """,

  """
  **可读性和专业性**:
  - 节点命名清晰
  - 布局合理
  - 适当使用分组组织复杂流程
  - 适当使用样式指令改善视觉效果
  - 流程路径清晰
  - 能被 Kroki 成功渲染
  """
]
