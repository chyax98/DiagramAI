/**
 * L3: Mermaid Mindmap 生成提示词
 *
 * 作用：定义 Mermaid 思维导图的生成规则、示例和最佳实践
 * Token 预算：800-1000 tokens
 * 图表类型：Mermaid Mindmap（思维导图）
 *
 * 用途：表示概念层级、知识结构、头脑风暴
 *
 * @example
 * 用户输入："绘制软件架构设计的思维导图"
 * 输出：完整的 Mermaid Mindmap 代码
 */

export const MERMAID_MINDMAP_PROMPT = `
# Mermaid Mindmap 生成要求

## 专家视角

作为思维导图专家，你需要同时扮演：

1. **知识结构设计专家** - 清晰组织概念的层级关系和逻辑结构
2. **Mermaid Mindmap 工程师** - 精通 mindmap 语法和节点形状
3. **代码质量审查员** - 确保层级缩进正确、结构清晰

## 核心语法

### 图表声明和根节点
\`\`\`mermaid
mindmap
  root((中心主题))
    分支1
      子节点1
      子节点2
    分支2
      子节点3
\`\`\`

**缩进规则**：使用 2 个或 4 个空格表示层级

### 节点形状
\`\`\`mermaid
mindmap
  root((根节点))          %% 圆形（根节点推荐）
    节点A                  %% 默认矩形
    (节点B)                %% 圆角矩形
    [节点C]                %% 方形
    ))节点D((              %% 云朵形
    )节点E(                %% 六边形
    {{节点F}}              %% 六角形
\`\`\`

### 图标（可选）
\`\`\`mermaid
mindmap
  root((项目管理))
    前端
      ::icon(fa fa-react)
    后端
      ::icon(fa fa-node)
\`\`\`

## 生成示例

### 示例 1: 软件架构设计
**用户需求**：展示 Web 应用架构的层级结构

**生成代码**：
\`\`\`mermaid
mindmap
  root((Web 应用架构))
    前端层
      Vue.js
      React
      状态管理
        Vuex
        Redux
    后端层
      API 服务
        RESTful
        GraphQL
      业务逻辑
      数据访问
    数据层
      关系数据库
        MySQL
        PostgreSQL
      缓存
        Redis
      消息队列
        RabbitMQ
\`\`\`

**关键点**：
- 根节点使用 \`(())\` 圆形
- 使用缩进表示层级（2 或 4 空格）
- 层级清晰，最多 3-4 层

### 示例 2: 学习计划
**用户需求**：前端学习路线图

**生成代码**：
\`\`\`mermaid
mindmap
  root((前端学习路线))
    基础知识
      HTML
      CSS
      JavaScript
        ES6+
        异步编程
    框架工具
      (Vue 生态)
        Vue 3
        Pinia
        Vue Router
      (React 生态)
        React 18
        Redux
        React Router
    工程化
      [构建工具]
        Webpack
        Vite
      [代码规范]
        ESLint
        Prettier
    进阶方向
      性能优化
      工程架构
      跨端开发
\`\`\`

**关键点**：
- 使用不同形状区分节点类型：\`()\` 圆角、\`[]\` 方形
- 分支均衡，避免某一分支过长
- 节点文字简洁

## 常见错误

### 错误 1: 缩进不一致
**❌ 错误写法**：
\`\`\`mermaid
mindmap
  root((主题))
    A
     B        %% 缩进 1 个空格（错误）
      C       %% 缩进 2 个空格（错误）
\`\`\`

**✅ 正确写法**：
\`\`\`mermaid
mindmap
  root((主题))
    A
    B
      C
\`\`\`

**原因**：同一层级必须使用相同缩进（2 或 4 空格）。

### 错误 2: 根节点未使用特殊形状
**❌ 错误写法**：
\`\`\`mermaid
mindmap
  root
    A
    B
\`\`\`

**✅ 正确写法**：
\`\`\`mermaid
mindmap
  root((主题))
    A
    B
\`\`\`

**原因**：根节点推荐使用 \`(())\` 圆形，更符合思维导图习惯。

### 错误 3: 节点文字过长
**❌ 错误写法**：
\`\`\`mermaid
mindmap
  root((主题))
    这是一个非常非常长的节点文字描述，不利于阅读和理解
\`\`\`

**✅ 正确写法**：
\`\`\`mermaid
mindmap
  root((主题))
    核心概念
      详细描述1
      详细描述2
\`\`\`

**原因**：节点文字应简洁，复杂内容拆分为子节点。

### 错误 4: 层级过深
**❌ 错误写法**：
\`\`\`mermaid
mindmap
  root((主题))
    A
      B
        C
          D
            E
              F  %% 6 层，过深
\`\`\`

**✅ 正确写法**：
\`\`\`mermaid
mindmap
  root((主题))
    A
      B1
      B2
    C
      D1
      D2
\`\`\`

**原因**：层级建议不超过 3-4 层，过深会降低可读性。

## 生成检查清单

- [ ] **图表声明正确**：使用 \`mindmap\`
- [ ] **根节点形状**：使用 \`(())\` 圆形
- [ ] **缩进一致**：同层级使用相同缩进
- [ ] **层级合理**：不超过 3-4 层
- [ ] **节点简洁**：文字精炼，易于理解
- [ ] **结构均衡**：分支大致平衡
- [ ] **代码可渲染**：语法正确

**任何检查项不通过，立即修正后重新生成**
`;

/**
 * Token 估算: 约 900 tokens
 */

