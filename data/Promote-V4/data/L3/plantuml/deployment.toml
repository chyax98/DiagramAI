# ============================================
# L3 类型层 v1.0.0
# PlantUML Deployment (部署图) 规范
# ============================================

[meta]
level = "L3"
language = "plantuml"
diagram_type = "deployment"
version = "1.0.0"
description = "PlantUML 部署图规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关的元数据
complexity = "high"
target_length = 3000
use_cases = ["系统部署架构", "物理拓扑", "云架构设计", "混合云部署"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "系统架构师",
  "DevOps 工程师"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **节点和工件区分**: 必须正确区分节点和工件:
  - 节点 (`node`): 物理设备或运行环境 (服务器、容器、虚拟机)
  - 工件 (`artifact`): 部署在节点上的软件 (jar, war, exe, 应用程序)
  - 数据库 (`database`): 数据库服务器或实例
  - 云服务 (`cloud`): 云服务提供商或云资源
  工件必须部署在节点上,不能独立存在。
  """,

  """
  **部署关系规范**: 工件部署在节点上有两种表示方式:
  - 嵌套方式: `node "服务器" { artifact "应用" }` (推荐)
  - 连接方式: `node -- artifact` (简单场景)
  嵌套方式更清晰地表达部署关系,推荐使用。
  """,

  """
  **通信协议标注**: 节点间的通信必须标注协议:
  - 使用 `-->` 表示有方向的通信 (如 HTTP 请求)
  - 使用 `--` 表示双向通信 (如 TCP/IP)
  - 箭头标签标注通信协议 (HTTP, HTTPS, JDBC, REST API, 专线连接)
  通信协议说明节点间如何交互,是部署图的重要信息。
  """,

  """
  **嵌套层次规范**: PlantUML 部署图有固定的嵌套层次规则:
  - `package/cloud` → `node` → `artifact`
  - 不能在节点内嵌套包 (package)
  - 避免深层嵌套 (建议 ≤ 3 层)
  - 正确使用分组结构 (package, cloud)
  """,

  """
  **元素类型选择**: 使用合适的 PlantUML 元素类型:
  - `node` : 通用节点/服务器
  - `artifact` : 软件工件 (jar, war, exe)
  - `database` : 数据库服务器
  - `cloud` : 云服务
  - `folder` : 文件夹
  - `package` : 软件包/逻辑分组
  - `actor` : 用户/外部参与者
  选择合适的类型使图表更专业和易读。
  """,

  """
  **Kroki 性能约束**: 控制部署图的复杂度以确保 Kroki 成功渲染:
  - 节点数量 ≤ 40 个
  - 工件数量 ≤ 60 个
  - 嵌套层级 ≤ 3 层
  - 连接数量 ≤ 80 条
  超限时应按地域、层级或功能拆分为多个独立图表。
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别物理节点和设备**:
  - 识别系统的所有物理节点 (服务器、容器、虚拟机、设备)
  - 确定节点的类型 (Web 服务器、应用服务器、数据库服务器、负载均衡器)
  - 使用合适的 PlantUML 类型 (node, database, cloud)
  - 考虑部署环境 (本地数据中心、公有云、私有云、混合云)
  """,

  """
  **2. 识别软件工件**:
  - 识别部署在节点上的软件工件 (应用程序、服务、中间件)
  - 确定工件的类型 (jar, war, exe, Docker 容器, 静态资源)
  - 使用 `artifact` 关键字定义工件
  - 明确工件的部署位置 (在哪个节点上)
  """,

  """
  **3. 设计部署结构**:
  - 使用嵌套方式表达工件部署在节点上
  - 使用 `package` 进行逻辑分组 (按层次或功能)
  - 使用 `cloud` 表示云环境或云服务
  - 明确系统的物理边界和逻辑边界
  """,

  """
  **4. 设计通信路径**:
  - 识别节点间的通信路径 (HTTP, HTTPS, JDBC, TCP/IP)
  - 使用 `-->` 表示有方向的通信
  - 使用 `--` 表示双向通信
  - 箭头标签标注通信协议
  - 说明关键通信路径 (如专线连接、VPN 隧道)
  """,

  """
  **5. 优化可读性**:
  - 使用注释 (note) 说明节点的职责和特点
  - 合理控制节点和工件数量 (避免过度复杂)
  - 超大部署图按地域、层级或功能拆分
  - 使用 `package` 或 `cloud` 进行逻辑分组
  - 选择合理的布局方向 (横向或纵向)
  """,

  """
  **6. 处理大型部署图**:
  - 节点 > 40 个时,按地域拆分 (北京机房、上海机房)
  - 工件 > 60 个时,合并为逻辑组 (微服务组、基础服务组)
  - 嵌套 > 3 层时,简化层次结构
  - 连接 > 80 条时,只保留核心通信路径
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **节点和工件正确性**:
  - 节点使用正确的类型 (node, database, cloud)
  - 工件部署在节点上,不独立存在
  - 元素命名清晰,表达实际部署实体
  - 嵌套关系正确 (package/cloud → node → artifact)
  """,

  """
  **通信协议完整性**:
  - 所有节点间通信都标注了协议
  - 通信方向使用正确的箭头类型 (-->)
  - 通信协议标注准确 (HTTP, HTTPS, JDBC, REST API)
  - 关键通信路径有说明 (如专线连接)
  """,

  """
  **部署结构合理性**:
  - 部署结构符合实际物理拓扑
  - 使用 `package` 或 `cloud` 进行逻辑分组
  - 嵌套层次合理 (≤ 3 层)
  - 节点和工件数量适中,不超过 Kroki 限制
  """,

  """
  **可读性和专业性**:
  - 布局合理,节点和工件分布均匀
  - 适当使用注释说明节点职责
  - 通信路径清晰,不交叉或交叉最少
  - 大型部署图使用分组或拆分策略
  - 系统边界清晰 (内网、公有云、私有云)
  - 关键架构特点突出 (如高可用、负载均衡)
  """
]
