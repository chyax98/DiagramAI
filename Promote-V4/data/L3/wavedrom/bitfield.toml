# ============================================
# L3 类型层 - WaveDrom Bitfield 位字段图规范
# ============================================
# 版本: 1.0.0
# 创建日期: 2025-10-19
# 图表类型: bitfield - 位字段图
# ============================================

[meta]
level = "L3"
language = "wavedrom"
diagram_type = "bitfield"
version = "1.0.0"
description = "L3: WaveDrom - Bitfield 位字段图生成规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型元数据
complexity = "medium"
target_length = 3000
use_cases = ["指令编码", "协议帧格式", "数据包结构", "硬件接口"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "指令集架构专家 - 精通 RISC-V、MIPS、ARM 等指令集编码格式和指令格式规范",
  "网络协议工程师 - 掌握 TCP/IP、UDP、IPv4/IPv6 等协议的数据包头部格式和字段定义",
  "硬件接口设计师 - 理解硬件数据结构的位级布局、字节序、对齐和填充规则"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **Bitfield 即 Register**: WaveDrom 的 Bitfield 图表与 Register 图表完全相同,都使用 `"reg"` 数组:
  - 语法: `{"reg":[{"bits":位宽,"name":"字段名","attr":"属性","type":类型}]}`
  - 用途: 展示位字段的静态布局结构
  - 应用: 指令编码、协议帧、数据包、硬件接口、任何需要位级布局的场景
  - 区别: Bitfield 名称更通用,Register 侧重于硬件寄存器
  """,

  """
  **指令编码规范**: 指令集架构的位字段布局遵循特定规范:
  - 标准位宽: 16位(Thumb)、32位(RISC-V/MIPS/ARM)、64位(扩展指令)
  - 字段分配: opcode(操作码)、rd/rs/rt(寄存器)、funct(功能码)、imm(立即数)
  - 字段顺序: 按照 ISA 规范从低位到高位排列
  - 示例: RISC-V R-type → opcode(7)、rd(5)、funct3(3)、rs1(5)、rs2(5)、funct7(7)
  """,

  """
  **协议帧格式规范**: 网络协议数据包的位字段布局规范:
  - 标准布局: 通常以 32 位(4 字节)为一行,使用 lanes 参数控制
  - 字段类型: 头部字段(Version/IHL)、地址(SRC/DST)、控制(Flags)、校验(Checksum)
  - 多行显示: IPv4(160位,lanes:4)、TCP(>160位,lanes:4)、UDP(64位,lanes:2)
  - 示例: TCP 头部 → SRC_PORT(16)、DST_PORT(16)、SEQ_NUM(32)、ACK_NUM(32)...
  """,

  """
  **字段分组和颜色编码**: 使用 attr 和 type 区分不同功能的字段:
  - 指令编码:
    - opcode/funct: type:2(绿色),attr:"OP"
    - 寄存器: type:4(橙色),attr:"dest"/"src"
    - 立即数: type:3(黄色),attr:"immediate"
  - 协议字段:
    - 头部信息: type:1(蓝色),attr:"Header"
    - 地址字段: type:0(灰色),attr:"SRC"/"DST"
    - 控制字段: type:5(红色),attr:"Control"
    - 校验字段: type:7(深灰),attr:"Checksum"
  """,

  """
  **位宽总和规范**: 位字段图的位宽总和应符合标准:
  - 指令编码: 16、32、64 位(标准指令长度)
  - 协议帧: 32 位的倍数(网络协议通常以 4 字节对齐)
  - 硬件接口: 8、16、32、64、128 位(标准数据宽度)
  - 修复: 使用保留位、填充位或对齐位补齐到标准位宽
  - 示例: RISC-V I-type 缺 1 位 → 不允许,必须严格 32 位
  """,

  """
  **lanes 多行布局**: 大于 32 位的位字段图使用 lanes 参数分行显示:
  - 32 位: lanes:1(单行)或 lanes:2(每行 16 位)
  - 64 位: lanes:2(每行 32 位)或 lanes:4(每行 16 位)
  - 128 位: lanes:4(每行 32 位)或 lanes:8(每行 16 位)
  - 160 位(IPv4): lanes:4(每行 32 位,共 5 行)
  - 示例: `{"config":{"lanes":4}}` → 32 位/行
  """,

  """
  **专业文档规范**: 位字段图用于专业技术文档时的规范:
  - attr 数组形式: 多层级标注(如 ["[7:0]","RW"] 表示位范围和访问权限)
  - 位范围标注: 使用 attr 标注位范围(如 "[31:24]"、"[15:0]")
  - 功能分组: 使用 attr 标注功能分组(如 "Header"、"Payload"、"Control")
  - 颜色一致性: 同类型字段使用相同颜色,增强可读性
  - 布局优化: hspace 适应字段名长度,vspace 优化多行间距
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别位字段应用场景**:
  - 指令编码: 识别 ISA 类型(RISC-V/MIPS/ARM)、指令格式(R/I/S/B/U/J-type)
  - 协议帧: 识别协议类型(TCP/UDP/IPv4/IPv6)、帧结构(头部/数据/尾部)
  - 数据包: 识别数据包类型(以太网帧、Wi-Fi 帧、CAN 报文)
  - 硬件接口: 识别接口类型(PCIe、DDR、USB)、配置空间、寄存器映射
  """,

  """
  **2. 设计位字段分配**:
  - 确定总位宽(16/32/64/128/160/...)
  - 从低位到高位规划字段顺序(根据 ISA 或协议规范)
  - 分配每个字段的位宽(根据功能需求)
  - 设计字段命名(使用标准术语: opcode/rd/rs/funct/imm/src_port/dst_port/flags)
  - 确保位宽总和符合标准(补充保留位对齐)
  """,

  """
  **3. 应用分组和颜色**:
  - 使用 attr 标注字段分组(OP/dest/src/immediate 或 Header/Payload/Control)
  - 使用 type 颜色区分字段类型:
    - 指令编码: opcode(绿)、寄存器(橙)、立即数(黄)
    - 协议字段: 头部(蓝)、地址(灰)、控制(红)、校验(深灰)
  - attr 数组形式: 专业文档使用 ["位范围","功能"] 多层级标注
  - 示例: `{"bits":7,"name":"opcode","attr":"OP","type":2}`
  """,

  """
  **4. 配置多行布局**:
  - 根据总位宽选择 lanes(32位=1-2行、64位=2-4行、128位=4-8行、160位=4行)
  - 协议帧优先使用 lanes:4(每行 32 位,符合网络协议惯例)
  - 指令编码优先使用 lanes:1(单行显示完整指令)
  - 调整 hspace 适应字段名长度(短名=800、长名=1000-1200)
  - 调整 vspace 优化多行间距(单行=80、多行=100-120)
  """,

  """
  **5. 验证和优化**:
  - 检查位宽总和(必须符合标准: 16/32/64/128/160...)
  - 验证字段顺序(符合 ISA 或协议规范)
  - 检查 type 值范围(0-7)
  - 验证 attr 格式(字符串或字符串数组)
  - 测试渲染结果,确保布局专业美观
  - 对比官方文档,确保与标准一致
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **规范符合性**:
  - 指令编码: 严格符合 ISA 规范(RISC-V/MIPS/ARM 手册)
  - 协议帧: 严格符合 RFC 或协议标准(TCP/UDP/IP)
  - 字段顺序: 从低位到高位(MSB → LSB 或 LSB → MSB,根据规范)
  - 位宽总和: 符合标准长度(16/32/64/128...)
  """,

  """
  **字段命名专业性**:
  - 使用标准术语(opcode/rd/rs/rt/funct/imm/src_port/dst_port)
  - 保持命名风格一致(全大写、驼峰或下划线)
  - 避免自创缩写,使用行业标准缩写
  - 字段名长度适中(≤20 字符)
  """,

  """
  **分组和颜色合理性**:
  - attr 标注清晰(OP/dest/src 或 Header/Payload)
  - type 颜色区分明显(opcode≠寄存器≠立即数)
  - 同类型字段颜色一致(所有 opcode 都是绿色)
  - 专业文档使用 attr 数组形式(["[7:0]","OP"])
  """,

  """
  **布局专业性**:
  - lanes 配置合理(协议帧=4行、指令=1行)
  - hspace/vspace 优化显示(无字段名溢出)
  - 多行布局清晰(每行 32 位对齐)
  - 符合行业文档惯例(与 RFC、ISA 手册一致)
  """
]

# ============================================
# Section 5: 使用场景 (Use Cases)
# ============================================

[[use_cases]]
title = "RISC-V R-Type 指令格式"
scenario = "展示 RISC-V 32 位 R-type 指令编码格式,包含 opcode、rd、funct3、rs1、rs2、funct7 字段"
key_points = [
  "总位宽 32 位(7+5+3+5+5+7)",
  "字段顺序符合 RISC-V ISA 规范",
  "使用 attr 标注分组(OP/dest/src)",
  "使用 type 颜色区分(opcode=绿、rd=橙、funct3=黄、rs=红)",
  "单行布局,hspace:800 适应字段名"
]

[[use_cases]]
title = "MIPS 32 位指令格式"
scenario = "展示 MIPS R-type 指令编码,包含 opcode、rs、rt、rd、shamt、funct 字段"
key_points = [
  "总位宽 32 位(6+5+5+5+5+6)",
  "字段顺序符合 MIPS ISA 规范",
  "基础语法,仅使用 bits 和 name",
  "单行布局,简洁清晰",
  "适用于指令集手册、处理器架构文档"
]

[[use_cases]]
title = "IPv4 数据包头部"
scenario = "展示 IPv4 协议数据包头部格式,包含 Version、IHL、ToS、Length、ID、Flags、Offset、TTL、Protocol、Checksum、SRC IP、DST IP"
key_points = [
  "总位宽 160 位(20 字节),lanes:4 分 5 行",
  "每行 32 位,符合网络协议惯例",
  "使用颜色区分: 头部(蓝)、服务(绿)、长度(黄)、标识(橙)、TTL(红)、协议(紫)、校验(灰)",
  "使用 attr 标注分组(Header/SRC/DST)",
  "hspace:1000、vspace:100 优化多行布局"
]

[[use_cases]]
title = "TCP 协议头部"
scenario = "展示 TCP 协议头部格式,包含端口、序列号、确认号、偏移、标志、窗口、校验和、紧急指针"
key_points = [
  "总位宽 160 位,lanes:4 分 5 行",
  "使用 attr 标注分组(Port/Port/Seq/Ack/Control)",
  "使用 type 颜色区分(端口=蓝、序列号=绿、确认号=黄、标志=橙、窗口=红、校验=紫)",
  "hspace:1100 适应长字段名(如 Acknowledgment Number)",
  "符合 RFC 793 规范"
]
