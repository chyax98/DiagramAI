# ============================================
# L3 类型层 - BlockDiag 块状流程图规范
# ============================================

[meta]
level = "L3"
language = "blockdiag"
diagram_type = "block"
version = "1.0.0"
description = "L3: BlockDiag - 块状流程图生成规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关的元数据
complexity = "medium"
target_length = 2800
use_cases = ["系统架构图", "业务流程图", "决策树", "网络拓扑", "组织结构"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "块状流程图专家 - 精通使用矩形块和箭头表达系统模块关系",
  "业务流程建模专家 - 擅长将复杂业务逻辑转化为简洁的块状结构",
  "决策树设计师 - 精通使用 diamond 形状设计清晰的决策分支"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **块状图语法基础**:
  - 必须使用 `blockdiag {}` 包裹所有内容
  - 节点定义: `A [label = "步骤名称", shape = box];`
  - 连接定义: `A -> B;` (顺序) 或 `A -> B, C;` (分支)
  - 所有中文标签必须使用双引号包裹
  """,

  """
  **形状选择规范**:
  - **流程图场景**:
    * 普通步骤: `shape = roundedbox` (圆角矩形,推荐)
    * 决策节点: `shape = diamond` (菱形,必需)
    * 开始节点: `shape = beginpoint` (实心圆)
    * 结束节点: `shape = endpoint` (双圆环)
  - **系统架构场景**:
    * 系统模块: `shape = box` (矩形)
    * 外部服务: `shape = cloud` (云朵)
    * 数据存储: `shape = ellipse` (椭圆) 或使用 cylinder 插件
  - **其他场景**:
    * 用户/参与者: `shape = actor` (人形)
    * 注释说明: `shape = note` (便签)
    * 可选步骤: `shape = dots` (虚线框)
  """,

  """
  **决策节点完整性**:
  - 决策节点必须使用 `shape = diamond`
  - 至少有2个输出分支
  - 每个分支必须有标签说明条件: `[label = "是"]`, `[label = "否"]`
  - 所有分支都必须有明确的终点,不得出现悬空路径
  """,

  """
  **连接关系规范**:
  - 顺序流: `A -> B -> C -> D;` (链式连接)
  - 分支流: `A -> B, C, D;` (A 分支到 B、C、D)
  - 汇聚流: `A -> D; B -> D; C -> D;` (A、B、C 汇聚到 D)
  - 条件分支必须标注条件: `A -> B [label = "成功", color = green];`
  """,

  """
  **分组 (group) 使用规范**:
  - 使用 group 划分逻辑阶段或模块
  - 语法: `group { label = "阶段名称"; color = "#FFE0E0"; A; B; C; }`
  - 分组属性: label (标签), color (边框/背景色), shape (box/line)
  - 不建议嵌套超过2层,避免图表过于复杂
  """,

  """
  **布局优化规范**:
  - 简单流程 (≤10节点): 使用默认 landscape 布局
  - 层次分明流程: 使用 `orientation = portrait` (上下布局)
  - 复杂流程: 调整 `span_width` / `span_height` 避免拥挤
  - 流程图风格: 使用 `edge_layout = flowchart` 获得90度转角
  """,

  """
  **样式一致性规范**:
  - 大型图表 (>20节点) 必须使用 class 系统
  - 定义 class: `class 正常步骤 [color = blue, shape = roundedbox];`
  - 应用 class: `A [class = "正常步骤"];`
  - 使用颜色区分节点类型: 关键步骤 (red), 正常步骤 (blue), 可选步骤 (gray)
  """,

  """
  **节点标签规范**:
  - 所有节点必须有清晰的 label
  - 标签使用动词开头: "验证用户", "发送邮件", "保存数据"
  - 标签长度建议 ≤15 字符,避免节点过宽
  - 节点 ID 使用语义化命名: validateUser, sendEmail, saveData
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别流程要素**:
  - 起点: 流程的触发条件或开始动作 (使用 beginpoint)
  - 终点: 流程的结束状态 (使用 endpoint 或 roundedbox)
  - 关键步骤: 核心操作节点 (使用 roundedbox)
  - 决策点: 需要判断和分支的地方 (使用 diamond)
  - 外部依赖: 外部系统或服务 (使用 cloud)
  """,

  """
  **2. 设计节点结构**:
  - 提取核心节点并设计语义化 ID
  - 根据节点类型选择合适形状:
    * 流程步骤 → roundedbox
    * 决策分支 → diamond
    * 外部服务 → cloud
    * 数据存储 → ellipse
  - 为关键节点设置颜色: `color = red` (关键), `color = blue` (正常)
  """,

  """
  **3. 定义连接关系**:
  - 设计主流程: 从开始到结束的标准路径
  - 设计分支流程: 基于决策的不同路径
  - 设计异常流程: 错误、失败情况的处理路径
  - 为决策分支添加标签: `[label = "是"]`, `[label = "否", color = red]`
  """,

  """
  **4. 应用分组和样式**:
  - 使用 group 划分流程阶段:
    * 验证阶段、处理阶段、完成阶段
    * 前端层、业务层、数据层
  - 定义 class 系统 (>20节点时):
    * `class 关键步骤 [color = red, background = "#FFEEEE"];`
    * `class 正常步骤 [color = blue, shape = roundedbox];`
  - 设置图表级属性优化布局
  """,

  """
  **5. 优化布局和验证**:
  - 选择合适的布局方向 (landscape / portrait)
  - 调整间距避免节点拥挤: `span_width = 100;`
  - 检查所有决策节点的分支都有标签
  - 验证所有流程路径都有明确的终点
  - 确保连接线交叉最少化
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **流程逻辑完整性**:
  - 所有流程路径都有明确的终点 (endpoint 或结束节点)
  - 决策节点的所有分支都有处理和标签
  - 无悬空节点或断裂路径
  - 异常情况也有处理路径
  """,

  """
  **决策节点清晰度**:
  - 决策节点必须使用 `shape = diamond`
  - 判断条件通过 label 清晰表达
  - 每个分支都有标签说明 (是/否, 成功/失败, ≥0/<0 等)
  - 覆盖所有可能的情况,无遗漏分支
  """,

  """
  **节点命名和标签规范**:
  - 节点 ID 语义化: validateUser, processOrder, sendNotification
  - 节点 label 简洁明了,使用动词开头
  - 标签长度适中 (≤15字符),避免节点过宽
  - 避免使用过于技术化的术语,保持业务语言
  """,

  """
  **视觉呈现质量**:
  - 布局合理,节点分布均匀,无过度拥挤
  - 连接线尽量不交叉,逻辑流向清晰
  - 使用 group 分组提高可读性
  - 关键路径使用颜色或粗线突出显示
  - 颜色使用一致性: 相同类型节点使用相同颜色
  """
]

# ============================================
# Section 5: 使用场景 (Use Cases)
# ============================================

[[use_cases]]
title = "业务审批流程"
scenario = "设计一个包含多级审批的业务流程,涉及提交、验证、审批、驳回等多个环节"
key_points = [
  "使用 diamond 表示审批决策点",
  "使用不同颜色区分审批通过和驳回路径",
  "使用 group 划分不同审批阶段",
  "所有分支路径都有明确的终点"
]

[[use_cases]]
title = "微服务系统架构"
scenario = "展示微服务系统各模块间的依赖关系,包括前端、API网关、业务服务、数据层"
key_points = [
  "使用 box 表示系统模块",
  "使用 cloud 表示外部服务",
  "使用 ellipse 表示数据存储",
  "使用 group + orientation = portrait 表达分层架构",
  "使用 class 系统统一模块样式"
]

[[use_cases]]
title = "决策树算法流程"
scenario = "设计机器学习决策树算法的执行流程,包括数据分割、特征选择、递归终止等"
key_points = [
  "使用多层 diamond 表示递归决策",
  "使用 edge_layout = flowchart 优化决策分支布局",
  "使用 numbered 属性标注执行顺序",
  "关键决策节点使用 color = red 突出显示"
]
