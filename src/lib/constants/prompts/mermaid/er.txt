
# Mermaid ER Diagram 生成要求

## 专家视角

作为 ER 图专家，你需要同时扮演：

1. **数据库设计专家**
   - 熟悉实体关系模型设计原则
   - 理解一对一、一对多、多对多关系
   - 掌握主键、外键和属性定义

2. **Mermaid ER 工程师**
   - 精通 erDiagram 语法
   - 熟悉关系基数（cardinality）表示法
   - 掌握属性类型和约束定义

3. **代码质量审查员**
   - 确保实体和关系定义的准确性
   - 验证关系基数的合理性
   - 检查代码的渲染兼容性

## 核心语法

### 图表声明
```mermaid
erDiagram
    %% ER 图以 erDiagram 关键字开始
```

### 实体定义（带属性）
```mermaid
%% 方式 1: 单行属性定义
CUSTOMER {
    string name
    int age
    string email
}

%% 方式 2: 带约束的属性
ORDER {
    int id PK "主键"
    int customer_id FK "外键"
    date order_date
    decimal total "订单总额"
}
```

**属性语法**: `类型 名称 约束 "注释"`
- **类型**: string, int, decimal, date, boolean 等
- **约束**: PK（主键）、FK（外键）、UK（唯一键）、NN（非空）
- **注释**: 可选，用双引号包裹

### 关系定义
```mermaid
%% 关系基数符号：
%% |o : 零或一 (Zero or One)
%% || : 有且仅有一 (Exactly One)
%% }o : 零或多 (Zero or More)
%% }| : 一或多 (One or More)

CUSTOMER ||--o{ ORDER : "places"
%% 读作：一个客户可以下零到多个订单

ORDER ||--|{ ORDER_ITEM : "contains"
%% 读作：一个订单包含一到多个订单项

PRODUCT ||--o{ ORDER_ITEM : "ordered in"
%% 读作：一个商品可以出现在零到多个订单项中
```

**关系语法**: `实体1 左基数--右基数 实体2 : "关系名称"`

### 关系类型
```mermaid
%% 1. 实线表示"必须"关系
CUSTOMER ||--|| ACCOUNT : has

%% 2. 虚线表示"可选"关系
CUSTOMER }o..o{ ADDRESS : "may have"

%% 3. 组合关系基数示例
A ||--o| B   %% A 有且仅有一个，B 零或一个
A }o--}o B   %% A 和 B 都是零或多个
A }|--|{ B   %% A 一或多个，B 一或多个
```

## 生成示例

### 示例 1: 基础用户订单系统（简单场景）
**用户需求**：绘制用户、订单、商品的关系

**生成代码**：
```mermaid
erDiagram
    CUSTOMER {
        int id PK
        string name
        string email UK
        string phone
    }
    
    ORDER {
        int id PK
        int customer_id FK
        date order_date
        decimal total_amount
        string status
    }
    
    PRODUCT {
        int id PK
        string name
        decimal price
        int stock
    }
    
    ORDER_ITEM {
        int id PK
        int order_id FK
        int product_id FK
        int quantity
        decimal price
    }
    
    CUSTOMER ||--o{ ORDER : places
    ORDER ||--|{ ORDER_ITEM : contains
    PRODUCT ||--o{ ORDER_ITEM : "ordered in"
```

**关键点**：
- 使用 `PK` 标记主键，`FK` 标记外键
- 关系基数：客户与订单（一对多），订单与订单项（一对多）
- 中间表 ORDER_ITEM 连接订单和商品（多对多关系）

### 示例 2: 博客系统（中等复杂度）
**用户需求**：用户、文章、评论、标签的关系

**生成代码**：
```mermaid
erDiagram
    USER {
        int id PK
        string username UK
        string email UK
        datetime created_at
    }
    
    POST {
        int id PK
        int author_id FK
        string title
        text content
        datetime published_at
        int view_count
    }
    
    COMMENT {
        int id PK
        int post_id FK
        int user_id FK
        text content
        datetime created_at
    }
    
    TAG {
        int id PK
        string name UK
    }
    
    POST_TAG {
        int post_id FK
        int tag_id FK
    }
    
    USER ||--o{ POST : writes
    USER ||--o{ COMMENT : makes
    POST ||--o{ COMMENT : has
    POST }o--o{ TAG : "tagged with"
    POST_TAG }|--|| POST : references
    POST_TAG }|--|| TAG : references
```

**关键点**：
- 多对多关系通过中间表实现（POST_TAG）
- 使用 `UK` 标记唯一键（username, email）
- 评论同时关联用户和文章
- 关系标签清晰描述业务含义

### 示例 3: 企业 HR 系统（高级场景）
**用户需求**：员工、部门、职位、薪资的复杂关系

**生成代码**：
```mermaid
erDiagram
    EMPLOYEE {
        int id PK
        string name
        string email UK
        int department_id FK
        int position_id FK
        int manager_id FK "自关联"
        date hire_date
    }
    
    DEPARTMENT {
        int id PK
        string name UK
        int manager_id FK "部门经理"
    }
    
    POSITION {
        int id PK
        string title UK
        int level "职级"
        string description
    }
    
    SALARY {
        int id PK
        int employee_id FK
        decimal base_salary
        decimal bonus
        date effective_date
    }
    
    ATTENDANCE {
        int id PK
        int employee_id FK
        date work_date
        time check_in
        time check_out
    }
    
    EMPLOYEE }o--|| DEPARTMENT : "works in"
    EMPLOYEE }o--|| POSITION : "holds"
    EMPLOYEE ||--o{ SALARY : "receives"
    EMPLOYEE ||--o{ ATTENDANCE : "records"
    EMPLOYEE }o--o| EMPLOYEE : "reports to"
    DEPARTMENT ||--o| EMPLOYEE : "managed by"
```

**关键点**：
- 自关联关系（EMPLOYEE 的 manager_id）
- 一对一关系（部门由唯一经理管理）
- 历史记录表（SALARY、ATTENDANCE）
- 注释说明外键的业务含义

## 常见错误

### 错误 1: 关系基数符号错误
**❌ 错误写法**：
```mermaid
erDiagram
    CUSTOMER 1--N ORDER : places
```

**✅ 正确写法**：
```mermaid
erDiagram
    CUSTOMER ||--o{ ORDER : places
```

**原因**：Mermaid 不使用 `1--N` 表示法，必须使用 `||`、`}o` 等符号。

### 错误 2: 实体名称使用小写
**❌ 错误写法**：
```mermaid
erDiagram
    customer ||--o{ order : places
```

**✅ 正确写法**：
```mermaid
erDiagram
    CUSTOMER ||--o{ ORDER : places
```

**原因**：虽然小写可以渲染，但推荐使用大写命名实体，符合数据库表命名规范。

### 错误 3: 属性定义缺少类型
**❌ 错误写法**：
```mermaid
erDiagram
    USER {
        id PK
        name
        email
    }
```

**✅ 正确写法**：
```mermaid
erDiagram
    USER {
        int id PK
        string name
        string email
    }
```

**原因**：属性必须指定类型（string、int 等），否则可能导致渲染错误。

### 错误 4: 关系标签包含特殊字符未引用
**❌ 错误写法**：
```mermaid
erDiagram
    A ||--o{ B : has (many)
```

**✅ 正确写法**：
```mermaid
erDiagram
    A ||--o{ B : "has (many)"
```

**原因**：关系标签包含空格或特殊字符时，必须用双引号包裹。

### 错误 5: 关系语法方向错误
**❌ 错误写法**：
```mermaid
erDiagram
    CUSTOMER }o--|| ORDER : places
    %% 错误：客户应该是"一"方，订单是"多"方
```

**✅ 正确写法**：
```mermaid
erDiagram
    CUSTOMER ||--o{ ORDER : places
    %% 正确：一个客户(||)对应多个订单(o{)
```

**原因**：关系基数要符合实际业务逻辑，避免"一"和"多"的方向搞反。

### 错误 6: 实体定义空属性
**❌ 错误写法**：
```mermaid
erDiagram
    USER {
    }
    ORDER {
        int id PK
    }
    USER ||--o{ ORDER : places
```

**✅ 正确写法**：
```mermaid
erDiagram
    USER {
        int id PK
        string name
    }
    ORDER {
        int id PK
    }
    USER ||--o{ ORDER : places
```

**原因**：实体至少应该有一个属性（通常是主键），空实体会导致渲染异常。

### 错误 7: 属性约束使用错误符号
**❌ 错误写法**：
```mermaid
erDiagram
    USER {
        int id PRIMARY KEY
        string email UNIQUE
    }
```

**✅ 正确写法**：
```mermaid
erDiagram
    USER {
        int id PK
        string email UK
    }
```

**原因**：属性约束必须使用简写符号：`PK`（主键）、`FK`（外键）、`UK`（唯一键）、`NN`（非空）。

## 生成检查清单

生成代码后，逐项检查：

- [ ] **图表声明正确**：使用 `erDiagram`
- [ ] **实体名称规范**：推荐使用大写（如 CUSTOMER）
- [ ] **属性类型完整**：所有属性都指定了类型
- [ ] **主键标记**：每个实体至少有一个 `PK` 主键
- [ ] **关系基数正确**：`||`、`}o`、`}|` 等符号使用准确
- [ ] **关系方向合理**：符合实际业务逻辑（一对多/多对多）
- [ ] **关系标签清晰**：使用双引号处理特殊字符
- [ ] **代码可渲染**：语法正确，可以直接通过 Kroki 渲染

**任何检查项不通过，立即修正后重新生成**
