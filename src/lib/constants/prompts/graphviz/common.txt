
# Graphviz DOT 语言通用规范

## 强制规则（Mandatory Rules）

### ⚠️ 规则 1: digraph 必须使用 `->`，graph 必须使用 `--`
这是最常见的致命错误！混用会导致编译失败。

**错误示例**：
```dot
digraph {
  A -- B;  // ❌ 编译失败！有向图不能使用 --
}
```

**正确写法**：
```dot
digraph {
  A -> B;  // ✅ 有向图使用 ->
}

graph {
  A -- B;  // ✅ 无向图使用 --
}
```

**违反后果**：
```
Error: syntax error in line 2 near '--'
```

---

### ⚠️ 规则 2: 所有语句必须以分号结尾
这是 DOT 语法的硬性要求！缺少分号会导致解析失败。

**错误示例**：
```dot
digraph {
  A -> B           // ❌ 缺少分号！
  B -> C [color="red"]   // ❌ 缺少分号！
  node [shape=box]       // ❌ 缺少分号！
}
```

**正确写法**：
```dot
digraph {
  A -> B;                    // ✅ 正确
  B -> C [color="red"];      // ✅ 正确
  node [shape=box];          // ✅ 正确
}
```

**违反后果**：
```
Error: syntax error in line 3
```

---

### ⚠️ 规则 3: 聚类子图必须以 `cluster_` 开头
如果要显示边框和标签,子图名称必须遵守这个命名规则。

**错误示例**：
```dot
digraph {
  subgraph group1 {    // ❌ 不会显示边框！
    label="组1";
    A; B;
  }
}
```

**正确写法**：
```dot
digraph {
  subgraph cluster_group1 {  // ✅ 正确，会显示边框
    label="组1";
    style=filled;
    color=lightgrey;
    A; B;
  }
}
```

**违反后果**：
不会报错,但子图不会显示可视边框,用户意图无法实现。

---

### ⚠️ 规则 4: 节点 ID 包含空格或特殊字符必须用引号
**错误示例**：
```dot
digraph {
  用户 管理员 -> 系统;      // ❌ 空格导致解析为两个节点
  node@1 -> node#2;        // ❌ 特殊字符导致解析错误
}
```

**正确写法**：
```dot
digraph {
  "用户 管理员" -> 系统;    // ✅ 正确
  "node@1" -> "node#2";    // ✅ 正确
  // 或直接使用中文无空格
  用户管理员 -> 系统;       // ✅ 推荐
}
```

**违反后果**：
```
Error: syntax error in line 2
```

---

### ⚠️ 规则 5: rankdir 和全局样式必须在所有节点和边定义之前
**错误示例**：
```dot
digraph {
  A -> B;
  rankdir=LR;  // ❌ 放在后面可能不生效
  node [shape=box];  // ❌ 可能影响之前定义的节点
}
```

**正确写法**：
```dot
digraph {
  rankdir=LR;  // ✅ 必须放在最前面
  node [shape=box];  // ✅ 全局样式紧随其后
  edge [color="#1976d2"];

  A -> B;  // ✅ 节点和边定义放在最后
}
```

**违反后果**：
布局方向或样式可能不生效,导致图表显示异常。

---

## 语法要求

### 图声明
```dot
// 有向图（使用 -> 连接）
digraph 图名称 {
  // 图内容
}

// 无向图（使用 -- 连接）
graph 图名称 {
  // 图内容
}

// 严格图（不允许重复边）
strict digraph 图名称 {
  // 图内容
}
```

**重要规则**：
- 有向图必须使用 `digraph` 和 `->`
- 无向图必须使用 `graph` 和 `--`
- 不要混用 `->` 和 `--`
- 图名称可选，支持中文但建议使用英文

### 节点语法
```dot
// 基础节点定义
节点ID [label="显示文本"];

// 带多个属性
节点ID [
  label="显示文本",
  shape=box,
  style=filled,
  fillcolor="#e3f2fd"
];

// 中文节点（推荐）
用户 [shape=circle];
订单 [shape=box];
```

**常用节点形状**：
- `box` - 矩形（默认，通用步骤）
- `circle` - 圆形（状态节点）
- `ellipse` - 椭圆（默认形状）
- `diamond` - 菱形（判断节点）
- `doublecircle` - 双圆（结束状态）
- `cylinder` - 圆柱（数据库）
- `plaintext` - 纯文本（无边框）

### 边语法
```dot
// 有向图
A -> B;
A -> B [label="条件"];
A -> B [label="成功", color="#4caf50", style=bold];

// 无向图
A -- B;
A -- B [label="连接", color="#2196f3"];

// 链式连接
A -> B -> C -> D;
```

**常用边样式**：
- `solid` - 实线（默认）
- `dashed` - 虚线
- `dotted` - 点线
- `bold` - 粗线

## 命名规范

### 节点 ID 命名
- ✅ **推荐**：直接使用中文（Graphviz 完整支持中文）
- ✅ **可选**：使用英文字母、数字、下划线
- ❌ **避免**：使用特殊字符（! @ # $ % ^ & *）

**示例**：
```dot
// ✅ 好的命名
用户;
订单系统;
node1;
user_service;

// ❌ 不推荐
node@1;        // 包含特殊字符
node 1;        // 包含空格（需要引号）
"node 1";      // 需要引号，不够清晰
```

### 标签命名
- 使用 `label` 属性定义显示文本
- 支持中文、英文、数字、符号
- 可以使用 `\n` 换行

## 样式系统

### 全局样式
```dot
digraph {
  // 全局配置
  rankdir=TB;          // 布局方向：TB/LR/BT/RL
  node [shape=box, style=filled, fillcolor="#e3f2fd"];
  edge [color="#1976d2", fontsize=10];
  
  // 图内容...
}
```

### 布局方向
- `TB` (Top to Bottom) - 从上到下（默认）
- `LR` (Left to Right) - 从左到右
- `BT` (Bottom to Top) - 从下到上
- `RL` (Right to Left) - 从右到左

### 布局引擎
- `dot` - 层次化布局（默认，适合流程图）
- `neato` - 弹簧模型（适合无向图）
- `circo` - 环形布局（适合网络拓扑）
- `fdp` - 力导向布局（适合大型图）
- `twopi` - 径向布局（适合中心辐射）
- `osage` - 聚类布局

**布局引擎选择指南**：
- **有向流程图**：使用 `dot`（默认），自动分层排列
- **无向关系图**：使用 `neato`，基于物理弹簧模型平衡节点位置
- **环形拓扑图**：使用 `circo`，适合显示循环关系或网络拓扑
- **大型复杂图**：使用 `fdp`，力导向布局处理大规模节点
- **中心辐射图**：使用 `twopi`，根节点居中，其他节点环绕分布

**使用方法**：
```dot
graph {
  layout=circo;  // 指定布局引擎
  // ...
}
```

### 子图（Subgraph）
```dot
digraph {
  // 聚类子图（带边框）
  subgraph cluster_0 {
    label="组名";
    style=filled;
    color="#bbdefb";
    fillcolor="#e3f2fd";
    
    节点A;
    节点B;
  }
  
  // 普通子图（用于布局约束）
  subgraph {
    rank=same;  // 节点在同一水平线
    节点C;
    节点D;
  }
}
```

**重要规则**：
- 聚类子图必须以 `cluster_` 开头
- 聚类子图会显示边框和标签
- 普通子图用于布局约束

## 常见错误

### 错误 1: 混用有向图和无向图语法（对应强制规则 1）
**❌ 错误写法**：
```dot
digraph {
  A -- B;  // ❌ 有向图不能使用 --
}

graph {
  A -> B;  // ❌ 无向图不能使用 ->
}
```

**✅ 正确写法**：
```dot
digraph {
  A -> B;  // ✅ 有向图使用 ->
}

graph {
  A -- B;  // ✅ 无向图使用 --
}
```

**原因**：digraph 和 graph 的连接符语法不同,混用会导致语法错误。

---

### 错误 2: 语句缺少分号（对应强制规则 2）
**❌ 错误写法**：
```dot
digraph {
  A -> B
  C -> D [color="red"]
  node [shape=box]
}
```

**✅ 正确写法**：
```dot
digraph {
  A -> B;
  C -> D [color="red"];
  node [shape=box];
}
```

**原因**：DOT 语法要求所有语句以分号结尾,这是硬性约束。

---

### 错误 3: 子图命名错误（对应强制规则 3）
**❌ 错误写法**：
```dot
digraph {
  subgraph group1 {  // ❌ 缺少 cluster_ 前缀，不会显示边框
    label="组1";
    A; B;
  }
}
```

**✅ 正确写法**：
```dot
digraph {
  subgraph cluster_group1 {  // ✅ cluster_ 前缀必需
    label="组1";
    style=filled;
    color=lightgrey;
    A; B;
  }
}
```

**原因**：只有以 cluster_ 开头的子图才会显示边框。

---

### 错误 4: 节点 ID 包含空格未加引号（对应强制规则 4）
**❌ 错误写法**：
```dot
digraph {
  用户 管理员 -> 系统;      // ❌ 空格导致解析为两个节点
  node@1 -> node#2;        // ❌ 特殊字符导致解析错误
}
```

**✅ 正确写法**：
```dot
digraph {
  "用户 管理员" -> 系统;    // ✅ 正确
  "node@1" -> "node#2";    // ✅ 正确
  // 或直接使用中文无空格
  用户管理员 -> 系统;       // ✅ 推荐
}
```

**原因**：空格和特殊字符会被解析为分隔符或语法字符,必须用引号包裹。

---

### 错误 5: 全局配置位置错误（对应强制规则 5）
**❌ 错误写法**：
```dot
digraph {
  A -> B;
  C -> D;
  rankdir=LR;          // ❌ 放在后面可能不生效
  node [shape=box];    // ❌ 不会影响已定义的节点
}
```

**✅ 正确写法**：
```dot
digraph {
  rankdir=LR;          // ✅ 布局方向放在最前面
  node [shape=box];    // ✅ 全局样式紧随其后
  edge [color="#333"];

  A -> B;              // ✅ 节点和边定义放在最后
  C -> D;
}
```

**原因**：rankdir 和全局样式必须在节点定义之前,否则可能不生效。

## Kroki 渲染注意事项

### 支持的特性
- ✅ 所有标准 DOT 语法
- ✅ 中文节点和标签
- ✅ 所有布局引擎（dot、neato、circo、fdp、twopi、osage）
- ✅ HTML 标签（<BR/>、<B>、<I> 等）
- ✅ 颜色名称和十六进制色值

### 不支持的特性
- ❌ 外部图片引用（image 属性）
- ❌ 自定义字体文件
- ❌ PostScript 自定义形状

### 最佳实践
1. **使用十六进制颜色**：`#4caf50` 比 `green` 更精确
2. **避免过度嵌套**：最多 3 层子图嵌套
3. **合理使用换行**：标签使用 `\n` 保持简洁
4. **统一样式**：同类节点使用相同形状和颜色
5. **测试布局引擎**：不同引擎适合不同场景
