# ============================================
# L3 类型层 - Erd ER Diagram (实体关系图)
# ============================================

[meta]
level = "L3"
language = "erd"
diagram_type = "er"
version = "1.0.0"
description = "L3: Erd 实体关系图生成规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关元数据
complexity = "medium"
target_length = 2500
use_cases = ["数据库设计", "数据建模", "系统设计", "ER 图文档化"]

# ============================================
# Section 1: D 角色定义
# ============================================

[D_role]
additional_roles = [
  "数据库 ER 建模专家",
  "Erd 简洁语法设计师",
  "关系型数据库设计师"
]

# ============================================
# Section 2: E 约束条件
# ============================================

[E_constraints]
items = [
  """
  **实体主键强制规则**: 每个实体必须有至少一个主键（使用 `*` 标记）。这是 Erd 的核心规则，没有主键的实体无法正确渲染。
  - 主键标记 `*` 必须紧贴属性名，中间不能有空格（如 `*user_id` 而非 `* user_id`）
  - 推荐使用自增整数或 UUID 作为主键
  - 复合主键: 多个属性都标记 `*`（如 `*order_id`, `*product_id`）
  """,

  """
  **关系基数强制标注**: 所有关系必须明确标注双方的基数，不能省略。
  - 语法: `实体A 基数1--基数2 实体B`
  - 基数符号: `?`（0或1）, `1`（恰好1）, `*`（0或多）, `+`（1或多）
  - 示例: `用户 1--* 订单`（一对多）, `学生 *--* 课程`（多对多）
  - 错误: `用户 -- 订单`（缺少基数标注）
  """,

  """
  **实体命名方括号规则**: 实体名必须用方括号 `[]` 包裹。
  - 正确: `[用户]`, `[订单]`, `[产品分类]`
  - 错误: `用户`, `订单`（缺少方括号）
  - 包含空格或特殊字符: 使用引号（`` [`用户 账户`] ``, `['产品 信息']`）
  """,

  """
  **外键引用规范**:
  - 外键使用 `+` 前缀标记（如 `+user_id`, `+order_id`）
  - 外键命名格式: `<referenced_entity>_id`（如 `user_id` 引用 `[用户]` 实体）
  - 外键引用的实体必须存在
  - 复合键（同时是主键和外键）: `*+` 或 `+*`（如 `*+order_id`）
  """,

  """
  **多对多关系处理**:
  - Erd 语法支持直接使用 `*--*` 表示多对多关系
  - 数据库实现建议: 使用中间实体（关联表）实现多对多关系
  - 中间实体命名: 使用两个实体名的组合（如 `[选课记录]` 连接 `[学生]` 和 `[课程]`）
  - 中间实体的好处: 可以存储额外信息（如选课成绩、时间戳）
  """,

  """
  **自引用关系规范**:
  - 自引用关系必须添加标签说明（如 `Employee ?--1 Employee {label: "manages"}`）
  - 标签应清晰表达关系方向和含义（如 "管理"、"上级"、"下级"）
  - 常见自引用场景: 组织架构（员工-主管）、分类树（分类-父分类）、评论树（评论-父评论）
  """,

  """
  **关系标签使用**:
  - 使用 `{label: "描述"}` 为关系添加标签
  - 标签应使用动词短语描述关系（如 "拥有"、"属于"、"管理"、"创建"）
  - 多个关系连接同两个实体时，必须添加区分标签（如 `game *--1 team {label: "home"}`, `game *--1 team {label: "away"}`）
  """,

  """
  **属性类型标注（可选）**:
  - 使用 `{label: "类型, 约束"}` 为属性添加类型和约束信息
  - 示例: `*user_id {label: "varchar(50), not null", color: "#ff0000"}`
  - 常见类型: `varchar(n)`, `integer`, `decimal(m,n)`, `datetime`, `boolean`
  - 常见约束: `not null`, `unique`, `default value`, `auto_increment`
  """,

  """
  **格式化选项使用**:
  - 实体级别样式: `[实体名] {bgcolor: "#ececfc", size: "20", border: "2"}`
  - 属性级别样式: `*person_id {label: "varchar(50), not null", color: "#ff0000"}`
  - 关系标签: `实体A *--1 实体B {label: "关系描述"}`
  - 左花括号 `{` 必须在同一行
  - 支持的属性: `label`, `color`, `bgcolor`, `size`, `font`, `border-color`, `border`
  """,

  """
  **命名规范严格性**:
  - 实体名: 大写开头、单数形式（如 `Person` 而非 `Persons`）
  - 属性名: 小写下划线（如 `user_id` 而非 `userId` 或 `UserID`）
  - 主键后缀: `id` 或 `<entity>_id`
  - 外键格式: `<referenced_entity>_id`
  - 布尔值前缀: `is_`, `has_`, `can_`
  - 时间戳后缀: `_at`（如 `created_at`, `updated_at`）
  """
]

# ============================================
# Section 3: P 流程规范
# ============================================

[P_process]
items = [
  """
  **1. 业务实体识别**:
  - 从用户需求中提取核心业务概念（如用户、订单、商品、分类）
  - 识别实体的关键属性（如用户的 user_id、username、email）
  - 识别哪些属性是主键（唯一标识符）
  - 识别哪些属性是外键（引用其他实体）
  - 识别时间戳字段（如 created_at, updated_at）
  """,

  """
  **2. 关系类型分析**:
  - 一对一关系（1--1）: 一个实体对应另一个实体的唯一实例（如用户与用户资料）
  - 一对多关系（1--*）: 一个实体对应多个另一实体的实例（如用户与订单）
  - 多对多关系（*--*）: 两个实体相互对应多个实例（如学生与课程）
  - 可选关系（?--1, ?--*）: 关系可能不存在（如用户可能没有地址）
  """,

  """
  **3. Erd 代码生成（严格按顺序）**:
  - **步骤 1**: 添加全局指令（可选，必须在最前面）
  - **步骤 2**: 定义核心实体（使用 `[实体名]`，添加主键 `*` 和外键 `+`）
  - **步骤 3**: 定义关联实体（如中间表）
  - **步骤 4**: 定义所有关系（明确标注基数，添加标签）
  - **注意**: 违反顺序会导致语法错误（如全局指令在实体之后）
  """,

  """
  **4. 多对多关系实现**:
  - Erd 语法层: 可以直接使用 `*--*`（如 `学生 *--* 课程`）
  - 数据库实现层: 建议使用中间实体（如 `[选课记录]`）
  - 中间实体好处: 可以存储额外信息（如选课成绩、选课时间）
  - 示例:
    ```
    [学生]
    *student_id
    name

    [课程]
    *course_id
    name

    [选课记录]
    *enrollment_id
    +student_id
    +course_id
    score
    semester

    学生 1--* 选课记录
    课程 1--* 选课记录
    ```
  """,

  """
  **5. 质量检查与优化**:
  - 验证文件结构顺序（全局指令 → 实体 → 关系）
  - 验证每个实体都有主键（`*` 标记）
  - 验证所有关系都有明确的基数标注
  - 验证外键引用的实体存在
  - 验证命名规范（实体大写、属性小写下划线）
  - 验证能被 Kroki 成功渲染
  - 优化关系布局（减少连接线交叉）
  """
]

# ============================================
# Section 4: H 质量标准
# ============================================

[H_quality]
items = [
  """
  **Erd 语法正确性**:
  - 文件结构顺序正确（全局指令 → 实体 → 关系）
  - 每个实体都有主键（`*` 标记）
  - 主键标记 `*` 紧贴属性名，无空格
  - 实体名用方括号 `[]` 包裹
  - 所有关系都有明确的基数标注
  - 格式化选项语法正确（左花括号在同一行）
  """,

  """
  **数据模型准确性**:
  - 实体定义完整，属性覆盖业务需求
  - 关系类型准确（一对一、一对多、多对多）
  - 基数标注准确（必须、可选）
  - 外键引用正确，引用的实体存在
  - 多对多关系通过中间实体实现（便于扩展）
  - 自引用关系添加标签说明
  """,

  """
  **命名规范符合性**:
  - 实体名大写开头、单数形式（如 `Person`, `Order`, `Product_Category`）
  - 属性名小写下划线（如 `user_id`, `created_at`, `full_name`）
  - 主键后缀 `id`（如 `user_id`, `order_id`）
  - 外键格式 `<referenced_entity>_id`（如 `user_id`, `product_id`）
  - 布尔值前缀 `is_`, `has_`, `can_`
  - 时间戳后缀 `_at`（如 `created_at`, `updated_at`）
  """,

  """
  **业务语义清晰性**:
  - 实体名称使用业务术语，易于理解（如 `用户`、`订单`、`商品分类`）
  - 属性名称清晰表达含义（如 `username` 而非 `un`, `total_amount` 而非 `amt`）
  - 关系标签清晰描述业务逻辑（如 "用户拥有订单"、"订单包含商品"）
  - 使用中文命名，便于非技术人员理解
  """,

  """
  **Kroki 渲染质量**:
  - 生成的 Erd 代码能被 Kroki 成功渲染为 SVG 图像
  - 无渲染错误或警告
  - 图形布局清晰，实体分布合理
  - 关系线不交叉或交叉最少
  - 文本标签清晰易读
  - 实体框大小适中，内容完整显示
  """
]

# ============================================
# Section 5: 使用场景
# ============================================

[[use_cases]]
title = "用户认证系统"
scenario = "简单的用户认证系统，包含用户和用户资料"
key_points = [
  "一对一关系: 一个用户对应一个用户资料",
  "主键使用自增整数 user_id",
  "外键使用 +user_id 引用用户实体",
  "时间戳字段: created_at, updated_at"
]

[[use_cases]]
title = "电商订单系统"
scenario = "用户下单购买商品，涉及订单和订单明细"
key_points = [
  "一对多关系: 用户 → 订单 → 订单明细",
  "外键引用: 订单.user_id 引用用户, 订单明细.order_id 引用订单",
  "多对多关系: 商品和订单通过订单明细关联",
  "订单明细存储额外信息: quantity, price"
]

[[use_cases]]
title = "学生选课系统"
scenario = "学生选修课程，记录成绩"
key_points = [
  "多对多关系: 学生和课程通过选课记录关联",
  "中间实体: 选课记录存储额外信息（成绩、学期）",
  "复合主键或独立主键: enrollment_id",
  "外键: student_id, course_id"
]
