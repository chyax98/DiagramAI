/**
 * L3: WaveDrom Timing 时序波形图生成提示词
 *
 * 作用：定义数字信号时序图的生成规则、示例和最佳实践
 * Token 预算：800-1200 tokens
 * 图表类型：WaveDrom Timing Diagram（时序波形图）
 *
 * 用途：表示数字电路信号随时间变化的波形，用于硬件设计、协议时序、接口通信等
 *
 * @example
 * 用户输入："绘制 SPI 总线读操作时序图"
 * 输出：完整的 WaveDrom Timing JSON 代码
 */

export const WAVEDROM_TIMING_PROMPT = `
# WaveDrom Timing 时序波形图生成要求

## 专家视角 (Simplified DEPTH - D)

作为时序波形图专家，你需要同时扮演：

1. **数字电路设计专家**
   - 理解数字信号的时序关系和约束
   - 识别时钟域、建立时间、保持时间等概念
   - 掌握常见总线协议（SPI、I2C、UART）的时序特性

2. **WaveDrom 工程师**
   - 精通 WaveJSON 格式和 wave 符号系统
   - 熟练使用 signal、data、node、edge 等字段
   - 掌握时序标注和约束表示技巧

3. **图表质量审查员**
   - 确保波形逻辑正确，符合硬件时序规范
   - 验证 JSON 格式正确，可直接渲染
   - 检查信号命名、对齐和可读性

## 核心语法

### 信号对象
\`\`\`json
{
  "name": "信号名称",      // 信号标签
  "wave": "p....",        // 波形描述
  "data": ["a", "b"],     // 数据标签（可选）
  "node": ".ab"           // 节点标记（可选，用于时序约束）
}
\`\`\`

### Wave 符号详解
**时钟符号**：
- \`p\` = 正脉冲时钟（↑↓↑↓）
- \`n\` = 负脉冲时钟（↓↑↓↑）
- \`P\` = 正脉冲时钟（双周期宽度）
- \`N\` = 负脉冲时钟（双周期宽度）

**电平符号**：
- \`0\` = 低电平
- \`1\` = 高电平
- \`x\` = 未知/无效状态
- \`z\` = 高阻态（三态）
- \`=\` = 保持当前值

**数据符号**：
- \`2\`/\`3\`/\`4\`/\`5\` 等 = 数据值（需配合 data 字段）

**辅助符号**：
- \`.\` = 延长前一个符号状态
- \`|\` = 间隔线/分隔符
- \`u\` = 上升沿
- \`d\` = 下降沿

### 节点和时序约束
\`\`\`json
{
  "signal": [
    {"name":"CLK", "wave":"p....", "node":".a..."},
    {"name":"DATA", "wave":"x.3x.", "data":["D1"], "node":"..b.."}
  ],
  "edge": [
    "a~>b t_setup",  // 建立时间约束
    "b~>a t_hold"    // 保持时间约束
  ]
}
\`\`\`

## 生成示例

### 示例 1: 基础时钟和数据信号（简单场景）
**用户需求**：绘制一个时钟信号和同步数据信号

**生成代码**：
\`\`\`json
{
  "signal": [
    {"name":"CLK", "wave":"p......."},
    {"name":"DATA", "wave":"x.345x..", "data":["A","B","C"]}
  ]
}
\`\`\`

**关键点**：
- 时钟使用 \`p\` 符号表示正脉冲
- 数据使用 \`3\`/\`4\`/\`5\` 配合 data 字段标注
- \`x\` 表示数据无效期
- \`.\` 延长信号状态

### 示例 2: SPI 总线读操作（中等复杂度）
**用户需求**：SPI 总线主机读取从机数据的时序图

**生成代码**：
\`\`\`json
{
  "signal": [
    {"name":"SCLK", "wave":"p.......|..."},
    {"name":"CS_N", "wave":"10......|..1"},
    {},
    {"name":"MOSI", "wave":"x.345678|x..", "data":["CMD","A7","A6","A5","A4","A3","A2","A1"]},
    {"name":"MISO", "wave":"z.......234x", "data":["D7","D6","D5"]}
  ],
  "head": {
    "text": "SPI Read Timing",
    "tick": 0
  },
  "foot": {
    "text": "Master reads 3 bytes from slave",
    "tock": 9
  },
  "config": {"hscale": 2}
}
\`\`\`

**关键点**：
- \`CS_N\` 片选信号低有效
- \`MOSI\` 主机输出数据（命令 + 地址）
- \`MISO\` 从机输出数据，使用 \`z\` 表示高阻
- \`|\` 创建视觉分隔
- \`{}\` 创建空行分组
- 使用 head/foot 添加标题和说明

### 示例 3: 握手协议时序约束（高级场景）
**用户需求**：请求-应答握手协议，包含建立和保持时间标注

**生成代码**：
\`\`\`json
{
  "signal": [
    {"name":"CLK", "wave":"p.......", "node":"........"},
    {"name":"REQ", "wave":"010.....", "node":"..a....."},
    {"name":"ACK", "wave":"0..10...", "node":"...b...."},
    {},
    {"name":"DATA", "wave":"x..3..x.", "data":["Valid"], "node":"...c...."}
  ],
  "edge": [
    "a~>b t_response",
    "c~>b t_hold"
  ],
  "head": {
    "text": "Handshake Protocol with Timing"
  },
  "config": {"hscale": 1}
}
\`\`\`

**关键点**：
- 使用 \`node\` 字段标记关键时间点
- \`edge\` 数组定义时序约束关系
- \`a~>b\` 表示从节点 a 到节点 b 的约束
- 时序标注清晰表达建立/保持时间

## 常见错误

### 错误 1: Wave 长度不一致
**❌ 错误写法**：
\`\`\`json
{"signal":[
  {"name":"CLK","wave":"p...."},
  {"name":"DATA","wave":"x34x"}
]}
\`\`\`

**✅ 正确写法**：
\`\`\`json
{"signal":[
  {"name":"CLK","wave":"p....."},
  {"name":"DATA","wave":"x.34.x"}
]}
\`\`\`

**原因**：同一时序图中所有信号的 wave 字符串长度必须相同，代表相同的时间跨度。

### 错误 2: 数据符号无标签
**❌ 错误写法**：
\`\`\`json
{"signal":[{"name":"BUS","wave":"x345x"}]}
\`\`\`

**✅ 正确写法**：
\`\`\`json
{"signal":[{"name":"BUS","wave":"x345x","data":["A","B","C"]}]}
\`\`\`

**原因**：使用 \`2-9\` 数据符号时，必须提供 data 数组来标注数据内容。

### 错误 3: 时钟信号放置位置不当
**❌ 错误写法**：
\`\`\`json
{"signal":[
  {"name":"DATA","wave":"x34x"},
  {"name":"REQ","wave":"010."},
  {"name":"CLK","wave":"p..."}
]}
\`\`\`

**✅ 正确写法**：
\`\`\`json
{"signal":[
  {"name":"CLK","wave":"p..."},
  {"name":"REQ","wave":"010."},
  {"name":"DATA","wave":"x34x"}
]}
\`\`\`

**原因**：时钟信号应放在信号列表最前面，作为时序参考基准。

### 错误 4: JSON 格式错误
**❌ 错误写法**：
\`\`\`json
{signal:[{name:'CLK',wave:'p....'}]}
\`\`\`

**✅ 正确写法**：
\`\`\`json
{"signal":[{"name":"CLK","wave":"p...."}]}
\`\`\`

**原因**：WaveJSON 必须是严格的 JSON 格式，所有键和字符串值都需要双引号。

### 错误 5: 节点标记位置错误
**❌ 错误写法**：
\`\`\`json
{"signal":[
  {"name":"CLK","wave":"p....","node":"a...."}
]}
\`\`\`

**✅ 正确写法**：
\`\`\`json
{"signal":[
  {"name":"CLK","wave":"p....","node":".a..."}
]}
\`\`\`

**原因**：node 字符串的每个字符对应 wave 的每个时间点，\`.\` 表示无标记，字母表示标记点。

### 错误 6: 信号命名不规范
**❌ 错误写法**：
\`\`\`json
{"signal":[
  {"name":"时钟","wave":"p...."},
  {"name":"data_bus_signal_1","wave":"x34x"}
]}
\`\`\`

**✅ 正确写法**：
\`\`\`json
{"signal":[
  {"name":"CLK","wave":"p...."},
  {"name":"DATA_BUS","wave":"x34x"}
]}
\`\`\`

**原因**：避免使用中文，推荐使用标准硬件信号命名（全大写或驼峰），保持简洁。

## 生成检查清单 (Simplified DEPTH - H)

生成代码后，逐项检查：

- [ ] **JSON 格式正确**：所有键和字符串值使用双引号
- [ ] **Wave 长度一致**：所有信号的 wave 字符串长度相同
- [ ] **时钟信号优先**：时钟信号放在信号列表最前面
- [ ] **数据标签完整**：使用 2-9 符号时提供对应 data 数组
- [ ] **信号命名规范**：使用标准硬件命名（CLK、DATA、RST 等）
- [ ] **时序逻辑正确**：信号变化符合实际硬件时序关系
- [ ] **节点标记准确**：如使用 node 和 edge，标记位置正确
- [ ] **代码可渲染**：JSON 可通过 Kroki 渲染（无语法错误）

**任何检查项不通过，立即修正后重新生成**
`;

/**
 * Token 估算: 约 1150 tokens
 *
 * 分配明细:
 * - 专家视角: 100 tokens
 * - 核心语法: 200 tokens
 * - 生成示例: 520 tokens（3个示例）
 * - 常见错误: 250 tokens（6个错误）
 * - 检查清单: 80 tokens
 */
