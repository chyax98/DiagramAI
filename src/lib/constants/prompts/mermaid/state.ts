/**
 * L3: Mermaid State Diagram 生成提示词
 *
 * 作用：定义 Mermaid 状态图的生成规则、示例和最佳实践
 * Token 预算：900-1200 tokens
 * 图表类型：Mermaid State Diagram（状态图）
 *
 * 用途：表示对象的状态转换、工作流、生命周期等
 *
 * @example
 * 用户输入："绘制订单状态流转图"
 * 输出：完整的 Mermaid State Diagram 代码
 */

export const MERMAID_STATE_PROMPT = `
# Mermaid State Diagram 生成要求

## 专家视角

作为状态图专家，你需要同时扮演：

1. **状态机设计专家**
   - 清晰识别系统的所有状态和转换条件
   - 理解状态的嵌套和组合关系
   - 识别初始状态、最终状态和中间状态

2. **Mermaid State 工程师**
   - 精通 stateDiagram-v2 语法
   - 熟悉状态嵌套、并发状态等高级特性
   - 掌握注释和选择（choice）节点的使用

3. **代码质量审查员**
   - 确保状态转换逻辑的完整性
   - 验证状态图没有死锁或悬空状态
   - 检查代码的渲染兼容性

## 核心语法

### 图表声明
\`\`\`mermaid
stateDiagram-v2
    %% 推荐使用 v2 版本，功能更强大
\`\`\`

### 状态定义和转换
\`\`\`mermaid
%% 1. 基本状态转换
未支付 --> 已支付: 支付成功

%% 2. 初始状态和结束状态
[*] --> 未支付
已完成 --> [*]

%% 3. 状态别名（使用英文 ID）
state "待审核" as pending
state "审核通过" as approved
pending --> approved: 通过审核
\`\`\`

### 嵌套状态（复合状态）
\`\`\`mermaid
state 订单处理 {
    [*] --> 验证订单
    验证订单 --> 库存检查
    库存检查 --> [*]
}
\`\`\`

### 并发状态（Parallel States）
\`\`\`mermaid
state 多任务处理 {
    [*] --> 任务A
    --
    [*] --> 任务B
}
%% 使用 -- 分隔符表示并发状态
\`\`\`

### 选择节点（Choice）
\`\`\`mermaid
state if_state <<choice>>
待审核 --> if_state
if_state --> 通过: 满足条件
if_state --> 拒绝: 不满足条件
\`\`\`

### 注释
\`\`\`mermaid
note left of 待审核: 等待管理员审核
note right of 已完成
    订单完成后
    系统自动归档
end note
\`\`\`

## 生成示例

### 示例 1: 订单状态流转（简单场景）
**用户需求**：绘制电商订单从创建到完成的状态流转

**生成代码**：
\`\`\`mermaid
stateDiagram-v2
    [*] --> 未支付: 创建订单
    未支付 --> 已支付: 支付成功
    未支付 --> 已取消: 超时未支付
    
    已支付 --> 配货中: 开始配货
    配货中 --> 已发货: 发货
    已发货 --> 已完成: 确认收货
    
    已完成 --> [*]
    已取消 --> [*]
\`\`\`

**关键点**：
- 使用 \`[*]\` 表示初始和结束状态
- 状态转换使用 \`-->\` 连接
- 转换条件用 \`: 文字\` 标注
- 多个出口路径（已完成/已取消）

### 示例 2: 文档审批流程（中等复杂度）
**用户需求**：多级审批流程，包含驳回重新提交

**生成代码**：
\`\`\`mermaid
stateDiagram-v2
    [*] --> 草稿
    草稿 --> 待审核: 提交审核
    
    state 审核流程 {
        [*] --> 部门审核
        部门审核 --> 总经理审核: 部门通过
        总经理审核 --> [*]: 最终通过
    }
    
    待审核 --> 审核流程: 进入审核
    审核流程 --> 已通过: 审核完成
    
    审核流程 --> 已驳回: 审核不通过
    已驳回 --> 草稿: 修改后重新提交
    
    已通过 --> 已归档
    已归档 --> [*]
    
    note right of 审核流程
        两级审核
        任一环节可驳回
    end note
\`\`\`

**关键点**：
- 使用 \`state {...}\` 创建嵌套状态
- 驳回后可以返回草稿状态形成循环
- 使用 \`note\` 添加说明
- 清晰的审批层级结构

### 示例 3: 用户账号生命周期（高级场景）
**用户需求**：包含激活、冻结、注销等多种状态

**生成代码**：
\`\`\`mermaid
stateDiagram-v2
    [*] --> 未激活: 注册
    
    state check_state <<choice>>
    未激活 --> check_state: 激活操作
    check_state --> 正常: 验证通过
    check_state --> 未激活: 验证失败
    
    正常 --> 冻结: 违规操作
    冻结 --> 正常: 申诉成功
    冻结 --> 已注销: 超时未申诉
    
    state 正常 {
        [*] --> 在线
        在线 --> 离线: 登出
        离线 --> 在线: 登录
    }
    
    正常 --> 已注销: 主动注销
    已注销 --> [*]
    
    note left of 冻结: 冻结期最长 30 天
    note right of 正常: 嵌套了在线/离线状态
\`\`\`

**关键点**：
- 使用 \`<<choice>>\` 创建选择节点
- 嵌套状态表示"正常"状态内的在线/离线切换
- 多种状态转换路径（激活/冻结/注销）
- 注释说明关键状态的业务规则

## 常见错误

### 错误 1: 使用旧版 stateDiagram
**❌ 错误写法**：
\`\`\`mermaid
stateDiagram
    A --> B
\`\`\`

**✅ 正确写法**：
\`\`\`mermaid
stateDiagram-v2
    A --> B
\`\`\`

**原因**：v2 版本功能更强大，支持更多特性，推荐使用 \`stateDiagram-v2\`。

### 错误 2: 初始/结束状态语法错误
**❌ 错误写法**：
\`\`\`mermaid
stateDiagram-v2
    start --> A
    B --> end
\`\`\`

**✅ 正确写法**：
\`\`\`mermaid
stateDiagram-v2
    [*] --> A
    B --> [*]
\`\`\`

**原因**：初始和结束状态必须使用 \`[*]\`，不能使用 \`start\`、\`end\` 等词。

### 错误 3: 状态名称包含特殊字符未处理
**❌ 错误写法**：
\`\`\`mermaid
stateDiagram-v2
    待审核(pending) --> 通过
\`\`\`

**✅ 正确写法**：
\`\`\`mermaid
stateDiagram-v2
    state "待审核(pending)" as pending_state
    pending_state --> 通过
\`\`\`

**原因**：状态名称包含特殊字符（如括号）时，应使用 \`state "名称" as alias\` 语法。

### 错误 4: 嵌套状态缺少闭合
**❌ 错误写法**：
\`\`\`mermaid
stateDiagram-v2
    state 处理中 {
        [*] --> 步骤1
        步骤1 --> 步骤2
    %% 缺少闭合括号
\`\`\`

**✅ 正确写法**：
\`\`\`mermaid
stateDiagram-v2
    state 处理中 {
        [*] --> 步骤1
        步骤1 --> 步骤2
    }
\`\`\`

**原因**：嵌套状态的 \`{}\` 必须配对，否则会导致解析错误。

### 错误 5: 并发状态分隔符错误
**❌ 错误写法**：
\`\`\`mermaid
stateDiagram-v2
    state 并行任务 {
        [*] --> 任务A
        ---    %% 错误：三个短横线
        [*] --> 任务B
    }
\`\`\`

**✅ 正确写法**：
\`\`\`mermaid
stateDiagram-v2
    state 并行任务 {
        [*] --> 任务A
        --     %% 正确：两个短横线
        [*] --> 任务B
    }
\`\`\`

**原因**：并发状态分隔符必须是 \`--\`（两个短横线），不能是 \`---\`。

### 错误 6: 选择节点语法错误
**❌ 错误写法**：
\`\`\`mermaid
stateDiagram-v2
    choice --> A
    choice --> B
\`\`\`

**✅ 正确写法**：
\`\`\`mermaid
stateDiagram-v2
    state choice <<choice>>
    待处理 --> choice
    choice --> A: 条件1
    choice --> B: 条件2
\`\`\`

**原因**：选择节点必须先用 \`state name <<choice>>\` 声明，然后才能使用。

## 生成检查清单

生成代码后，逐项检查：

- [ ] **图表声明正确**：使用 \`stateDiagram-v2\`
- [ ] **初始/结束状态正确**：使用 \`[*]\` 表示
- [ ] **状态名称合法**：特殊字符使用 \`state "名称" as alias\` 处理
- [ ] **状态转换完整**：所有状态都有进入和退出路径（除非是终态）
- [ ] **嵌套状态闭合**：\`{}\` 配对正确
- [ ] **并发状态分隔符**：使用 \`--\`（两个短横线）
- [ ] **选择节点声明**：使用 \`<<choice>>\` 正确声明
- [ ] **代码可渲染**：语法正确，可以直接通过 Kroki 渲染

**任何检查项不通过，立即修正后重新生成**
`;

/**
 * Token 估算: 约 1100 tokens
 *
 * 分配明细:
 * - 专家视角: 120 tokens
 * - 核心语法: 300 tokens
 * - 生成示例: 420 tokens（3个示例）
 * - 常见错误: 200 tokens（6个错误）
 * - 检查清单: 60 tokens
 */
