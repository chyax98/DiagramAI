
# WaveDrom 语言通用规范

## 强制规则（Mandatory Rules）

### ⚠️ 规则 1: 必须使用严格的 JSON 格式
WaveDrom 要求有效的 JSON 格式，所有键和字符串值必须使用双引号。单引号、缺少引号或尾随逗号都会导致渲染失败。

**错误示例**：
```json
{signal:[{name:'clk',wave:'p....'}]}  // ❌ 编译失败！
```

**正确写法**：
```json
{"signal":[{"name":"clk","wave":"p...."}]}  // ✅ 正确
```

**Kroki 编译错误信息**：
```
SyntaxError: Unexpected token s in JSON at position 1
Kroki API: HTTP 400 Bad Request - Invalid JSON input
JSON parse error at line 1 column 2
```

**原因**：WaveJSON 基于严格的 JSON 标准，不支持 JavaScript 对象字面量语法。

---

### ⚠️ 规则 2: signal 或 reg 数组是必需的
所有 WaveDrom 图表的根对象必须包含 `signal` 数组（时序图）或 `reg` 数组（位字段图）。

**错误示例**：
```json
{"name":"CLK","wave":"p...."}  // ❌ 缺少根数组
```

**正确写法**：
```json
{"signal":[{"name":"CLK","wave":"p...."}]}  // ✅ 时序图
{"reg":[{"bits":8,"name":"data"}]}          // ✅ 位字段图
```

**Kroki 编译错误信息**：
```
Error: Missing 'signal' or 'reg' array in root object
Kroki: HTTP 400 Bad Request - Invalid WaveDrom structure
WaveDrom: Cannot render diagram - no signal or register data found
```

**原因**：WaveDrom 根据根数组类型判断图表类型，缺少根数组无法渲染。

---

### ⚠️ 规则 3: Wave 字符串长度必须一致
同一时序图中所有信号的 wave 字符串长度必须相同，代表相同的时间跨度。不一致的长度会导致对齐错误或渲染失败。

**错误示例**：
```json
{"signal":[
  {"name":"CLK","wave":"p...."},     // 5 个字符
  {"name":"DATA","wave":"x34x"}      // ❌ 4 个字符，长度不匹配！
]}
```

**正确写法**：
```json
{"signal":[
  {"name":"CLK","wave":"p....."},    // 5 个字符
  {"name":"DATA","wave":"x.34.x"}    // ✅ 5 个字符，长度一致
]}
```

**Kroki 编译错误信息**：
```
Warning: Wave length mismatch - CLK:5, DATA:4
WaveDrom: Rendering may produce misaligned signals
可能导致渲染错位或部分信号显示异常
```

**原因**：WaveDrom 使用字符串长度作为时间轴基准，不一致会破坏时序对齐。

---

### ⚠️ 规则 4: 数据符号必须配合 data 数组
使用数据符号（2-9）时，必须在同一信号对象中提供 `data` 数组来标注数据内容。缺少 data 数组会导致数据符号显示为空白。

**错误示例**：
```json
{"signal":[
  {"name":"BUS","wave":"x345x"}      // ❌ 使用了 3/4/5 但无 data
]}
```

**正确写法**：
```json
{"signal":[
  {"name":"BUS","wave":"x345x","data":["A","B","C"]}  // ✅ 提供 data 数组
]}
```

**Kroki 编译错误信息**：
```
Warning: Data symbols (3,4,5) found but 'data' array is missing
WaveDrom: Data symbols will be rendered as empty boxes
数据符号将显示为空白框，无法表达信息
```

**原因**：数据符号 2-9 是对 data 数组的索引引用，缺少 data 数组无法显示标签。

---

### ⚠️ 规则 5: Wave 符号必须合法
wave 字符串只能包含预定义的符号字符，不支持中文、特殊符号或空格。非法字符会导致渲染失败或显示异常。

**错误示例**：
```json
{"signal":[
  {"name":"CLK","wave":"开始结束"}    // ❌ 使用了中文字符
]}
```

**正确写法**：
```json
{"signal":[
  {"name":"CLK","wave":"p...."}      // ✅ 使用合法符号
]}
```

**合法符号列表**：
- 时钟: `p` `n` `P` `N`
- 电平: `0` `1` `x` `z` `=`
- 数据: `2` `3` `4` `5` `6` `7` `8` `9`
- 辅助: `.` `|` `u` `d`

**Kroki 编译错误信息**：
```
Error: Invalid wave character '开' at position 0
Kroki: Rendering failed - Unknown symbol in wave string
WaveDrom: Character '开' is not recognized
```

**原因**：WaveDrom 仅支持预定义的 ASCII 符号集，超出范围的字符无法解析。

---

### ⚠️ 规则 6: Kroki 兼容性约束
通过 Kroki 渲染时，需要遵守以下额外约束：

1. **禁止 JSON 注释** - Kroki 使用标准 JSON 解析器，不支持 `//` 或 `/* */` 注释
2. **URL 编码限制** - 超大图表（>10KB JSON）可能超过 URL 长度限制
3. **超时限制** - 复杂图表（>100 个信号）可能触发 5 秒渲染超时
4. **字符转义** - 字符串中的双引号必须转义为 `\"`
5. **无外部资源** - 不支持嵌入图片或外部 SVG 文件

**错误示例**：
```json
{
  "signal": [
    {"name": "CLK", "wave": "p...."}  // 这是时钟注释 - ❌ JSON 不支持
  ]
}
```

**正确写法**：
```json
{
  "signal": [
    {"name": "CLK", "wave": "p...."}
  ]
}
```

**Kroki 编译错误信息**：
```
HTTP 400 Bad Request: JSON parse error
Unexpected token / in JSON at position 45
SyntaxError: Comments are not allowed in JSON
```

**原因**：Kroki 使用标准 JSON 解析器，严格遵守 RFC 8259 规范，不支持任何 JSON 扩展语法。

---

## WaveDrom 核心特性

### Edge 时序约束系统

WaveDrom 支持使用 `edge` 字段标注信号间的时序关系。

**语法结构**:
```json
{
  "signal": [
    {"name": "clk", "wave": "p......", "node": ".a.b..."},
    {"name": "data", "wave": "x.345x.", "node": "..cd...", "data": ["D1","D2","D3"]}
  ],
  "edge": [
    "a~>c setup",
    "b~>d hold"
  ]
}
```

**Edge 语法**:
- **格式**: `"起始节点连接符终止节点 标签"`
- **连接符类型**:
  - `->` 实线箭头
  - `~>` 波浪箭头
  - `-|>` T 型箭头
  - `->>` 双线箭头

**Node 标记规则**:
- 在 `wave` 字符串的对应位置标记节点字母
- 节点字母可以是 a-z、A-Z
- `.` 表示无节点标记

**常见应用场景**:
1. **时序约束**: Setup/Hold 时间标注
2. **数据流**: 显示数据在信号间的传递路径
3. **因果关系**: 标注控制信号与数据信号的依赖关系

**完整示例**:
```json
{
  "signal": [
    {"name": "CLK", "wave": "P.....", "node": ".a.b.."},
    {"name": "REQ", "wave": "01...0", "node": "..c..."},
    {"name": "ACK", "wave": "0..10.", "node": "...d.."}
  ],
  "edge": [
    "a~>c tsu",
    "b~>c th",
    "c->d delay"
  ]
}
```

## 命名规范

### 信号命名
- **清晰性**：使用标准硬件信号命名（CLK、RST、DATA、ADDR）
- **大小写**：推荐全大写或驼峰命名（CLK、clk、dataValid）
- **缩写**：使用常见硬件缩写（REQ、ACK、RD、WR）

### 时钟信号命名最佳实践
- **标准命名**：优先使用 `CLK`、`clk`、`clock` 作为主时钟信号
- **多时钟区分**：使用 `clk1`、`clk2` 或 `sysClk`、`refClk` 区分多个时钟域
- **时钟派生**：衍生时钟使用描述性命名如 `clk_div2`、`pll_clk`
- **避免模糊**：不推荐使用 `c`、`ck` 等过于简短的名称

### 数据标签
- **简洁性**：标签应简短（3-8 字符）
- **描述性**：清晰表达数据含义（addr、data、cmd）
- **一致性**：同类数据使用统一格式

## 配置系统

### Config 全局配置

WaveDrom 支持通过 `config` 对象控制全局渲染行为。

**完整配置结构**:
```json
{
  "signal": [...],
  "config": {
    "hscale": 2,           // 水平缩放因子 (0.5-3)
    "skin": "narrow",      // 主题样式
    "background": "white"  // 背景色 (SVG 颜色名或 #RRGGBB)
  }
}
```

**配置参数详解**:

1. **hscale (水平缩放)**
   - 类型: Number
   - 范围: 0.5 - 3.0
   - 默认值: 1
   - 作用: 控制时间轴的水平拉伸程度
   - 示例:
     - `hscale: 0.5` → 压缩 50%，适合超长时序
     - `hscale: 1` → 默认密度
     - `hscale: 2` → 拉伸 2 倍，便于查看细节
     - `hscale: 3` → 最大拉伸，极度稀疏

2. **skin (皮肤主题)**
   - 类型: String
   - 可选值: `"default"` | `"narrow"` | `"lowkey"`
   - 默认值: `"default"`
   - 作用: 控制信号线条粗细和视觉风格
   - 对比:
     - `default`: 标准粗细，清晰醒目
     - `narrow`: 细线条，紧凑风格，节省空间
     - `lowkey`: 低对比度，柔和配色

3. **background (背景色)**
   - 类型: String
   - 格式: SVG 颜色名 (`"white"`, `"black"`) 或十六进制 (`"#F0F0F0"`)
   - 默认值: `"white"`
   - 作用: 设置 SVG 背景颜色

**常用配置组合**:
```json
// 紧凑模式 - 适合复杂图表
{"config": {"hscale": 1, "skin": "narrow"}}

// 演示模式 - 适合大屏展示
{"config": {"hscale": 2, "skin": "default"}}

// 暗色主题
{"config": {"background": "#2B2B2B", "skin": "lowkey"}}
```

### 标题和注释
```json
{
  "head": {
    "text": "图表标题",
    "tick": 0,           // 起始刻度
    "every": 2           // 刻度间隔
  },
  "foot": {
    "text": "图表注释",
    "tock": 9            // 结束刻度
  }
}
```

### 信号分组 (Grouping)

WaveDrom 支持使用空对象或空数组对信号进行视觉分组。

**分组语法**:
```json
{
  "signal": [
    ["时钟域",
      {"name": "clk", "wave": "p....."},
      {"name": "rst", "wave": "01...."}
    ],
    {},  // 分隔符 - 创建空白行
    ["控制信号",
      {"name": "req", "wave": "0.1.0."},
      {"name": "ack", "wave": "0...10"}
    ],
    [],  // 分隔符 - 创建空白行（与 {} 等效）
    ["数据总线",
      {"name": "addr[7:0]", "wave": "x.345x", "data": ["A0","A1","A2"]},
      {"name": "data[7:0]", "wave": "x.345x", "data": ["D0","D1","D2"]}
    ]
  ]
}
```

**分组规则**:
1. **嵌套数组**: `["组名", 信号1, 信号2, ...]`
   - 第一个元素是组名字符串
   - 后续元素是信号对象
   - 渲染时会显示组名标题

2. **分隔符**:
   - `{}`: 创建空白行分隔符
   - `[]`: 创建空白行分隔符（效果同 `{}`）

3. **嵌套限制**:
   - 只支持一级嵌套（不支持组内再分组）
   - 分隔符不能放在数组的开头或结尾

**最佳实践**:
- 按功能模块分组（时钟、控制、数据）
- 组名简洁明了（3-12 字符）
- 相关信号放在同一组内
- 使用分隔符增强可读性

**完整示例**:
```json
{
  "signal": [
    ["Clock & Reset",
      {"name": "clk", "wave": "p......"},
      {"name": "rst", "wave": "01....."}
    ],
    {},
    ["SPI Interface",
      {"name": "MOSI", "wave": "x.345x.", "data": ["cmd","addr","data"]},
      {"name": "MISO", "wave": "x.....4", "data": ["resp"]},
      {"name": "CS", "wave": "10....1"}
    ]
  ]
}
```

## 常见错误

### 错误 1: JSON 格式错误（对应强制规则 1）
**❌ 错误写法**：
```json
{signal:[{name:'clk',wave:'p....'}]}  // 缺少引号
```

**✅ 正确写法**：
```json
{"signal":[{"name":"clk","wave":"p...."}]}
```

**原因**：WaveJSON 必须是严格的 JSON 格式，所有键和字符串值都需要双引号。

**详见**: 强制规则 1 - 包含完整的编译错误信息和修复方法

---

### 错误 2: Wave 长度不一致（对应强制规则 3）
**❌ 错误写法**：
```json
{"signal":[
  {"name":"clk","wave":"p...."},
  {"name":"data","wave":"x34x"}  // 长度不同
]}
```

**✅ 正确写法**：
```json
{"signal":[
  {"name":"clk","wave":"p....."},
  {"name":"data","wave":"x.34.x"}
]}
```

**原因**：同一组信号的 wave 字符串长度应保持一致，代表相同的时间跨度。

**详见**: 强制规则 3 - 包含完整的编译错误信息和修复方法

---

### 错误 3: 数据标签缺失（对应强制规则 4）
**❌ 错误写法**：
```json
{"signal":[{"name":"bus","wave":"x345x"}]}  // 使用了 3/4/5 但无 data
```

**✅ 正确写法**：
```json
{"signal":[{"name":"bus","wave":"x345x","data":["head","body","tail"]}]}
```

**原因**：使用数据符号（2-9）时，必须提供对应的 data 数组来标注数据内容。

**详见**: 强制规则 4 - 包含完整的编译错误信息和修复方法

## 最佳实践

1. **时钟信号优先**：将时钟信号放在信号列表最前面
2. **对齐相关信号**：相关联的信号应相邻放置
3. **使用分组**：用空对象 `{}` 或 `[]` 创建视觉分隔
4. **合理缩放**：复杂图表使用 hscale 调整显示密度
5. **添加标题**：为复杂图表添加 head 和 foot 说明
6. **遵守强制规则**：生成代码前务必检查所有 6 条强制规则

**重要提醒**：WaveDrom 的 JSON 格式要求是最严格的，违反强制规则会导致 100% 渲染失败！

## 性能建议

**复杂度控制**:
- **信号数量限制**:建议单个图表不超过 20 个信号,过多信号会降低可读性
- **时钟周期限制**:建议 wave 字符串长度不超过 50 个字符 (即 50 个时钟周期)
- **性能原因**:过大的图表会增加 JSON 解析时间和渲染负担,影响用户体验

**优化建议**:
- 如需展示超过 20 个信号,考虑拆分为多个分组图表
- 对于超长时序,使用 `hscale` 参数压缩显示密度
- 优先展示关键信号,次要信号可单独图表化

## 调试建议

当 WaveDrom 图表渲染失败时，按以下顺序排查：

### 第一步：JSON 格式验证
```bash
# 使用在线工具验证 JSON 格式
https://jsonlint.com/

# 常见错误：
- 缺少双引号: {name:'clk'} → {"name":"clk"}
- 尾随逗号: {"signal":[...],} → {"signal":[...]}
- 单引号: 'value' → "value"
```

### 第二步：检查强制规则
1. ✅ 所有字符串使用双引号
2. ✅ 根对象包含 `signal` 或 `reg` 数组
3. ✅ 所有 wave 字符串长度一致
4. ✅ 数据符号（2-9）配有 `data` 数组
5. ✅ Wave 符号仅使用合法字符
6. ✅ 无 JSON 注释

### 第三步：逐步简化测试
```json
// 从最小示例开始
{"signal":[{"name":"clk","wave":"p."}]}

// 逐步添加信号
{"signal":[
  {"name":"clk","wave":"p."},
  {"name":"data","wave":"x3","data":["D1"]}
]}

// 最后添加配置和分组
```

### 第四步：常见错误对照表
| 错误信息 | 原因 | 解决方法 |
|---------|------|---------|
| `SyntaxError: Unexpected token` | JSON 格式错误 | 检查引号、逗号、括号 |
| `Missing 'signal' or 'reg'` | 缺少根数组 | 添加 `signal` 或 `reg` |
| `Wave length mismatch` | wave 长度不一致 | 统一所有 wave 长度 |
| `Invalid wave character` | 非法 wave 符号 | 仅使用 p/n/0/1/x/z/=/2-9/.|/u/d |
| `Data symbols without data array` | 缺少 data 数组 | 为 2-9 符号添加 `data` |

### 第五步：Kroki 特定问题
- **超时错误**: 减少信号数量或缩短 wave 长度
- **URL 过长**: 简化 JSON 结构，删除不必要的空格
- **404 错误**: 检查 Kroki 服务是否可用
- **CORS 错误**: 确保使用正确的代理端点

**调试工具推荐**:
- JSON 验证: https://jsonlint.com/
- WaveDrom 编辑器: https://wavedrom.com/editor.html
- Kroki 在线测试: https://kroki.io/
