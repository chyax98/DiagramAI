# ============================================
# L2 语言层 - Erd 简洁 ER 图语法
# ============================================

[meta]
level = "L2"
language = "erd"
version = "1.0.0"
description = "L2: Erd 简洁 ER 图语法通用规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 语言相关元数据
language_version = "latest"
kroki_support = true
official_docs = "https://github.com/BurntSushi/erd"
rendering_engine = "Graphviz DOT"

# ============================================
# Section 1: D 角色定义
# ============================================

[D_role]
additional_roles = [
  "Erd 语法专家",
  "数据库 ER 建模师",
  "简洁语法倡导者"
]

# ============================================
# Section 2: E 约束条件
# ============================================

[E_constraints]
items = [
  """
  **文件结构严格顺序**: Erd 文件必须按以下顺序组织（违反会导致语法错误）:
  1. 全局指令（可选，必须在最前面）: `title {...}`, `entity {...}`, `header {...}`, `relationship {...}`
  2. 实体定义: `[实体名]` + 属性列表
  3. 关系定义: `实体A 基数1--基数2 实体B`
  错误: 全局指令在实体之后 → 语法错误
  """,

  """
  **实体命名规范**:
  - 基本命名: ASCII 字母、数字、下划线（如 `[Person]`, `[User_Account]`）
  - 空格/特殊字符: 必须用引号（`` [`Birth Place`] ``, `['User Account']`, `["Product Info"]`）
  - 推荐大写开头、单数形式（如 `Person` 而非 `Persons`）
  - 避免缩写，使用清晰的业务术语
  """,

  """
  **属性命名规范**:
  - 使用小写字母和下划线（如 `user_id`, `created_at`, `full_name`）
  - 主键统一后缀: `id` 或 `<entity>_id`（如 `user_id`）
  - 外键统一格式: `<referenced_entity>_id`（如 `order_id`）
  - 布尔值前缀: `is_active`, `has_children`, `can_login`
  - 时间戳后缀: `created_at`, `updated_at`, `deleted_at`
  """,

  """
  **属性标记规则**:
  - 主键（Primary Key）: `*` 前缀，如 `*person_id`
  - 外键（Foreign Key）: `+` 前缀，如 `+birth_place_id`
  - 复合键: `*+` 或 `+*`（同时是主键和外键），如 `*+order_id`
  - 每个实体必须至少有一个主键（`*` 标记）
  """,

  """
  **关系定义规则**:
  - 语法: `实体A 基数1--基数2 实体B`
  - 基数符号:
    - `?` = 0 或 1（可选的单一关系）
    - `1` = 恰好 1（必须的单一关系）
    - `*` = 0 或多个（可选的多重关系）
    - `+` = 1 或多个（必须的多重关系）
  - 必须明确标注双方基数，不能省略
  - 示例: `Person *--1 Address`, `Student *--* Course`
  """,

  """
  **关系标签规范**:
  - 使用 `{label: "描述"}` 为关系添加标签
  - 标签应使用动词短语描述关系（如 "拥有"、"属于"、"管理"、"创建"）
  - 自引用关系必须添加标签（如 `Employee ?--1 Employee {label: "manages"}`）
  - 多个关系连接同两个实体时，必须添加区分标签（如 `game *--1 team {label: "home"}`, `game *--1 team {label: "away"}`）
  """,

  """
  **格式化选项规范**:
  - 全局指令格式: `指令名 {属性1: "值1", 属性2: "值2"}`
  - 实体级别样式: `[实体名] {bgcolor: "#ececfc", size: "20", border: "2"}`
  - 属性级别样式: `*person_id {label: "varchar(50), not null", color: "#ff0000"}`
  - 关系标签: `实体A *--1 实体B {label: "关系描述"}`
  - 左花括号 `{` 必须在同一行，属性名后跟冒号 `:`，值使用双引号（包括数字: `"20"`）
  """,

  """
  **注释规则**:
  - 只支持单行注释，使用 `#` 符号
  - 可以在行尾添加注释: `[Person]  # 用户实体`
  - 不支持块注释（多行注释）
  """,

  """
  **禁止的特性**:
  - ❌ 块注释（只支持 `#` 单行注释）
  - ❌ 嵌套实体
  - ❌ 条件逻辑（if/else）
  - ❌ 变量定义
  - ❌ 循环语句
  - ❌ ASCII 控制字符（0x00-0x1F, 0x7F）
  """,

  """
  **Kroki 兼容性**: 生成的 Erd 代码必须能被 Kroki 的 Graphviz 引擎成功渲染为 SVG。避免使用过于复杂的格式化选项，推荐使用默认样式或简单的颜色定制。
  """
]

# ============================================
# Section 3: P 流程规范
# ============================================

[P_process]
items = [
  """
  **1. 数据需求分析**:
  - 识别核心业务实体（如用户、订单、商品）
  - 识别实体的关键属性（如用户的 user_id、username、email）
  - 识别主键（唯一标识符）和外键（引用其他实体）
  - 识别实体间的关系类型（一对一、一对多、多对多）
  - 识别关系的基数（必须、可选）
  """,

  """
  **2. 全局指令设计（可选）**:
  - 如果需要自定义样式，在文件最前面添加全局指令
  - 示例: `title {label: "用户系统 ER 图", size: "20"}`
  - 示例: `entity {bgcolor: "#ececfc", size: "16"}`
  - 示例: `header {bgcolor: "#d0e0d0", color: "#000000"}`
  - 注意: 全局指令必须在实体定义之前，否则语法错误
  """,

  """
  **3. 实体定义**:
  - 按业务重要性顺序定义实体（核心实体 → 关联实体）
  - 实体名使用方括号包裹: `[实体名]`
  - 属性列表在实体名下方，每行一个属性
  - 使用 `*` 标记主键，`+` 标记外键
  - 示例:
    ```
    [用户]
    *user_id
    username
    email
    created_at
    ```
  """,

  """
  **4. 关系定义**:
  - 在所有实体定义之后，定义实体间的关系
  - 语法: `实体A 基数1--基数2 实体B`
  - 明确标注双方基数（`?`, `1`, `*`, `+`）
  - 为关系添加标签说明: `{label: "描述"}`
  - 自引用关系必须添加标签
  - 示例:
    ```
    用户 1--* 订单
    订单 *--1 商品 {label: "包含"}
    员工 ?--1 员工 {label: "管理"}
    ```
  """,

  """
  **5. 质量检查**:
  - 验证文件结构顺序（全局指令 → 实体 → 关系）
  - 验证每个实体都有主键（`*` 标记）
  - 验证所有关系都有明确的基数标注
  - 验证外键引用的实体存在
  - 验证命名规范（实体大写、属性小写下划线）
  - 验证能被 Kroki 成功渲染
  """
]

# ============================================
# Section 4: H 质量标准
# ============================================

[H_quality]
items = [
  """
  **Erd 语法正确性**:
  - 文件结构顺序正确（全局指令 → 实体 → 关系）
  - 每个实体都有主键（`*` 标记）
  - 所有关系都有明确的基数标注
  - 格式化选项语法正确（左花括号在同一行，属性名后跟冒号）
  - 注释使用 `#` 单行注释
  """,

  """
  **命名规范符合性**:
  - 实体名大写开头、单数形式（如 `Person` 而非 `Persons`）
  - 属性名小写下划线（如 `user_id` 而非 `userId`）
  - 主键后缀 `id`（如 `user_id`, `order_id`）
  - 外键格式 `<referenced_entity>_id`（如 `user_id`, `product_id`）
  - 关系标签使用动词短语（如 "拥有"、"属于"、"管理"）
  """,

  """
  **数据模型完整性**:
  - 所有实体都有主键
  - 外键引用的实体存在
  - 多对多关系通过中间实体实现（便于扩展属性）
  - 关系类型准确（一对一、一对多、多对多）
  - 基数标注准确（必须、可选）
  """,

  """
  **业务语义清晰性**:
  - 实体名称使用业务术语，易于理解
  - 属性名称清晰表达含义（避免无意义的缩写）
  - 关系标签清晰描述业务逻辑（如 "用户拥有订单"）
  - 使用中文命名，便于非技术人员理解
  """,

  """
  **Kroki 渲染质量**:
  - 生成的 Erd 代码能被 Kroki 成功渲染为 SVG 图像
  - 无渲染错误或警告
  - 图形布局清晰，实体分布合理
  - 关系线不交叉或交叉最少
  - 文本标签清晰易读
  """
]
