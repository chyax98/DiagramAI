# ============================================
# L3 类型层模板 v1.0.0
# PacketDiag Protocol (协议栈图) 规范
# ============================================

[meta]
level = "L3"
language = "packetdiag"
diagram_type = "protocol"
version = "1.0.0"
description = "PacketDiag 协议栈图规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 可选: 类型相关的元数据
complexity = "high"
target_length = 3200
use_cases = ["OSI 七层模型", "TCP/IP 协议栈", "HTTP 请求协议栈", "加密协议栈"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "协议栈架构专家",
  "网络分层模型专家"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **分层颜色规范**: 不同协议层必须使用标准颜色区分：
  - 应用层：红色系 `#FFE0E0`
  - 传输层：绿色系 `#E0FFE0`
  - 网络层：蓝色系 `#E0E0FF`
  - 链路层：黄色系 `#FFFFE0`
  - 物理层：灰色系 `#D0D0D0`
  """,

  """
  **位范围分层分配**: 按层从上到下递增，每层分配 128-512 位（16-64 字节）。应用层从位 0 开始，传输层紧接其后，依此类推。
  """,

  """
  **字段精简原则**: 每层仅展示 3-5 个最关键的字段。协议栈图重在展示分层关系，不是详细字段布局。
  """,

  """
  **层次标识清晰**: 每层的字段标签应包含层次信息，如 "Layer 7: Application (HTTP)" 或 "TCP - 传输层"。
  """,

  """
  **colwidth 适配多层**: 使用较大的 colwidth（如 64 或 128）以适应多层协议栈的宽度需求。
  """,

  """
  **字段位范围无重叠**: 虽然是分层展示，但字段位范围仍然不能重叠。每层占用独立的位范围段。
  """,

  """
  **实际协议示例**: 使用真实协议名称和字段（如 HTTP GET、TCP Port 80、IP 地址），避免抽象描述。
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别协议栈层次**:
  - 确定需要展示的协议层数（如 4 层 TCP/IP 或 7 层 OSI）
  - 识别每层的代表协议（如应用层 HTTP、传输层 TCP、网络层 IP）
  - 确定每层展示的关键字段（3-5 个）
  - 规划每层的位范围分配
  """,

  """
  **2. 分配位范围**:
  - 确定 colwidth（推荐 64 或 128）
  - 从位 0 开始为应用层分配位范围（如 0-511 为 64 字节）
  - 依次为传输层、网络层、链路层分配位范围
  - 确保各层位范围连续无重叠
  """,

  """
  **3. 设计字段内容**:
  - 应用层：展示应用协议请求或响应（如 "HTTP Request: GET /index.html"）
  - 传输层：展示端口号、序列号等关键字段
  - 网络层：展示源 IP、目的 IP、TTL 等字段
  - 链路层：展示源 MAC、目的 MAC、EtherType 等字段
  - 使用真实协议数据示例，提高实用性
  """,

  """
  **4. 实现 PacketDiag 代码**:
  - 使用 `packetdiag {}` 包裹
  - 定义 `colwidth = 64` 和 `node_height = 100`
  - 按层从上到下定义字段，使用颜色区分
  - 每层添加层次标识和协议名称
  - 关键字段添加具体数值（如端口号、IP 地址）
  """,

  """
  **5. 验证和优化**:
  - 验证各层颜色区分清晰
  - 检查字段位范围分配合理
  - 确认每层字段数量适中（3-5 个）
  - 验证协议名称和字段准确
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **分层清晰性**:
  - 不同协议层使用标准颜色区分
  - 每层有明确的层次标识（如 Layer 7、传输层）
  - 层次顺序符合协议栈标准（自上而下或自下而上）
  - 每层字段数量适中，不过度复杂
  """,

  """
  **协议准确性**:
  - 协议名称和字段符合标准（如 TCP、IP、HTTP）
  - 端口号、IP 地址等数据真实合理
  - 字段顺序符合协议封装规则
  - 层次关系符合 OSI 或 TCP/IP 模型
  """,

  """
  **实用性和教育性**:
  - 使用真实协议示例（如 HTTP GET 请求）
  - 字段数据具体化（如 Src Port: 52341, Dst Port: 80）
  - 适合用于协议栈教学和网络分析
  - 清晰展示数据跨层封装过程
  """
]

# ============================================
# Section 5: 使用场景 (Use Cases)
# ============================================

[[use_cases]]
title = "HTTP 请求协议栈（4 层）"
scenario = """
展示一个完整的 HTTP GET 请求跨越应用层、传输层、网络层、链路层的封装过程。
使用颜色清晰区分四个协议层，每层展示 3-5 个关键字段。
"""
key_points = [
  "应用层：HTTP Request (红色 #FFE0E0)",
  "传输层：TCP 源端口 52341、目的端口 80 (绿色 #E0FFE0)",
  "网络层：源 IP 192.168.1.10、目的 IP 93.184.216.34 (蓝色 #E0E0FF)",
  "链路层：源 MAC、目的 MAC、EtherType (黄色 #FFFFE0)",
  "每层位范围独立且连续"
]

[[use_cases]]
title = "OSI 七层模型（完整协议栈）"
scenario = """
展示标准 OSI 七层模型，从应用层到物理层的完整分层结构。
每层使用不同颜色深度的红色系，从浅到深表示从应用层到物理层。
"""
key_points = [
  "Layer 7: Application (HTTP) - #FFE0E0",
  "Layer 6: Presentation (TLS 1.3) - #FFC0C0",
  "Layer 5: Session (TCP Session) - #FFA0A0",
  "Layer 4: Transport (TCP) - #E0FFE0",
  "Layer 3: Network (IP) - #E0E0FF",
  "Layer 2: Data Link (Ethernet) - #FFFFE0",
  "Layer 1: Physical (RJ45 Cable) - #D0D0D0"
]

[[use_cases]]
title = "HTTPS 加密协议栈"
scenario = """
展示 HTTPS 加密连接的协议栈，包含 TLS 握手过程。
突出 TLS 层的作用，展示端口 443 和加密特性。
"""
key_points = [
  "应用层：TLS ClientHello (红色)",
  "传输层：TCP Src Port 52342, Dst Port 443 (绿色)",
  "网络层：源 IP 和目的 IP (蓝色)",
  "链路层：源 MAC 和目的 MAC (黄色)",
  "强调端口 443（HTTPS 标准端口）"
]
