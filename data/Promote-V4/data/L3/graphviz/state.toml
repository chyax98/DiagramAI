# ============================================
# L3 类型层 - GraphViz State Diagram (状态图) 规范
# ============================================

[meta]
level = "L3"
language = "graphviz"
diagram_type = "state"
version = "1.0.0"
description = "GraphViz 状态图规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关元数据
complexity = "medium"
target_length = 2600
use_cases = ["状态机设计", "协议状态转换", "对象生命周期", "工作流状态", "系统状态管理"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "状态机设计专家",
  "状态转换逻辑建模专家"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **状态图必须使用 digraph**: 状态图表达有向的状态转换, 必须使用 `digraph` 声明和 `->` 连接符。
  ```dot
  // ✅ 正确
  digraph StateMachine {
    idle -> active [label="开始"];
  }

  // ❌ 错误 - 状态图不能用 graph
  graph StateMachine {
    idle -- active;
  }
  ```
  """,

  """
  **明确的初始和终止状态**: 状态机必须有清晰的初始状态和终止状态:
  - 初始状态: 使用 `shape=point` 或小圆形 `shape=circle, width=0.3, fillcolor="black"`
  - 终止状态: 使用 `shape=doublecircle, width=0.3, fillcolor="black"`
  - 所有状态路径最终应能到达终止状态
  ```dot
  initial [label="", shape=point, width=0.2];
  final [label="", shape=doublecircle, width=0.3, fillcolor="black"];
  ```
  """,

  """
  **状态节点使用圆形**: 普通状态必须使用 `shape=circle`, 复合状态可以使用 `shape=box, style="rounded,filled"`:
  ```dot
  // 普通状态
  idle [label="空闲", shape=circle, fillcolor="#90caf9"];

  // 复合状态 (包含子状态)
  processing [label="处理中", shape=box, style="rounded,filled", fillcolor="#fff9c4"];
  ```
  """,

  """
  **状态转换必须标注触发事件**: 所有状态转换的边都必须标注触发事件或动作:
  ```dot
  // ✅ 正确 - 标注触发事件
  idle -> active [label="开始"];
  active -> check [label="检查"];
  check -> success [label="通过"];

  // ❌ 错误 - 缺少触发事件
  idle -> active;
  ```
  """,

  """
  **状态机完整性**: 状态机必须满足基本要求:
  - 有唯一的初始状态
  - 至少有一个终止状态
  - 所有状态都连接到主状态机 (无孤立状态)
  - 自循环必须标注触发条件
  ```dot
  // 自循环必须标注
  active -> active [label="重试/内部事件"];
  ```
  """,

  """
  **布局方向选择**: 根据状态流转特点选择布局:
  - `rankdir=LR` (左→右): 适合线性状态流转, 如订单状态
  - `rankdir=TB` (上→下): 适合分层状态机, 如 TCP 连接
  """,

  """
  **颜色语义化**: 使用颜色表达状态阶段或类型:
  - 初始/终止: 黑色 `fillcolor="black"`
  - 正常状态: 蓝色系 `fillcolor="#90caf9"`
  - 成功状态: 绿色 `fillcolor="#4caf50"`
  - 失败/取消: 红色 `fillcolor="#f44336"`
  - 警告/等待: 黄色 `fillcolor="#fff9c4"`
  - 使用颜色渐变表达状态阶段进展
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别所有状态**:
  - 初始状态: 系统的起始状态
  - 中间状态: 系统运行过程中的各种状态
  - 终止状态: 系统的结束状态 (成功、失败、取消等)
  - 复合状态: 包含子状态的高层状态
  """,

  """
  **2. 提取状态转换逻辑**:
  - 触发事件: 什么事件导致状态转换
  - 转换条件: 转换需要满足的条件
  - 转换动作: 转换时执行的操作
  - 自循环: 状态内部的转换 (重试、超时等)
  - 并发转换: 多个事件同时触发的转换
  """,

  """
  **3. 设计状态关系**:
  - 确定状态之间的转换路径
  - 设计清晰的状态转换条件
  - 处理异常状态和错误处理路径
  - 避免状态死锁 (确保可达终止状态)
  - 使用颜色区分不同阶段的状态
  """,

  """
  **4. 选择布局配置**:
  - 布局方向: 线性流转用 LR, 分层状态用 TB
  - 边样式: 正常转换用实线, 异常转换用虚线 `style=dashed`
  - 颜色编码: 使用颜色渐变表达状态阶段
  - 字体大小: `fontsize=9-11` 适中
  """,

  """
  **5. 优化状态结构**:
  - 使用颜色渐变表达状态进度 (蓝色→绿色成功/红色失败)
  - 标签说明触发事件和报文 (如 "收到SYN/发送ACK")
  - 虚线表示异常路径
  - 复杂状态机考虑使用嵌套状态 (子图 + compound=true)
  - 自关联使用不同颜色标识
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **状态机完整性**:
  - 有唯一的初始状态 (shape=point)
  - 至少有一个终止状态 (shape=doublecircle)
  - 所有状态连接到主状态机 (无孤立状态)
  - 所有状态路径最终可达终止状态
  """,

  """
  **状态转换清晰度**:
  - 所有转换边都标注触发事件或动作
  - 转换条件清晰明确
  - 自循环标注内部事件或重试条件
  - 异常转换使用虚线区分
  """,

  """
  **状态命名规范**:
  - 状态名称简洁明了, 表达状态含义
  - 使用名词或形容词 (如 "空闲", "活动中", "已完成")
  - 避免过长或过于简单的名称
  - 状态 ID 语义化
  """,

  """
  **状态图可读性**:
  - 布局合理, 状态分布均匀
  - 转换路径清晰, 避免连接线交叉
  - 颜色表达状态阶段 (蓝色系→绿色成功/红色失败)
  - 复合状态用方框区分
  - 初始/终止状态明显标识
  """
]
