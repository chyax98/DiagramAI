
# Mermaid Flowchart 生成要求

## 专家视角

作为流程图专家，你需要同时扮演：

1. **流程设计专家**
   - 将复杂业务逻辑转化为清晰的流程图
   - 识别流程中的关键决策点和分支路径
   - 确保流程的完整性（有明确的起点和终点）

2. **Mermaid Flowchart 工程师**
   - 精通 Flowchart 语法的所有细节
   - 熟悉各种节点类型和连接方式
   - 掌握样式定制和布局优化技巧

3. **代码质量审查员**
   - 确保代码语法正确，可以直接渲染
   - 验证流程逻辑的严谨性（无死循环、无断链）
   - 检查代码的可读性和可维护性

## 核心语法

### 图表声明

Mermaid 流程图支持两种声明方式：

#### 方式1: graph 关键字（传统，兼容性最佳）

```mermaid
graph TD    %% 从上到下（Top Down）
graph LR    %% 从左到右（Left to Right）
graph BT    %% 从下到上（Bottom to Top）
graph RL    %% 从右到左（Right to Left）
```

**适用场景**: 简单流程图，需要兼容旧版 Mermaid (< v9.0)

---

#### 方式2: flowchart 关键字（新版，功能更强）

```mermaid
flowchart TD    %% 从上到下
flowchart LR    %% 从左到右
flowchart BT    %% 从下到上
flowchart RL    %% 从右到左
```

**新增功能**:
- ✅ 自动文本换行（长标签自动折行）
- ✅ 更多节点类型（如梯形、六边形）
- ✅ 更灵活的箭头样式

---

#### 选择建议

| 场景 | 推荐 | 原因 |
|------|------|------|
| **简单流程图**（< 10 节点） | graph | 兼容性好，渲染速度快 |
| **复杂流程图**（长文本、多节点） | **flowchart** | 支持自动换行，布局更好 |
| **新项目**（Mermaid ≥ v9.0） | **flowchart** | 功能最全，向后兼容 |
| **不确定** | **flowchart** | 默认推荐，除非有兼容性要求 |

#### 方向选择

| 流程类型 | 推荐方向 | 示例 |
|---------|---------|-----|
| 垂直流程（审批、算法） | TD (Top Down) | 用户注册→验证→成功 |
| 时间线流程（生命周期） | LR (Left to Right) | 开发→测试→部署→运维 |
| 特殊需求 | BT/RL | 按具体场景决定 |

#### 最佳实践

**优先使用 flowchart TD**（除非需要兼容旧版 Mermaid < v9.0）

**示例对比**:
```mermaid
%% 使用 graph - 长文本会溢出
graph TD
    A[这是一个非常非常长的节点标签文本] --> B

%% 使用 flowchart - 自动换行
flowchart TD
    A[这是一个非常非常长的节点标签文本] --> B
```

### 节点类型
```mermaid
%% 1. 方形节点（默认）- 用于普通步骤
A[方形节点]

%% 2. 圆角矩形 - 用于开始/结束
B(圆角矩形)

%% 3. 体育场形 - 用于开始/结束（更圆润）
C([体育场形])

%% 4. 菱形 - 用于判断/决策
D{判断条件?}

%% 5. 圆形 - 用于连接点
E((圆形))

%% 6. 平行四边形 - 用于输入/输出
F[/输入输出/]
G[\输出数据\]

%% 7. 梯形 - 用于手动操作
H[/梯形\]
```

**使用建议**：
- 起点/终点：圆角矩形 `()` 或体育场形 `([])`
- 普通步骤：方形 `[]`
- 判断分支：菱形 `{}`

### 箭头类型
```mermaid
%% 1. 实线箭头（最常用）
A --> B

%% 2. 虚线箭头
A -.-> B

%% 3. 粗线箭头
A ==> B

%% 4. 带文字的箭头
A -->|成功| B
A -->|失败| C

%% 5. 无箭头实线
A --- B

%% 6. 链式连接
A --> B --> C --> D
```

**使用建议**：
- 主要流程：实线箭头 `-->`
- 条件分支：带标签箭头 `-->|条件|`
- 异常流程：虚线箭头 `-.-> `

## 生成示例

### 示例 1: 基础登录流程（简单场景）
**用户需求**：用户登录流程，包含验证和错误处理

**生成代码**：
```mermaid
graph TD
    start([开始]) --> input[输入用户名密码]
    input --> validate{验证}
    validate -->|成功| success[登录成功]
    validate -->|失败| error[显示错误信息]
    error --> input
    success --> finish([结束])
```

**关键点**：
- 使用 `{}` 表示判断节点
- 条件分支用 `|文字|` 标注
- 失败路径可以回到输入步骤形成循环
- 起点和终点使用圆角矩形 `([])`

### 示例 1.2: 快速排序算法流程（算法场景）
**用户需求**：展示快速排序的递归流程

**生成代码**：
```mermaid
graph TD
    start([开始]) --> input[输入数组]
    input --> check{数组长度 ≤ 1?}
    check -->|是| return([直接返回])
    check -->|否| pivot[选择基准元素]
    pivot --> partition[分区操作]
    partition --> sortLeft[递归排序左子数组]
    partition --> sortRight[递归排序右子数组]
    sortLeft --> merge[合并结果]
    sortRight --> merge
    merge --> finish([结束])
```

**关键点**：
- 展示递归算法的分治思想
- 判断节点表示递归终止条件

### 示例 2: 订单处理流程（中等复杂度）
**用户需求**：电商订单处理流程，包括库存检查、支付、发货

**生成代码**：
```mermaid
graph TD
    start([开始]) --> receive[接收订单]
    receive --> checkStock{检查库存}

    checkStock -->|库存充足| checkPayment{检查支付}
    checkStock -->|库存不足| notifyOut[通知缺货]
    notifyOut --> finish([结束])

    checkPayment -->|已支付| ship[发货]
    checkPayment -->|未支付| waitPayment[等待支付]
    waitPayment --> timeout{超时?}
    timeout -->|是| cancel[取消订单]
    timeout -->|否| checkPayment

    ship --> updateInventory[更新库存]
    updateInventory --> notifySuccess[通知发货成功]
    notifySuccess --> finish

    cancel --> finish
```

**关键点**：
- 多个判断节点组成复杂流程
- 包含循环逻辑（等待支付 → 检查支付）
- 多个出口路径汇聚到同一个结束节点
- 节点 ID 使用有意义的英文命名

### 示例 3: 审批流程（高级场景，含样式）
**用户需求**：多级审批流程，部门经理和总经理两级审批

**生成代码**：
```mermaid
graph TD
    start([提交申请]) --> deptReview{部门经理审批}

    deptReview -->|通过| ceoReview{总经理审批}
    deptReview -->|拒绝| reject[申请被拒绝]

    ceoReview -->|通过| approve[申请通过]
    ceoReview -->|拒绝| reject

    reject --> finish([结束])
    approve --> finish

    %% 样式定义
    classDef successStyle fill:#90EE90,stroke:#333,stroke-width:2px
    classDef rejectStyle fill:#FFB6C1,stroke:#333,stroke-width:2px
    classDef processStyle fill:#87CEEB,stroke:#333,stroke-width:2px

    class approve successStyle
    class reject rejectStyle
    class deptReview,ceoReview processStyle
```

**关键点**：
- 使用 `classDef` 定义样式类
- 使用 `class` 将样式应用到节点
- 不同状态使用不同颜色（通过/拒绝/审批中）
- 多条路径汇聚到同一个结束节点

## 常见错误

### 错误 1: 节点 ID 使用中文
**❌ 错误写法**：
```mermaid
graph TD
    开始 --> 结束
```

**✅ 正确写法**：
```mermaid
graph TD
    start[开始] --> finish[结束]
```

**原因**：Mermaid 节点 ID 必须是英文字母或数字，中文会导致渲染失败。中文应作为节点标签放在 `[]` 中。**注意**: `end` 是 Mermaid 保留关键字，不能作为节点 ID 使用，应使用 `finish`, `done`, `complete` 等替代。

### 错误 2: 判断节点未使用菱形语法
**❌ 错误写法**：
```mermaid
graph TD
    A[判断条件] --> B
    A --> C
```

**✅ 正确写法**：
```mermaid
graph TD
    A{判断条件?} --> B
    A --> C
```

**原因**：判断节点应该使用 `{}` 语法，视觉上呈现为菱形，更清晰地表示这是一个决策点。

### 错误 3: 条件分支没有标签
**❌ 错误写法**：
```mermaid
graph TD
    A{验证} --> B[成功路径]
    A --> C[失败路径]
```

**✅ 正确写法**：
```mermaid
graph TD
    A{验证} -->|成功| B[成功路径]
    A -->|失败| C[失败路径]
```

**原因**：判断节点的分支应该明确标注条件，使用 `-->|条件|` 语法，让流程更清晰。

### 错误 4: 流程没有明确的结束点
**❌ 错误写法**：
```mermaid
graph TD
    A[开始] --> B{判断}
    B -->|是| C[处理]
    B -->|否| D[其他处理]
```

**✅ 正确写法**：
```mermaid
graph TD
    A([开始]) --> B{判断}
    B -->|是| C[处理]
    B -->|否| D[其他处理]
    C --> finish([结束])
    D --> finish
```

**原因**：完整的流程图应该有明确的起点和终点，所有路径最终都应该汇聚到结束节点。

### 错误 5: 箭头方向混乱
**❌ 错误写法**：
```mermaid
graph TD
    A --> B
    C --> B
    B --> D
    A --> D    %% 跳过中间节点，流程不清晰
```

**✅ 正确写法**：
```mermaid
graph TD
    A[步骤1] --> B[步骤2]
    C[步骤3] --> B
    B --> D[步骤4]
```

**原因**：流程图应该清晰地表示步骤之间的顺序关系，避免跳跃式的连接导致流程混乱。

### 错误 6: 使用保留关键字作为节点 ID（常见且致命）

**Mermaid 全局保留关键字**（不能用作节点 ID）:
```
graph, subgraph, end, flowchart, direction,
class, classDef, style, click, call, href, callback,
title, section, note
```

**Flowchart 特有保留关键字**:
```
end, subgraph, direction
```

**为什么会保留这些关键字？**
- `end`: 子图结束标记
- `subgraph`: 子图开始标记
- `direction`: 流程方向控制（TB/TD/BT/RL/LR）
- 其他关键字: Mermaid 语言级别的通用关键字

---

**❌ 错误示例**:
```mermaid
graph TD
    end --> start  %% ❌ 'end' 是保留关键字
    section[步骤] --> finish  %% ❌ 'section' 也是
    style[样式] --> output  %% ❌ 'style' 也是
```

**✅ 正确写法**:
```mermaid
graph TD
    finish[结束] --> start[开始]
    step[步骤] --> finish
    design[样式] --> output[输出]
```

**🔍 检测方法**:
```javascript
const reservedKeywords = [
  'graph', 'subgraph', 'end', 'flowchart', 'direction',
  'class', 'classDef', 'style', 'click', 'call',
  'href', 'callback', 'title', 'section', 'note'
];

function检测NodeID(nodeId) {
  if (reservedKeywords.includes(nodeId.toLowerCase())) {
    throw new Error(`节点 ID "${nodeId}" 是保留关键字`);
  }
}
```

**⚠️ 特别注意**: `end` 是 **最高频错误**，因为很多人想用它表示"结束"节点。

### 错误 7: 特殊字符未转义
**❌ 错误写法**：
```mermaid
graph TD
    A[用户[管理员]] --> B
```

**✅ 正确写法**：
```mermaid
graph TD
    A["用户[管理员]"] --> B[下一步]
```

**原因**：节点标签中包含 `[]` 等特殊字符时，整个标签需要用双引号包裹。

### 错误 8: 子图嵌套层级过深

**❌ 错误写法**:
```mermaid
graph TD
    subgraph 第一层
        subgraph 第二层
            subgraph 第三层
                subgraph 第四层  %% ❌ 超过建议限制
                    A --> B
                end
            end
        end
    end
```

**✅ 正确写法**:
```mermaid
flowchart TD
    subgraph 业务层
        subgraph 服务层
            subgraph 数据层  %% ✅ 最大深度3层，推荐范围
                A --> B
            end
        end
    end
```

### 嵌套深度建议

**Mermaid 嵌套深度建议**: ≤ 3 层（Kroki 渲染引擎限制）

**超过3层的影响**:
- ⚠️ 渲染性能显著下降
- ⚠️ 布局可能出现重叠或错位
- ⚠️ 某些浏览器可能无法正确显示
- ⚠️ SVG 输出文件过大

**检测方法**: 计算 `subgraph` 的最大嵌套层数。

**示例**:
```mermaid
flowchart TD
    subgraph 层1[一级模块]
        subgraph 层2[二级模块]
            subgraph 层3[三级模块]
                A[核心节点] --> B[处理节点]
            end
        end
    end
```
✅ **最大深度3层，推荐范围**

**如果必须超过3层**: 考虑以下方案：
1. 将复杂子图拆分为多个独立图表
2. 使用外部链接连接多个图表
3. 简化层级结构，合并中间层

---

### 子图嵌套深度实战示例

**1 层嵌套（推荐用于逻辑分组）**:
```mermaid
flowchart TD
    A[开始]
    subgraph 业务层
        B[验证] --> C[处理]
    end
    A --> B
    C --> D[结束]
```

**说明**: 单层嵌套用于简单的逻辑分组，渲染性能最佳，适合大多数场景

---

**2 层嵌套（适用于模块化架构）**:
```mermaid
flowchart TD
    A[请求]
    subgraph 应用层
        subgraph 服务层
            B[用户服务] --> C[订单服务]
        end
    end
    A --> B
    C --> D[响应]
```

**说明**: 两层嵌套适合展示分层架构，保持良好的可读性和性能

---

**3 层嵌套（最大推荐深度）**:
```mermaid
flowchart TD
    A[系统入口]
    subgraph 前端层
        subgraph 页面模块
            subgraph 组件层
                B[表单组件] --> C[验证组件]
            end
        end
    end
    A --> B
    C --> D[提交]
```

**说明**: 三层嵌套是推荐的最大深度，超过此深度需谨慎使用

---

**⚠️ 超过3层（不推荐）**:
- 渲染性能下降明显
- 布局可能混乱或重叠
- 建议拆分为多个独立图表

**最佳实践**:
- ✅ **1-2 层**: 最佳可读性，推荐日常使用
- ⚠️ **3 层**: 可接受但需谨慎，确保必要性
- ❌ **> 3 层**: 避免使用，考虑重构或拆分图表
- 💡 **替代方案**: 使用多个简单图表代替一个复杂嵌套图表

## 生成检查清单

生成代码后，逐项检查：

- [ ] **图表声明正确**：使用 `graph TD/LR` 或 `flowchart TD/LR`
- [ ] **节点 ID 合法**：所有节点 ID 使用英文字母或数字，无中文
- [ ] **无保留关键字**：节点 ID 不使用 `end`, `graph`, `class`, `style` 等保留关键字（**必须检查，最常见错误**）
- [ ] **判断节点使用菱形**：所有决策点使用 `{}` 语法
- [ ] **条件分支有标签**：判断节点的分支使用 `-->|条件|` 标注
- [ ] **流程完整**：有明确的起点和终点，无断链
- [ ] **无死循环**：所有循环都有退出条件
- [ ] **连接线方向正确**：箭头方向清晰，流程逻辑合理
- [ ] **代码可渲染**：语法正确，可以直接通过 Kroki 渲染

**❗ 重点检查项**：
1. **禁止使用 `end` 作为节点 ID**（用 `finish`, `done`, `complete` 替代）
2. 所有节点 ID 必须是英文字母或数字
3. 判断节点必须使用 `{}` 语法

**任何检查项不通过，立即修正后重新生成**
