# ============================================
# L3 类型层 - ActDiag 活动图规范
# ============================================

[meta]
level = "L3"
language = "actdiag"
diagram_type = "activity"
version = "1.0.0"
description = "L3: ActDiag - 活动图生成规范 (强调并行活动和时间线)"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关的元数据
complexity = "medium"
target_length = 2600
use_cases = ["并行任务流程", "项目执行流程", "数据处理管道", "CI/CD 流程", "多阶段处理"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "并行活动建模专家 - 精通使用分支和汇聚表达并行任务的执行逻辑",
  "时间线设计师 - 擅长设计清晰的活动时间顺序和执行路径",
  "流程优化专家 - 精通识别和表达流程中的并行优化机会"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **活动图语法基础**:
  - 必须使用 `actdiag {}` 包裹所有内容
  - 活动定义: `A [label = "活动名称"];`
  - 顺序关系: `A -> B -> C;` (链式连接)
  - 并行分支: `A -> B, C, D;` (A 完成后 B、C、D 并行执行)
  - 活动汇聚: `B -> E; C -> E; D -> E;` (B、C、D 都完成后才执行 E)
  """,

  """
  **并行活动规范**:
  - 使用分支语法表达并行: `开始 -> 任务A, 任务B, 任务C;`
  - 并行任务必须最终汇聚到某个节点,不得出现悬空分支
  - Fork-Join 模式:
    * Fork: `A -> B, C, D;` (一个活动分叉到多个并行活动)
    * Join: `B -> E; C -> E; D -> E;` (多个并行活动汇聚到一个活动)
  - 注意: ActDiag 的并行是拓扑关系,不是时间并行,需通过注释说明
  """,

  """
  **活动命名规则 (强制)**:
  - 活动名称不得使用连字符 `-`
  - 活动名称仅支持 ASCII 字符,不得使用中文
  - 推荐命名: 下划线分隔 (`build_project`) 或驼峰 (`buildProject`)
  - 中文显示通过 label: `build_project [label = "构建项目"]`
  """,

  """
  **活动属性规范**:
  - **shape**: 活动形状
    * box (默认): 标准矩形
    * roundedbox: 圆角矩形 (推荐,视觉友好)
    * dots: 虚线矩形 (可选步骤)
    * note: 便签形状 (注释活动)
  - **color**: 边框颜色
  - **background**: 填充颜色
  - **numbered**: 自动编号 (显示执行顺序)
  """,

  """
  **流程完整性规范**:
  - 必须有明确的开始活动
  - 必须有明确的结束活动
  - 所有并行分支都必须汇聚,不得出现悬空路径
  - 建议使用命名清晰的开始和结束活动: `Start [label = "开始"]`, `End [label = "结束"]`
  """,

  """
  **布局优化规范**:
  - 默认 landscape 布局 (从左到右) 适合时间线流程
  - 使用 `orientation = portrait` 适合层次分明的流程
  - 调整 `span_width` / `span_height` 控制活动间距
  - 使用 `default_shape = roundedbox` 统一活动形状
  """,

  """
  **分组 (group) 使用规范**:
  - 使用 group 划分流程阶段: `group { label = "测试阶段"; ... }`
  - 分组可提高复杂流程的可读性
  - 不建议在活动图中过度使用分组,优先通过活动命名表达阶段
  """,

  """
  **样式一致性规范**:
  - 为不同类型活动设置一致的样式:
    * 关键活动: `[color = red, background = "#FFEEEE"]`
    * 可选活动: `[shape = dots, color = gray]`
    * 注释活动: `[shape = note]`
  - 使用 numbered 属性标注执行顺序
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别活动和并行机会**:
  - 分析流程的所有关键活动
  - 识别可并行执行的任务:
    * 独立的测试任务 (单元测试、集成测试、E2E测试)
    * 多个功能的并行开发
    * 数据的并行处理路径
  - 识别同步点: 并行任务完成后的汇聚点
  """,

  """
  **2. 设计活动结构**:
  - 定义开始和结束活动
  - 定义关键活动并分配语义化名称
  - 设计并行分支:
    * Fork 点: `A -> B, C, D;`
    * Join 点: `B -> E; C -> E; D -> E;`
  - 确保所有并行分支都有汇聚点
  """,

  """
  **3. 定义活动连接**:
  - 设计顺序流: `A -> B -> C;` (链式连接)
  - 设计并行流: `A -> B, C, D;` (分支)
  - 设计汇聚流: `B -> E; C -> E; D -> E;`
  - 为关键活动添加样式: `[color = red]`, `[numbered = true]`
  """,

  """
  **4. 优化布局和呈现**:
  - 选择合适的布局方向 (landscape / portrait)
  - 调整活动间距避免拥挤
  - 使用 default_shape 统一活动形状
  - 为复杂流程添加 group 分组
  """,

  """
  **5. 验证和完善**:
  - 检查所有活动都有 label
  - 验证并行分支都有汇聚点
  - 确保活动命名规则正确 (无连字符,无中文)
  - 验证时间线清晰,活动顺序合理
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **并行逻辑完整性**:
  - 所有并行分支都有明确的汇聚点
  - Fork-Join 模式正确使用
  - 无悬空活动或断裂路径
  - 并行任务的数量合理 (建议 2-5 个)
  """,

  """
  **时间线清晰度**:
  - 活动的先后顺序明确,无歧义
  - 从开始到结束的路径清晰可追踪
  - 并行活动与串行活动的区分清晰
  - 关键路径突出显示 (使用颜色或编号)
  """,

  """
  **活动命名规范性**:
  - 活动名称使用语义化命名
  - 无连字符,无中文,仅使用 ASCII
  - label 使用中文清晰描述活动内容
  - 活动名称长度适中 (≤20字符)
  """,

  """
  **视觉呈现质量**:
  - 布局合理,活动分布均匀
  - 使用一致的活动形状和样式
  - 并行分支的视觉对称性良好
  - 汇聚点清晰可见,逻辑直观
  """
]

# ============================================
# Section 5: 使用场景 (Use Cases)
# ============================================

[[use_cases]]
title = "CI/CD 流水线"
scenario = "展示软件发布流程中的并行测试和构建任务,包括代码审查、单元测试、集成测试并行执行,完成后汇聚到构建和部署"
key_points = [
  "代码审查、单元测试、集成测试并行执行",
  "所有测试完成后汇聚到构建步骤",
  "使用 numbered 属性标注执行顺序",
  "关键步骤使用颜色突出显示"
]

[[use_cases]]
title = "敏捷开发 Sprint"
scenario = "展示敏捷迭代中的需求分析、并行功能开发、测试、集成和发布流程"
key_points = [
  "多个功能并行开发和测试",
  "使用 Fork-Join 模式表达并行开发",
  "功能开发完成后汇聚到集成步骤",
  "使用 group 划分开发、测试、发布阶段"
]

[[use_cases]]
title = "数据 ETL 管道"
scenario = "展示大数据处理中的数据采集、并行清洗转换、多目标加载、验证和报表生成流程"
key_points = [
  "数据采集后分多路并行处理",
  "每路数据独立完成 清洗→转换→加载",
  "部分数据加载到多个目标 (数据仓库、缓存、搜索引擎)",
  "所有加载完成后汇聚到验证步骤"
]
