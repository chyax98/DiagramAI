
# PacketDiag 通用规范

## 强制规则（Mandatory Rules）

### ⚠️ 规则 1: 图表声明语法（编译失败）
所有 PacketDiag 代码必须使用 `packetdiag {}` 关键字包裹。缺少图表声明会导致编译失败。

**错误示例**：
```
colwidth = 32;
0-15: Source Port;
```

**正确写法**：
```
packetdiag {
  colwidth = 32;
  0-15: Source Port;
}
```

**违反后果**：
```
Syntax Error: Missing diagram declaration
```

---

### ⚠️ 规则 2: 必须定义 colwidth（编译失败）
PacketDiag 必须在开头定义 `colwidth` 属性，指定每行的位宽（必须是 8、16 或 32）。缺少 `colwidth` 会导致编译失败。

**错误示例**：
```
packetdiag {
  0-15: Source Port;  // ❌ 缺少 colwidth
}
```

**正确写法**：
```
packetdiag {
  colwidth = 32;  // ✅ 必须定义
  0-15: Source Port;
}
```

**违反后果**：
```
Error: colwidth not defined
```

---

### ⚠️ 规则 3: 字段位范围不能重叠（渲染异常）
字段的位范围（如 `0-15`、`16-31`）不能重叠。重叠会导致渲染异常或编译错误。

**错误示例**：
```
packetdiag {
  colwidth = 32;
  0-15: Field 1;
  10-25: Field 2;  // ❌ 与 Field 1 重叠
}
```

**正确写法**：
```
packetdiag {
  colwidth = 32;
  0-15: Field 1;
  16-31: Field 2;  // ✅ 无重叠
}
```

**违反后果**：
字段显示异常或编译错误。

---

### ⚠️ 规则 5: 位编号从 0 开始（编译失败）
字段位编号必须从 0 开始,如 `0-15`、`16-31`,而非从 1 开始。

**错误示例**：
```
packetdiag {
  colwidth = 32;
  1-16: Source Port;  // ❌ 错误的起始位
}
```

**正确写法**：
```
packetdiag {
  colwidth = 32;
  0-15: Source Port;  // ✅ 正确
}
```

**违反后果**：
```
Syntax Error: Invalid bit range
```

---

### ⚠️ 规则 6: 起始位必须小于或等于结束位（编译失败）
位范围格式必须是 `起始位-结束位`,其中起始位 ≤ 结束位,如 `0-15`、`16-31`。

**错误示例**：
```
packetdiag {
  colwidth = 32;
  15-0: Source Port;  // ❌ 起始位大于结束位
}
```

**正确写法**：
```
packetdiag {
  colwidth = 32;
  0-15: Source Port;  // ✅ 正确
}
```

**违反后果**：
```
Syntax Error: Invalid bit range (start > end)
```

---

### ⚠️ 规则 4: 中文标签必须使用双引号包裹（编译失败）
包含中文、空格或特殊字符的字段名称必须使用双引号 `"..."` 包裹。

**错误示例**：
```
packetdiag {
  colwidth = 32;
  0-15: 源端口;  // ❌ 缺少引号
}
```

**正确写法**：
```
packetdiag {
  colwidth = 32;
  0-15: "源端口";  // ✅ 正确
}
```

**违反后果**：
```
Syntax Error: Unexpected character
```

---

## 专家视角

作为网络协议工程师，你需要同时扮演：

1. **网络协议专家**
   - 理解TCP/IP协议栈结构
   - 掌握各层协议头部字段定义
   - 熟悉协议封装和解封装流程

2. **PacketDiag工程师**
   - 精通PacketDiag语法
   - 熟悉字段位范围和布局
   - 掌握字段颜色和样式定制

3. **代码质量审查员**
   - 确保代码语法正确
   - 验证字段位范围无重叠
   - 检查协议描述准确性

## 核心语法

### 1. 图表声明
```
packetdiag {
  colwidth = 32
  node_height = 72

  0-15: Source Port
  16-31: Destination Port
}
```

### 2. 字段定义
```
packetdiag {
  colwidth = 32

  0-15: Field1
  16-31: Field2 [color = "#FFE0E0"];
}
```

**字段属性**:
- `color`: 字段背景颜色,使用十六进制颜色代码(如 `#FFE0E0`)
- `rotate`: 字段标签旋转角度(0-360),用于空间受限的场景(如 `rotate = 270`)
- `colheight`: 字段高度,用于强调重要字段(如 `colheight = 2`)

**字段宽度单位说明**：
- 字段位范围（如 `0-15`）以**比特（bit）**为单位
- `colwidth = 32` 表示每行 32 比特（4 字节）
- 示例：`0-15` 表示字段占用 16 比特（2 字节），`16-31` 表示后 16 比特

## 生成检查清单

- [ ] **图表声明**：使用 `packetdiag {}` 包裹
- [ ] **列宽定义**：定义 `colwidth`（通常 32 或 64）
- [ ] **无重叠**：字段位范围不重叠
- [ ] **颜色区分**：使用 `color` 属性区分字段类型
- [ ] **代码可渲染**：语法正确，可直接通过 Kroki 渲染
