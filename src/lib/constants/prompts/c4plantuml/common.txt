
# C4-PlantUML 语言规范

## 强制规则（Mandatory Rules）

C4-PlantUML 基于 PlantUML，必须遵循以下强制规则：

### ⚠️ 规则 1: 所有图表必须使用 @startuml 和 @enduml 包裹
这是 PlantUML 最基本的强制规则！缺少会导致渲染失败。

**错误示例**：
```plantuml
!include <C4/C4_Container>
Person(user, "用户")
```

**编译错误信息**：
```
Error: Syntax error at line 1: Unexpected content outside @startuml block
```

**正确写法**：
```plantuml
@startuml
!include <C4/C4_Container>
Person(user, "用户")
@enduml
```

### ⚠️ 规则 2: 特殊字符必须用双引号包裹
方括号 []、花括号 {}、圆括号 () 在描述文本中使用时必须用双引号包裹。

**错误示例**：
```plantuml
@startuml
!include <C4/C4_Container>
Container(api, API服务[v2], "Node.js")
@enduml
```

**编译错误信息**：
```
Error: Syntax error at line 3: Unexpected token '['
```

**正确写法**：
```plantuml
@startuml
!include <C4/C4_Container>
Container(api, "API服务[v2]", "Node.js", "RESTful API")
@enduml
```

### ⚠️ 规则 3: 必须包含完整的 C4-PlantUML 库引用（最致命错误）
**这是导致渲染失败的首要原因！** 不完整的 `!include` 会导致 PlantUML 无法识别 C4 关键字。

**❌ 错误示例 - 不完整的 include**：
```plantuml
@startuml
!include  <-- 缺少库文件路径，导致渲染失败

title 系统上下文图
Person(customer, "顾客", "在线购物用户")
System(ecommerce, "电商系统")
@enduml
```

**Kroki 实际错误信息**：
```
Error 400: cannot include  (line: 1)
```

**✅ 正确写法（两种官方支持的格式）**：

**方式 1 - 使用标准库短格式（推荐，适用于支持 PlantUML 标准库的环境）**：
```plantuml
@startuml
!include <C4/C4_Context>

title 系统上下文图
Person(customer, "顾客", "在线购物用户")
System(ecommerce, "电商系统")
@enduml
```

**方式 2 - 使用 HTTPS URL（在线环境，始终最新）**：
```plantuml
@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

title 系统上下文图
Person(customer, "顾客", "在线购物用户")
System(ecommerce, "电商系统")
@enduml
```

**⚠️ 根据图表类型选择正确的库文件**：
| 图表类型 | 标准库短格式 | HTTPS URL |
|---------|------------|-----------|
| Context 图 | `!include <C4/C4_Context>` | `!include https://raw.githubusercontent.com/.../C4_Context.puml` |
| Container 图 | `!include <C4/C4_Container>` | `!include https://raw.githubusercontent.com/.../C4_Container.puml` |
| Component 图 | `!include <C4/C4_Component>` | `!include https://raw.githubusercontent.com/.../C4_Component.puml` |
| Dynamic 图 | `!include <C4/C4_Dynamic>` | `!include https://raw.githubusercontent.com/.../C4_Dynamic.puml` |
| Deployment 图 | `!include <C4/C4_Deployment>` | `!include https://raw.githubusercontent.com/.../C4_Deployment.puml` |

**注意**: Kroki 默认在 SECURE 模式下运行,可能阻止外部 URL include。优先使用**标准库短格式**。

### ⚠️ 规则 4: 手写风格必须使用 !option 指令（Kroki 兼容性）
**重要**: 旧语法 `skinparam handwritten true` 在 Kroki 环境下已废弃，必须使用新语法。

**错误示例**：
```plantuml
@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
skinparam handwritten true
Person(user, "用户")
@enduml
```

**Kroki 错误信息**：
```
Warning: 'skinparam handwritten' is deprecated, use '!option handwritten' instead
```

**正确写法**：
```plantuml
@startuml
!option handwritten false
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
Person(user, "用户")
@enduml
```

## 核心概念

C4 模型（Context, Container, Component, Code）是一种用于可视化软件架构的分层方法。C4-PlantUML 是 PlantUML 的扩展库，专门用于绘制 C4 模型图表。

### C4 模型四个层次

1. **Level 1 - System Context**: 系统与外部实体的交互关系
2. **Level 2 - Container**: 系统内部的高层技术构成（应用、数据库、服务等）
3. **Level 3 - Component**: 容器内部的组件和职责划分
4. **Level 4 - Code**: 代码级别的类图（通常不在 C4-PlantUML 中实现）

## 基础语法

### 图表声明

所有 C4-PlantUML 图表必须包含以下结构：

```plantuml
@startuml
' 使用标准库短格式（推荐）
!include <C4/C4_Container>

' 推荐添加布局宏
LAYOUT_WITH_LEGEND()

' 图表标题
title 容器架构图

' 图表内容...

@enduml
```

**⚠️ 根据图表类型选择正确的库文件**：
- **Context 图**: `!include <C4/C4_Context>`
- **Container 图**: `!include <C4/C4_Container>`
- **Component 图**: `!include <C4/C4_Component>`
- **Dynamic 图**: `!include <C4/C4_Dynamic>`
- **Deployment 图**: `!include <C4/C4_Deployment>`

### 元素定义

#### 人员（Person）
```plantuml
Person(alias, "显示名称", "可选描述")
Person_Ext(alias, "外部人员", "外部用户描述")
```

#### 系统（System）
```plantuml
System(alias, "系统名称", "系统描述")
System_Ext(alias, "外部系统", "外部系统描述")
System_Boundary(alias, "边界名称") {
    ' 内部容器...
}
```

#### 容器（Container）
```plantuml
Container(alias, "容器名称", "技术栈", "容器描述")
ContainerDb(alias, "数据库名称", "数据库类型", "数据描述")
Container_Boundary(alias, "边界名称") {
    ' 内部组件...
}
```

#### 组件（Component）
```plantuml
Component(alias, "组件名称", "技术栈", "组件描述")
ComponentDb(alias, "数据组件", "技术", "数据访问描述")
```

### 关系定义

#### 基础关系
```plantuml
Rel(from, to, "描述", "可选技术")
Rel_Back(from, to, "反向关系", "技术")
```

#### 方向关系
```plantuml
Rel_U(from, to, "向上", "技术")    ' Upward
Rel_D(from, to, "向下", "技术")    ' Downward  
Rel_L(from, to, "向左", "技术")    ' Left
Rel_R(from, to, "向右", "技术")    ' Right
```

### 布局和样式

#### 布局方向
```plantuml
LAYOUT_TOP_DOWN()           ' 从上到下（默认方向）
LAYOUT_LEFT_RIGHT()         ' 从左到右
LAYOUT_LANDSCAPE()          ' 横向布局
LAYOUT_WITH_LEGEND()        ' 推荐：自动布局 + 底部图例
```

#### 显示图例
C4-PlantUML 提供两种图例显示方式：

```plantuml
' 方式 1: 底部图例（增加额外空白）
SHOW_LEGEND()               ' 在底部右侧显示图例

' 方式 2: 浮动图例（节省空间，推荐）
SHOW_FLOATING_LEGEND()      ' 在绘图区域内显示图例，复用现有空白

' 方式 3: 组合宏（推荐，自动包含图例）
LAYOUT_WITH_LEGEND()        ' 自动处理布局和图例

' 隐藏图例
HIDE_LEGEND()               ' 不显示图例
```

**最佳实践**: 使用 `LAYOUT_WITH_LEGEND()` 或 `SHOW_FLOATING_LEGEND()` 以获得更紧凑的布局。

## 命名规范

### 元素别名（alias）
- 使用有意义的英文简称
- 采用驼峰命名法或下划线命名法
- 示例：`webApp`, `authService`, `order_db`

### 显示名称
- 使用清晰的中文或英文描述
- 放在双引号中
- 示例：`"Web 应用"`, `"认证服务"`, `"订单数据库"`

### 技术栈标注
- 明确指出使用的技术和框架
- 示例：`"React, Next.js"`, `"Node.js, Express"`, `"PostgreSQL"`

## C4 模型最佳实践

### 1. 保持层次一致性
- 每个图表只聚焦一个抽象层次
- **Context 图**：不包含 Container 或 Component 细节
- **Container 图**：不深入到组件级别
- **Component 图**：不展示代码实现

### 2. 明确边界
- 使用 `System_Boundary` 或 `Container_Boundary` 清晰划分系统边界
- 边界内的元素属于同一个系统或容器

### 3. 技术标注完整
- Container 和 Component 必须包含技术栈信息
- 关系描述应包含通信协议或格式
- 示例：`"REST/JSON"`, `"gRPC"`, `"SQL/JDBC"`

### 4. 合理粒度
- Context 图：3-10 个系统
- Container 图：5-15 个容器
- Component 图：5-20 个组件
- 过多元素应考虑拆分为多个图表

## 常见错误

### ⚠️ 错误 1: 缺少或不完整的 include 声明（最常见！）
❌ **错误写法 1 - 完全缺少 include**：
```plantuml
@startuml
Person(user, "用户")
System(app, "应用")
@enduml
```

❌ **错误写法 2 - 不完整的 include（真实失败案例）**：
```plantuml
@startuml
!include  <-- 缺少库文件路径，导致 "Error 400: cannot include"
Person(customer, "顾客")
System(ecommerce, "电商系统")
@enduml
```

✅ **正确写法**：
```plantuml
@startuml
' 使用标准库短格式（推荐）
!include <C4/C4_Container>

' 推荐添加布局宏
LAYOUT_WITH_LEGEND()

Person(user, "用户")
System(app, "应用")
@enduml
```

**原因**：C4-PlantUML 元素定义来自于外部库，必须先 include 才能使用。`!include` 后面**绝对不能为空**。

### 错误 2: 混用不同抽象层次
❌ **错误写法**：在 Context 图中使用 Component
```plantuml
@startuml
!include <C4/C4_Container>

Person(user, "用户")
System(app, "应用")
Component(ctrl, "控制器", "Spring MVC")  ' 错误：Context图不应有Component
@enduml
```

✅ **正确写法**：
```plantuml
@startuml
!include <C4/C4_Container>

Person(user, "用户")
System(app, "应用系统")
System_Ext(payment, "支付系统")
@enduml
```

**原因**：C4 模型强调层次分离，每个图表应聚焦单一抽象层次。

### 错误 3: 图例使用不当
❌ **不推荐的写法 - 使用底部图例增加额外空白**：
```plantuml
@startuml
!include <C4/C4_Context>

Person(customer, "顾客")
System(ecommerce, "电商系统")

LAYOUT_TOP_DOWN()
SHOW_LEGEND()  <-- 会在底部增加额外空白
@enduml
```

✅ **推荐写法 - 使用浮动图例节省空间**：
```plantuml
@startuml
!include <C4/C4_Context>

' 推荐方式 1：使用组合宏
LAYOUT_WITH_LEGEND()

Person(customer, "顾客")
System(ecommerce, "电商系统")
@enduml
```

✅ **推荐写法 - 或单独使用浮动图例**：
```plantuml
@startuml
!include <C4/C4_Context>

LAYOUT_TOP_DOWN()
SHOW_FLOATING_LEGEND()  <-- 浮动图例，复用现有空白

Person(customer, "顾客")
System(ecommerce, "电商系统")
@enduml
```

**原因**：`SHOW_FLOATING_LEGEND()` 在绘图区域内显示图例，比 `SHOW_LEGEND()` 更节省空间。两者都是有效的，但浮动图例更推荐。

### 错误 4: 缺少技术栈标注
❌ **错误写法**：
```plantuml
Container(web, "Web应用")  ' 缺少技术栈
```

✅ **正确写法**：
```plantuml
Container(web, "Web应用", "React, TypeScript", "前端应用")
```

**原因**：C4 模型的 Container 和 Component 层必须包含技术栈信息，这是其核心价值。

---

## ⚠️ 核心检查清单（每次生成代码前必查！）

### ✅ 必须包含的元素（缺一不可）

1. **完整的 `@startuml` 和 `@enduml` 包裹**
   ```plantuml
   @startuml
   ' 代码...
   @enduml
   ```

2. **完整的 C4 库引用（标准库短格式）**
   ```plantuml
   !include <C4/C4_Context>
   ```
   ⚠️ **最常见错误**: `!include` 后面为空，导致 "Error 400: cannot include"

3. **布局宏（推荐使用）**
   ```plantuml
   LAYOUT_WITH_LEGEND()
   ```
   或分别指定:
   ```plantuml
   LAYOUT_TOP_DOWN()
   SHOW_FLOATING_LEGEND()
   ```

### ✅ 完整的正确示例模板

**Context 图标准模板**:
```plantuml
@startuml
!include <C4/C4_Context>

LAYOUT_WITH_LEGEND()

title 系统上下文图 - 示例系统

Person(user, "用户", "系统使用者")
System(mainSystem, "核心系统", "主要业务功能")
System_Ext(externalSystem, "外部系统", "第三方服务")

Rel(user, mainSystem, "使用", "HTTPS")
Rel(mainSystem, externalSystem, "调用", "API/JSON")
@enduml
```

**Container 图标准模板**:
```plantuml
@startuml
!include <C4/C4_Container>

LAYOUT_WITH_LEGEND()

title 容器架构图 - 示例系统

Person(user, "用户", "系统使用者")

System_Boundary(system, "系统边界") {
    Container(web, "Web 应用", "React, TypeScript", "前端界面")
    Container(api, "API 服务", "Node.js, Express", "后端接口")
    ContainerDb(db, "数据库", "PostgreSQL", "持久化存储")
}

Rel(user, web, "访问", "HTTPS")
Rel(web, api, "调用", "REST/JSON")
Rel(api, db, "读写", "SQL/JDBC")
@enduml
```

### 🚫 绝对避免的错误写法

1. ❌ `!include` 后面为空（最致命错误！）
2. ❌ 缺少 `@startuml` 或 `@enduml`
3. ❌ 在 Context 图中混入 Container/Component 元素
4. ❌ Container 或 Component 缺少技术栈参数
