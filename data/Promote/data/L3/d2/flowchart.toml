# ============================================
# L3 类型层: D2 流程图 (Flowchart)
# ============================================

[meta]
level = "L3"
language = "d2"
diagram_type = "flowchart"
version = "1.0.0"
description = "D2 流程图生成规范 - 业务流程、算法逻辑、决策流程"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关元数据
complexity = "medium"
target_length = 2800
use_cases = ["业务流程", "算法流程", "系统流程", "决策流程"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "流程图逻辑专家 - 将复杂业务逻辑转化为清晰的流程图",
  "业务流程建模专家 - 识别流程中的关键决策点和分支路径",
  "D2 流程图工程师 - 精通 D2 的箭头语法和 diamond 形状"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **判断节点使用菱形**:
  决策节点/分支节点必须使用 `shape: diamond` 表示,并且至少有两个输出分支。
  - ✅ 正确: `验证: { shape: diamond; style.fill: "#fff9c4" }`
  - ❌ 错误: `验证: { shape: rectangle }` (不符合流程图规范)
  每个分支应标注判断结果 (如 "是"/"否", "成功"/"失败")
  """,

  """
  **开始和结束节点规范**:
  - 开始节点: 使用 `circle` 形状,绿色系配色 `style.fill: "#c8e6c9"`
  - 结束节点: 使用 `circle` 形状,绿色系配色 `style.fill: "#c8e6c9"`
  - 示例: `开始: { shape: circle; style.fill: "#c8e6c9" }`
  """,

  """
  **节点形状规范**:
  根据节点类型选择合适的形状:
  - 圆角矩形 `rectangle`: 普通操作步骤
  - 菱形 `diamond`: 决策节点、判断分支
  - 圆形 `circle`: 开始/结束节点
  - 圆柱 `cylinder`: 数据存储操作
  - 平行四边形 (暂不支持): 输入输出 (使用 rectangle 替代)
  """,

  """
  **流程逻辑完整性**:
  - 所有流程路径都必须有明确的终点
  - 决策节点的所有分支都必须处理
  - 异常情况也应有处理路径
  - 不得出现悬空分支 (无终点的分支)
  """,

  """
  **节点连接规范**:
  使用清晰的连接线和标签:
  - 顺序流: `A -> B`
  - 条件流: `A -> B: "条件"`
  - 多步骤: `A -> B -> C -> D`
  - 分支汇合: `A -> C` 和 `B -> C`
  """,

  """
  **分支标签必需**:
  判断节点的每个分支必须标注清楚条件或结果:
  - ✅ 正确: `判断 -> 成功: "通过"`
  - ✅ 正确: `判断 -> 失败: "不通过"`
  - ❌ 错误: `判断 -> 成功` (缺少标签说明)
  """,

  """
  **布局方向明确**:
  - 横向流程: `direction: right` (从左到右)
  - 纵向流程: `direction: down` (从上到下,默认)
  - 根据流程的自然阅读顺序选择方向
  """,

  """
  **配色语义化**:
  使用颜色区分不同状态和节点类型:
  - 绿色系 (#c8e6c9): 成功、完成、正常结束
  - 蓝色系 (#bbdefb): 常规处理步骤
  - 黄色系 (#fff9c4): 判断节点、决策点
  - 红色系 (#ffcdd2): 失败、错误、异常情况
  - 橙色系 (#ffe0b2): 警告、需要注意的状态
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别流程要素**:
  - 起点: 流程的触发条件或开始动作
  - 终点: 流程的结束状态 (成功、失败、取消等)
  - 关键步骤: 核心操作节点
  - 决策点: 需要判断和分支的地方
  - 异常处理: 错误情况的处理路径
  """,

  """
  **2. 提取流程逻辑**:
  - 主流程: 正常情况下的标准流程路径
  - 分支流程: 基于条件判断的不同路径
  - 异常流程: 错误、失败、超时等异常情况的处理
  - 循环流程: 需要重复执行的步骤 (使用反向连接)
  """,

  """
  **3. 设计节点关系**:
  - 确定节点的先后顺序和依赖关系
  - 设计清晰的决策节点和分支逻辑
  - 处理流程的汇合点 (多个路径汇合到同一节点)
  - 避免流程死锁和无限循环
  """,

  """
  **4. 应用 D2 语法**:
  - 定义所有节点及其形状和样式
  - 使用 `->` 连接节点表示流向
  - 为决策分支添加清晰的标签
  - 设置布局方向 (`direction: right` 或 `direction: down`)
  """,

  """
  **5. 优化流程结构**:
  - 确保流程路径清晰,避免连接线交叉
  - 节点命名语义化,便于理解
  - 添加必要的连接标签说明
  - 使用容器对复杂流程进行模块化分组 (可选)
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **流程逻辑完整性**:
  - 所有流程路径都有明确的终点 (结束节点)
  - 决策节点的所有分支都有处理
  - 无悬空节点或断裂路径
  - 循环逻辑合理,有明确的退出条件
  """,

  """
  **决策节点清晰度**:
  - 决策节点使用菱形 (`shape: diamond`)
  - 判断条件清晰明确
  - 每个分支都有标签说明 (是/否, 成功/失败等)
  - 覆盖所有可能的情况
  """,

  """
  **节点命名规范**:
  - 节点文本简洁明了,表达核心操作
  - 使用动词开头 (如 "验证用户", "发送邮件")
  - 避免过长或过于简单的文本
  - ID 语义化,易于理解
  """,

  """
  **流程可读性**:
  - 布局合理,节点分布均匀
  - 连接线尽量不交叉
  - 配色语义化 (绿色=成功, 红色=失败, 黄色=判断)
  - 起点和终点使用相同配色 (通常绿色)
  - 关键路径清晰可辨
  """
]

# ============================================
# Section 5: 使用场景 (Use Cases)
# ============================================

[[use_cases]]
title = "用户注册流程"
scenario = "展示用户注册的完整流程,包括表单验证、账号创建和邮件通知"
key_points = [
  "使用 circle 表示开始和结束",
  "使用 diamond 表示表单验证判断",
  "失败路径可以回到输入步骤形成循环",
  "使用 `direction: right` 从左到右展示流程"
]

[[use_cases]]
title = "订单处理流程"
scenario = "电商订单处理流程,包括库存检查、支付验证、发货安排"
key_points = [
  "多个判断节点组成复杂流程",
  "使用不同颜色区分成功和失败路径",
  "所有路径最终汇聚到完成节点",
  "使用 `direction: down` 从上到下展示"
]

[[use_cases]]
title = "多级审批流程"
scenario = "多级审批流程,包含部门经理和总经理审批,支持退回修改"
key_points = [
  "三级审批流程 (部门、总经理、财务)",
  "包含退回修改的循环路径",
  "使用不同颜色深度区分审批层级",
  "多条路径汇聚到同一个结束节点"
]
