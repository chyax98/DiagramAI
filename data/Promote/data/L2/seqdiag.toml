# ============================================
# L2 语言层 - SeqDiag 通用规范
# ============================================

[meta]
level = "L2"
language = "seqdiag"
version = "1.0.0"
description = "SeqDiag 语言通用规范 - BlockDiag 风格的时序图语言"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 语言相关的元数据
language_version = "3.0.0"
kroki_support = true
official_docs = "http://blockdiag.com/en/seqdiag/"

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "SeqDiag 语法专家 - 精通时序图语法和消息传递模式",
  "系统交互分析师 - 擅长分析对象间的消息传递和时序关系",
  "时序建模专家 - 精通同步调用、异步调用和返回消息的表达"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **图表声明语法 (强制)**:
  - 必须使用 `seqdiag {}` 关键字包裹所有内容
  - 缺少图表声明将导致编译失败
  - 示例: `seqdiag { A -> B; }`
  """,

  """
  **对象定义和排序规范**:
  - 对象可以隐式定义 (自动创建) 或显式定义 (推荐)
  - 显式定义控制排序: `Client; Server; Database;`
  - 对象在图中的水平位置由首次出现顺序决定
  - 一旦对象出现,其位置固定,无法重新排序
  - 错误的对象顺序会导致箭头交叉,影响可读性
  """,

  """
  **消息箭头语法规范**:
  - **实线箭头**: `A -> B` (从 A 到 B 的消息)
  - **虚线箭头**: `A --> B` (异步消息或返回值)
  - **反向箭头**: `A <- B` (等价于 `B -> A`)
  - **虚线反向**: `A <-- B` (等价于 `B --> A`)
  - **自调用**: `A -> A` (对象调用自身)
  """,

  """
  **返回消息规范 (重要)**:
  - 返回消息使用虚线箭头: `Client <-- Server [label = "响应"];`
  - 返回消息与请求消息成对出现,表达完整的调用-返回关系
  - 同步调用必须有返回消息,异步调用可省略
  - 返回消息方向与请求消息相反
  """,

  """
  **中文标签规范 (强制)**:
  - 包含中文、空格或特殊字符的标签必须用双引号包裹
  - 消息标签: `A -> B [label = "发送请求"];`
  - 对象标签: 对象名称通常使用英文,通过 label 显示中文
  """,

  """
  **激活框规范**:
  - 使用 `activation` 和 `deactivation` 表示对象的活动期
  - 必须成对出现: `activation = A; ... deactivation = A;`
  - 缺少配对会导致激活框渲染异常
  - 支持嵌套激活: 对象 A 激活时调用对象 B,B 也激活
  """,

  """
  **分组 (group) 规范**:
  - 使用 `group {}` 进行逻辑分组 (表示流程阶段或条件)
  - 分组属性: label (分组标签), color (边框颜色)
  - 分组可表达条件分支: `group { label = "if 条件"; ... }`
  """,

  """
  **注释规范**:
  - **单行注释**: `// 注释内容`
  - **多行注释**: `/* 注释内容 */`
  - **消息注释**: `A -> B [note = "HTTP POST /api"];`
  - **独立注释块**: `=== 阶段标题 ===`
  """,

  """
  **布局控制规范**:
  - **edge_length**: 控制消息箭头长度 (默认 120 像素)
  - **span_height**: 控制消息间的垂直间距 (默认 40 像素)
  - **activation_height**: 控制激活框的高度
  - **default_fontsize**: 默认字体大小
  """,

  """
  **Kroki 兼容性**:
  - 生成的代码必须能被 Kroki 成功渲染为 SVG
  - 避免使用实验性特性或非标准语法
  - 所有反斜杠必须正确转义
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 理解需求和识别对象**:
  - 分析系统交互涉及的所有对象 (客户端、服务器、数据库、外部服务等)
  - 确定对象的显示顺序 (建议从左到右: 客户端 → 服务器 → 数据库)
  - 识别关键交互: 请求、响应、查询、更新等
  """,

  """
  **2. 设计对象结构**:
  - 显式定义所有对象并控制排序:
    * `Client; Server; Cache; Database;`
  - 使用语义化命名: Client, APIGateway, AuthService, Database
  - 确保对象顺序符合业务逻辑的自然流向
  """,

  """
  **3. 定义消息传递**:
  - 设计请求消息: `Client -> Server [label = "GET /user"];`
  - 设计返回消息: `Client <-- Server [label = "200 OK"];`
  - 设计链式调用: `Client -> Server; Server -> Database;`
  - 为关键消息添加标签说明
  """,

  """
  **4. 应用激活框和分组**:
  - 为关键对象添加激活框表示活动期:
    * `activation = Server; ... deactivation = Server;`
  - 使用 group 划分流程阶段:
    * `group { label = "认证阶段"; ... }`
  - 使用注释标注关键步骤
  """,

  """
  **5. 优化和验证**:
  - 检查所有消息都有清晰的 label
  - 验证请求-返回消息成对出现
  - 确保激活/失活成对出现
  - 验证对象顺序合理,箭头交叉最少
  - 检查中文标签正确使用双引号
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **语法正确性**:
  - 使用 `seqdiag {}` 包裹,无遗漏
  - 所有消息属性使用 `[key = "value"]` 格式
  - 中文标签正确使用双引号
  - 激活/失活成对出现
  """,

  """
  **时序逻辑准确性**:
  - 消息传递顺序符合实际业务流程
  - 请求-返回消息成对出现
  - 消息方向正确: -> (正向), <-- (返回)
  - 链式调用逻辑清晰
  """,

  """
  **对象命名和排序**:
  - 对象命名语义化,易于理解
  - 对象排序符合业务流程自然顺序
  - 无不必要的箭头交叉
  - 对象数量合理 (建议 2-6 个)
  """,

  """
  **Kroki 渲染测试**:
  - 代码能被 Kroki 成功解析
  - 渲染的 SVG 图像布局合理
  - 消息箭头清晰可见,标签易读
  - 激活框渲染正确
  """
]
