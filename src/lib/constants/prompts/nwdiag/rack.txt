
# RackDiag 生成要求

## 图表类型：机架图（Rack Diagram）

机架图用于展示数据中心设备物理布局，包括 U 位分配和设备安装位置，适用于：
- 单机柜设备布局（U 位规划）
- 数据中心机柜设计
- 服务器和网络设备物理部署

## 核心语法

### 基础机架定义
```
rackdiag {
  // 1U 设备
  1: UPS [2U];
  3: DB Server;
  4: Web Server;
  5: Web Server;
  6: Web Server;
  7: Load Balancer;
  8: L3 Switch;
}
```

**语法要点**：
- 数字表示 U 位编号（从下往上，1 是最底部）
- `[2U]` 表示设备占用 2 个 U 位
- 默认每个设备占用 1U

### 设备描述和属性
```
rackdiag {
  1: UPS [2U, description = "APC Smart-UPS 3000"];
  3: Server [description = "Dell PowerEdge R740"];
}
```

## 生成示例

### 示例 1: 标准 42U 机柜（简单场景）
**用户需求**：标准 42U 机柜，包含服务器、交换机、UPS

**生成代码**：
```
rackdiag {
  // 底部 UPS 和 PDU
  1: UPS [2U, description = "APC Smart-UPS 3000"];
  3: PDU [1U, description = "Power Distribution"];

  // 网络设备区
  5: Core Switch [description = "Cisco Nexus 9000"];
  6: Access Switch 1;
  7: Access Switch 2;

  // 服务器区
  10: DB Server 1 [2U, description = "MySQL Master"];
  12: DB Server 2 [2U, description = "MySQL Slave"];
  14: App Server 1;
  15: App Server 2;
  16: App Server 3;
  17: Web Server 1;
  18: Web Server 2;

  // 顶部管理设备
  40: KVM Switch [description = "Remote Management"];
  41: Patch Panel [description = "Network Cabling"];
}
```

**关键点**：
- U 位从 1（底部）到 42（顶部）编号
- 使用 `[2U]` 标注占用多个 U 位的设备
- 设备分区规划：UPS → 网络 → 服务器 → 管理

### 示例 2: 数据中心机柜（中等复杂度）
**用户需求**：数据中心标准机柜，包含计算、存储、网络设备

**生成代码**：
```
rackdiag {
  // 电源和配电
  1: UPS [3U, description = "Eaton 9PX 6000"];
  4: PDU 1 [description = "Primary PDU"];
  5: PDU 2 [description = "Redundant PDU"];

  // 核心网络层
  8: Core Router [description = "Juniper MX204"];
  9: Firewall [2U, description = "Palo Alto PA-3220"];
  11: L3 Switch 1 [description = "Arista 7050SX"];
  12: L3 Switch 2 [description = "Arista 7050SX"];

  // 计算节点
  15: Compute 1 [2U, description = "HP ProLiant DL380"];
  17: Compute 2 [2U];
  19: Compute 3 [2U];
  21: Compute 4 [2U];

  // 存储设备
  25: Storage Controller [2U, description = "NetApp FAS2750"];
  27: Disk Shelf 1 [4U, description = "24-Bay SAS"];
  31: Disk Shelf 2 [4U, description = "24-Bay SAS"];

  // 管理和监控
  38: Management Server [description = "IPMI/iDRAC"];
  39: Monitoring [description = "Nagios"];
  40: KVM [description = "IP KVM"];
  41: Patch Panel;
}
```

**关键点**：
- 底部放置电源设备（UPS、PDU）
- 网络设备在中下部（便于布线）
- 计算和存储设备在中上部
- 管理设备在顶部
- 存储柜使用 `[4U]` 表示大型设备

### 示例 3: 高密度计算机柜（高级场景）
**用户需求**：GPU 服务器机柜，包含高密度刀片服务器和冷却系统

**生成代码**：
```
rackdiag {
  // 电源系统
  1: UPS [4U, description = "Liebert GXT5-6000"];
  5: PDU 1 [description = "30A Primary"];
  6: PDU 2 [description = "30A Redundant"];

  // 冷却系统
  8: In-Row Cooling [6U, description = "APC InfraStruXure"];

  // 核心网络（高带宽）
  15: InfiniBand Switch [2U, description = "Mellanox SB7800"];
  17: Ethernet Switch [description = "100GbE Spine"];

  // GPU 服务器（高功耗）
  20: GPU Server 1 [4U, description = "8x NVIDIA A100"];
  24: GPU Server 2 [4U, description = "8x NVIDIA A100"];
  28: GPU Server 3 [4U, description = "8x NVIDIA A100"];
  32: GPU Server 4 [4U, description = "8x NVIDIA A100"];

  // 管理节点
  37: Management Node [2U, description = "Cluster Controller"];
  39: Storage Node [2U, description = "NFS Server"];
  41: KVM [description = "Remote Console"];
}
```

**关键点**：
- 专用冷却系统（`[6U]`）应对高功耗 GPU 服务器
- InfiniBand 网络用于 GPU 集群互联
- GPU 服务器占用 4U（散热和电源需求）
- 合理分配 U 位，避免热点集中

## 常见错误

### 错误 1: U 位重叠
**❌ 错误写法**：
```
rackdiag {
  1: Server 1 [2U];
  2: Server 2;  // 与 Server 1 重叠（Server 1 占用 1-2U）
}
```

**✅ 正确写法**：
```
rackdiag {
  1: Server 1 [2U];  // 占用 1-2U
  3: Server 2;       // 从 3U 开始
}
```

**原因**：设备的 U 位不能重叠，多 U 设备需要预留空间。

### 错误 2: 缺少图表声明
**❌ 错误写法**：
```
1: UPS [2U];
3: Server;
```

**✅ 正确写法**：
```
rackdiag {
  1: UPS [2U];
  3: Server;
}
```

**原因**：必须使用 `rackdiag {}` 包裹所有内容。

### 错误 3: U 位编号超出范围
**❌ 错误写法**：
```
rackdiag {
  50: Server;  // 标准机柜只有 42U
}
```

**✅ 正确写法**：
```
rackdiag {
  40: Server;  // 标准 42U 机柜，最大 42U
}
```

**原因**：标准机柜通常是 42U，U 位编号应在 1-42 范围内。

## 生成检查清单

- [ ] **图表声明**：使用 `rackdiag {}` 包裹
- [ ] **U 位编号**：从 1 开始，按照从下往上的顺序
- [ ] **无重叠**：多 U 设备占用的 U 位不重叠
- [ ] **范围合理**：U 位编号在 1-42 范围内（标准机柜）
- [ ] **描述清晰**：重要设备有 `description` 属性
- [ ] **布局合理**：电源在底部，网络居中，管理在顶部
- [ ] **代码可渲染**：语法正确，可直接通过 Kroki 渲染

**任何检查项不通过，立即修正后重新生成**
