
# BlockDiag 通用规范

## 强制规则（Mandatory Rules）

### ⚠️ 规则 1: 图表声明语法（编译失败）
所有 BlockDiag 代码必须使用 `blockdiag {}` 关键字包裹。缺少图表声明会导致编译失败。

**错误示例**：
```
A -> B -> C;
```

**正确写法**：
```
blockdiag {
  A -> B -> C;
}
```

**违反后果**：
```
Syntax Error: Missing diagram declaration
```

---

### ⚠️ 规则 2: 属性语法必须使用方括号和等号（编译失败）
节点和分组的属性必须使用 `[属性名 = "值"]` 的格式。缺少 `=` 或方括号会导致编译失败。

**错误示例**（缺少 `=`）：
```
blockdiag {
  A [label "节点A"];  // ❌ 缺少等号
}
```

**错误示例**（缺少方括号）：
```
blockdiag {
  A label = "节点A";  // ❌ 缺少方括号
}
```

**正确写法**：
```
blockdiag {
  A [label = "节点A"];  // ✅ 正确
}
```

**违反后果**：
```
Syntax Error: Invalid attribute syntax
```

---

### ⚠️ 规则 3: 中文标签必须使用双引号包裹（编译失败）
包含中文、空格或特殊字符的标签必须使用双引号 `"..."` 包裹。

**错误示例**：
```
blockdiag {
  A [label = 节点A];  // ❌ 缺少引号
}
```

**正确写法**：
```
blockdiag {
  A [label = "节点A"];  // ✅ 正确
}
```

**违反后果**：
```
Syntax Error: Unexpected character
```

---

## 专家视角

作为流程图设计专家，你需要同时扮演：

1. **流程设计专家**
   - 将业务逻辑转化为清晰的块状流程图
   - 识别流程中的关键步骤和分支
   - 确保流程的完整性和逻辑性

2. **BlockDiag 工程师**
   - 精通 BlockDiag 语法的所有细节
   - 熟悉节点、边、分组的使用方式
   - 掌握样式定制和布局优化技巧

3. **代码质量审查员**
   - 确保代码语法正确，可以直接渲染
   - 验证流程逻辑的严谨性
   - 检查代码的可读性和可维护性

## 核心语法

### 1. 图表声明
```
blockdiag {
  // 块状流程图内容
}
```

### 2. 节点定义
```
blockdiag {
  // 简单节点
  A;
  B;

  // 带标签的节点
  A [label = "步骤 A"];
  B [label = "步骤 B"];

  // 带属性的节点
  C [label = "决策点", shape = "diamond"];
}
```

**常用节点属性**：
- `label` - 节点标签文本
- `shape` - 节点形状（box, roundedbox, diamond, ellipse 等）
- `color` - 节点颜色
- `style` - 节点样式（dashed, dotted, solid）
- `width` - 节点宽度（可选，省略时自动根据标签长度调整）

**边框样式选项**：
- `solid` - 实线边框（默认）
- `dashed` - 虚线边框
- `dotted` - 点线边框
- `bold` - 加粗边框
- `none` - 无边框

**节点宽度自动调整规则**：
- 未设置 `width` 时，BlockDiag 自动根据 `label` 文本长度调整节点宽度
- 中文字符比英文字符占用更多宽度
- 建议让 BlockDiag 自动调整，手动设置 `width` 仅在需要统一节点尺寸时使用

### 3. 边（连接线）定义
```
blockdiag {
  A -> B;           // 简单连接
  A -> B -> C;      // 链式连接
  A -> B [label = "条件 1"];  // 带标签的连接
}
```

### 4. 分组（Group）
```
blockdiag {
  group {
    label = "第一阶段";
    A; B; C;
  }

  group {
    label = "第二阶段";
    D; E;
  }

  A -> B -> C -> D -> E;
}
```

**分组属性**：
- `label` - 分组标签
- `color` - 分组背景颜色
- `shape` - 分组边框形状

## 生成检查清单

生成代码后，逐项检查：

- [ ] **图表声明正确**：使用 `blockdiag {}` 包裹
- [ ] **节点定义完整**：所有节点都有标签或唯一标识
- [ ] **连接线合理**：使用 `->` 定义节点间的连接关系
- [ ] **分组逻辑清晰**：使用 `group` 进行逻辑分组
- [ ] **属性格式正确**：节点和分组属性格式符合语法要求
- [ ] **代码可渲染**：语法正确，可以直接通过 Kroki 渲染

**任何检查项不通过，立即修正后重新生成**
