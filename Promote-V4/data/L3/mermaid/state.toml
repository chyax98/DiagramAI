# ============================================
# L3 类型层 - Mermaid State Diagram v1.0.0
# ============================================

[meta]
level = "L3"
language = "mermaid"
diagram_type = "state"
version = "1.0.0"
description = "Mermaid 状态图规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 可选元数据
complexity = "medium"
target_length = 2900
use_cases = ["状态机设计", "流程状态", "生命周期管理", "业务状态流转"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "状态机设计专家 - 清晰识别系统的所有状态和转换条件",
  "Mermaid State 工程师 - 精通状态嵌套、并发状态等高级特性"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **图表声明**: 必须使用 `stateDiagram-v2` 关键字（推荐 v2 版本，功能更强大）:
  - `stateDiagram-v2`: 支持更多高级特性
  - 不推荐使用旧版 `stateDiagram`
  """,

  """
  **初始和结束状态**: 使用 `[*]` 表示初始和结束状态:
  - 初始状态: `[*] --> 状态名`
  - 结束状态: `状态名 --> [*]`
  - 不能使用 `start`、`end` 等词（`end` 是保留关键字）
  """,

  """
  **状态定义和转换**: 状态转换使用 `-->` 连接:
  - 基本转换: `状态A --> 状态B: 转换条件`
  - 状态别名: `state "中文名" as alias`（处理特殊字符）
  - 转换条件: 使用 `: 条件` 格式标注（推荐总是添加）
  - 条件简洁: 控制在 5-10 字以内，使用动词（如 "完成"、"确认"、"取消"）
  """,

  """
  **嵌套状态（复合状态）**: 使用 `state {...}` 创建嵌套状态:
  - 语法: `state 状态名 { ... }`
  - 嵌套深度 ≤ 3 层（Kroki 渲染引擎限制）
  - 超过3层会导致渲染性能下降、布局错位
  - 必须正确闭合 `{}`
  """,

  """
  **并发状态（Parallel States）**: 使用 `--` 分隔符创建并发状态:
  - 语法: `state 状态名 { [*] --> 任务A -- [*] --> 任务B }`
  - 分隔符必须是 `--`（两个短横线），不能是 `---`（三个短横线）
  - 并发区域数量 ≤ 4（避免图表过于复杂）
  - 每个并发区域的状态数 ≤ 5（保持���晰）
  - 所有并发区域必须达到结束状态才能整体转换
  """,

  """
  **选择节点（Choice）**: 使用 `<<choice>>` 标记选择节点:
  - 语法: `state if_state <<choice>>`
  - 选择节点后必须有至少两个分支
  - 每个分支应标注条件（如 `: 满足条件`, `: 不满足条件`）
  """,

  """
  **注释语法**: 使用 `note` 添加状态说明:
  - 单行: `note left of 状态: 说明`
  - 多行: `note right of 状态\n说明1\n说明2\nend note`
  - 位置关键字: `left of`, `right of`
  """,

  """
  **保留关键字禁用**: 状态名称不得使用 State Diagram 保留关键字:
  - 禁用: `state`, `direction`, `[*]`, `note`, `hide`, `show`
  - 使用英文驼峰命名（如 `initializing`, `processing`）
  - 使用方括号添加中文描述（如 `processing[处理中]`）
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别系统状态**:
  - **初始状态**: 系统的起始状态（使用 `[*]`）
  - **终止状态**: 系统的结束状态（使用 `[*]`）
  - **中间状态**: 系统运行过程中的各种状态
  - **复合状态**: 包含子状态的嵌套状态（使用 `state {...}`）
  """,

  """
  **2. 设计状态转换**:
  - 明确每个状态的转换条件
  - 识别判断分支（使用 `<<choice>>` 选择节点）
  - 处理循环转换（状态可以回到之前的状态）
  - 确保所有状态路径都有明确的终点
  """,

  """
  **3. 应用嵌套和并发**:
  - **嵌套状态**: 对复杂状态进行分解（深度 ≤ 3 层）
  - **并发状态**: 使用 `--` 分隔符表示同时执行的任务
  - **选择节点**: 使用 `<<choice>>` 处理条件分支
  - **历史状态**: 使用 `<<history>>` 记住最后的子状态（可选）
  """,

  """
  **4. 添加注释和说明**:
  - 使用 `note` 标注关键状态的业务规则
  - 说明状态转换的触发条件
  - 解释复杂的嵌套或并发逻辑
  """,

  """
  **5. 优化状态图结构**:
  - 确保所有状态都有进入和退出路径（除非是终态）
  - 嵌套深度控制在 3 层以内
  - 并发区域数量控制在 4 个以内
  - 状态命名清晰，易于理解
  - 避免使用保留关键字
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **状态转换完整性**:
  - 所有状态都有进入和退出路径（除非是终态）
  - 初始状态使用 `[*]` 标记
  - 结束状态使用 `[*]` 标记
  - 无悬空状态或断裂路径
  - 循环转换有明确的退出条件
  """,

  """
  **转换条件清晰度**:
  - 关键转换都标注了条件（使用 `: 条件` 格式）
  - 条件描述简洁明了（5-10 字）
  - 判断分支覆盖所有可能情况
  - 使用动词表达触发动作（如 "完成"、"确认"、"取消"）
  """,

  """
  **嵌套和并发正确性**:
  - 嵌套状态 `{}` 正确闭合
  - 嵌套深度 ≤ 3 层
  - 并发状态使用 `--` 分隔符（两个短横线）
  - 并发区域数量 ≤ 4
  - 选择节点使用 `<<choice>>` 正确声明
  """,

  """
  **命名和可读性**:
  - 状态名称语义化，易于理解
  - 避免使用保留关键字
  - 注释说明关键状态和转换条件
  - 状态图结构清晰，逻辑易于跟踪
  """
]
