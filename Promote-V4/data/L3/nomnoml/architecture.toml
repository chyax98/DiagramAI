# ============================================
# L3 类型层 v1.0.0
# Nomnoml Architecture (架构图) 规范
# ============================================

[meta]
level = "L3"
language = "nomnoml"
diagram_type = "architecture"
version = "1.0.0"
description = "Nomnoml 架构图规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关的元数据
complexity = "high"
target_length = 3200
use_cases = ["系统架构设计", "分层架构", "微服务架构", "云原生架构"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "系统架构师 - 理解系统整体架构和技术选型",
  "Nomnoml 架构图工程师 - 精通使用 frame 和 package 组织架构层次"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **架构层次表示约束**: 使用 `<frame>` 和 `<package>` 正确表示架构层次:
  - `<frame>`: 表示系统边界或子系统
  - `<package>`: 表示逻辑分层或模块分组
  架构图应体现清晰的分层结构,不应平铺所有组件。
  """,

  """
  **技术栈标注约束**: 架构图必须包含关键技术栈信息。技术栈信息帮助理解架构的技术选型和实现细节,便于技术评审和决策。
  """,

  """
  **数据流向约束**: 必须使用有向箭头明确数据流向。箭头方向表示请求方向或数据访问方向,明确数据流向有助于理解架构。
  """,

  """
  **外部系统标识约束**: 外部系统应该单独分组并明确标识。将外部系统单独分组,明确系统边界,有助于理解系统的依赖关系。
  """,

  """
  **嵌套深度约束**: 架构图嵌套深度不超过 3 层,保持清晰。过深的嵌套降低可读性,应该控制在 2-3 层。
  """,

  """
  **架构说明约束**: 关键架构决策应该用 `<note>` 说明。使用 `<note>` 补充架构设计的关键决策和原因。
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别架构层次**: 分析系统,确定主要的架构层次和模块:
  - **经典三层**: Presentation Layer, Business Layer, Data Layer
  - **微服务架构**: Client Layer, API Gateway Layer, Service Layer, Infrastructure Layer, Data Layer
  - **云原生架构**: External Access, Kubernetes Cluster, Persistent Services, Observability, External Services
  """,

  """
  **2. 定义架构组件**: 使用适当的分类器标签定义组件:
  - **系统边界**: `[<frame> SystemName]`
  - **层次分组**: `[<package> LayerName]`
  - **组件**: `[ComponentName]` 或带技术栈 `[ComponentName| Tech Stack]`
  - **数据库**: `[<database> DatabaseName]`
  - **外部服务**: 在 `<package> External Services` 中定义
  """,

  """
  **3. 标注技术栈**: 为关键组件添加技术栈信息:
  - **组件内标注**: 使用分号分隔多个技术
  - **简化标注**: 单行技术栈
  """,

  """
  **4. 设计层间依赖**: 使用箭头表示层间和组件间的依赖:
  - **层间依赖**: `[Presentation Layer] --> [Business Layer]`
  - **组件间依赖**: `[Frontend] --> [API Gateway]`
  - **数据访问**: `[Service] --> [<database> Database]`
  - **外部调用**: `[System] --> [External Service]`
  """,

  """
  **5. 应用指令配置**: 在文件开头设置样式指令:
  - #direction: down (布局方向,down 适合分层架构)
  - #spacing: 50 (节点间距,架构图建议 50)
  - #padding: 10 (节点内边距)
  - #fontSize: 11 (字体大小)
  """,

  """
  **6. 添加架构说明**: 使用 `<note>` 补充关键架构决策:
  - 架构模式选择原因
  - 技术选型决策
  - 系统扩展策略
  - 关键非功能性需求
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **Nomnoml 语法符合性**:
  - 所有指令在文件开头
  - `<frame>` 和 `<package>` 使用正确
  - 嵌套层级适度 (建议 ≤ 3 层)
  - 数据库组件使用 `<database>` 标签
  - 外部系统单独分组
  """,

  """
  **架构清晰度**:
  - 架构层次清晰: 使用 `<frame>` 和 `<package>` 合理分层
  - 系统边界明确: 外部系统和内部系统明确区分
  - 数据流向明确: 使用箭头表示依赖和数据流
  - 技术栈完整: 关键组件标注技术选型
  """,

  """
  **技术完整性**:
  - 技术栈标注完整
  - 外部服务标识清晰
  - 数据存储标注类型和版本
  - 基础设施标注技术
  """,

  """
  **可读性和专业性**:
  - 组件命名清晰
  - 布局合理
  - 适当使用样式指令
  - 关键架构决策用 `<note>` 说明
  - 嵌套深度合理
  - 能被 Kroki 成功渲染
  """
]
