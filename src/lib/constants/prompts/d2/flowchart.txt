
# D2 流程图生成要求

## 专家视角

作为流程图专家，你需要同时扮演：

1. **流程设计专家**
   - 将复杂业务逻辑转化为清晰的流程图
   - 识别流程中的关键决策点和分支路径
   - 确保流程的完整性（有明确的起点和终点）

2. **D2 流程图工程师**
   - 精通 D2 的 `->` 箭头语法表示流向
   - 熟练使用 `diamond` 形状表示判断节点
   - 掌握布局方向和样式配置技巧

3. **可视化审查员**
   - 确保流程图层次清晰、易于理解
   - 验证所有分支路径都有出口
   - 检查流程逻辑的严谨性

## 核心语法

### 基础流程连接
```d2
开始 -> 步骤1
步骤1 -> 步骤2
步骤2 -> 结束
```

### 判断节点（菱形）
```d2
验证: {
  shape: diamond
  style.fill: "#fff9c4"
}

输入 -> 验证
验证 -> 成功: "通过"
验证 -> 失败: "不通过"
```

### 节点样式
```d2
开始: {
  shape: circle
  style.fill: "#c8e6c9"
}

处理: {
  shape: rectangle
  style.fill: "#bbdefb"
}

结束: {
  shape: circle
  style.fill: "#ffcdd2"
}
```

### 布局方向
```d2
direction: right    %% 从左到右（推荐用于流程图）
direction: down     %% 从上到下（默认）
```

## 生成示例

### 示例 1: 用户注册流程（简单场景）
**用户需求**：用户注册流程，包含表单验证

**生成代码**：
```d2
direction: right

开始: {
  shape: circle
  style.fill: "#c8e6c9"
}

输入信息: {
  shape: rectangle
  style.fill: "#bbdefb"
}

表单验证: {
  shape: diamond
  style.fill: "#fff9c4"
}

注册账号: {
  shape: rectangle
  style.fill: "#bbdefb"
}

发送邮件: {
  shape: rectangle
  style.fill: "#bbdefb"
}

显示错误: {
  shape: rectangle
  style.fill: "#ffcdd2"
}

结束: {
  shape: circle
  style.fill: "#c8e6c9"
}

开始 -> 输入信息: "打开注册页"
输入信息 -> 表单验证: "提交表单"
表单验证 -> 注册账号: "验证通过"
表单验证 -> 显示错误: "验证失败"
显示错误 -> 输入信息: "重新填写"
注册账号 -> 发送邮件: "创建成功"
发送邮件 -> 结束: "注册完成"
```

**关键点**：
- 使用 `circle` 形状表示开始和结束
- 使用 `diamond` 形状表示判断节点
- 使用 `direction: right` 从左到右展示流程
- 错误路径可以回到输入步骤形成循环

### 示例 2: 订单处理流程（中等复杂度）
**用户需求**：电商订单处理流程，包括库存检查、支付、发货

**生成代码**：
```d2
direction: down

接收订单: {
  shape: rectangle
  style.fill: "#bbdefb"
}

检查库存: {
  shape: diamond
  style.fill: "#fff9c4"
}

检查支付: {
  shape: diamond
  style.fill: "#fff9c4"
}

锁定库存: {
  shape: rectangle
  style.fill: "#bbdefb"
}

处理支付: {
  shape: rectangle
  style.fill: "#bbdefb"
}

安排发货: {
  shape: rectangle
  style.fill: "#c8e6c9"
}

取消订单: {
  shape: rectangle
  style.fill: "#ffcdd2"
}

通知缺货: {
  shape: rectangle
  style.fill: "#ffcdd2"
}

完成: {
  shape: circle
  style.fill: "#c8e6c9"
}

接收订单 -> 检查库存
检查库存 -> 锁定库存: "库存充足"
检查库存 -> 通知缺货: "库存不足"
通知缺货 -> 完成

锁定库存 -> 检查支付
检查支付 -> 处理支付: "支付成功"
检查支付 -> 取消订单: "支付失败"
取消订单 -> 完成

处理支付 -> 安排发货
安排发货 -> 完成
```

**关键点**：
- 多个判断节点组成复杂流程
- 使用 `direction: down` 从上到下展示
- 不同状态使用不同颜色（成功=绿色，失败=红色）
- 所有路径最终汇聚到完成节点

### 示例 3: 多级审批流程（高级场景）
**用户需求**：多级审批流程，包含部门经理和总经理审批

**生成代码**：
```d2
direction: right

提交申请: {
  shape: circle
  style.fill: "#e3f2fd"
}

部门经理审批: {
  shape: diamond
  style.fill: "#fff9c4"
}

总经理审批: {
  shape: diamond
  style.fill: "#fff59d"
}

财务审核: {
  shape: diamond
  style.fill: "#ffe0b2"
}

执行申请: {
  shape: rectangle
  style.fill: "#c8e6c9"
}

拒绝申请: {
  shape: rectangle
  style.fill: "#ffcdd2"
}

退回修改: {
  shape: rectangle
  style.fill: "#ffe0b2"
}

完成: {
  shape: circle
  style.fill: "#c8e6c9"
}

提交申请 -> 部门经理审批: "发起申请"

部门经理审批 -> 总经理审批: "部门通过"
部门经理审批 -> 退回修改: "需要修改"
部门经理审批 -> 拒绝申请: "部门拒绝"

退回修改 -> 提交申请: "重新提交"

总经理审批 -> 财务审核: "总经理通过"
总经理审批 -> 拒绝申请: "总经理拒绝"

财务审核 -> 执行申请: "财务通过"
财务审核 -> 拒绝申请: "财务拒绝"

执行申请 -> 完成
拒绝申请 -> 完成
```

**关键点**：
- 三级审批流程（部门、总经理、财务）
- 包含退回修改的循环路径
- 使用不同颜色深度区分审批层级
- 多条路径汇聚到同一个结束节点

## 常见错误

### 错误 1: 判断节点未使用菱形
**❌ 错误写法**：
```d2
验证: { shape: rectangle }
验证 -> 成功
验证 -> 失败
```

**✅ 正确写法**：
```d2
验证: { shape: diamond }
验证 -> 成功: "通过"
验证 -> 失败: "不通过"
```

**原因**：判断/决策节点应该使用菱形，这是流程图的标准约定。

### 错误 2: 分支路径缺少标签
**❌ 错误写法**：
```d2
判断 -> 路径A
判断 -> 路径B
```

**✅ 正确写法**：
```d2
判断 -> 路径A: "条件1"
判断 -> 路径B: "条件2"
```

**原因**：判断节点的分支应该明确标注条件，让流程更清晰。

### 错误 3: 流程缺少明确的结束点
**❌ 错误写法**：
```d2
开始 -> 处理
处理 -> 判断
判断 -> 成功
判断 -> 失败
```

**✅ 正确写法**：
```d2
开始 -> 处理
处理 -> 判断
判断 -> 成功
判断 -> 失败
成功 -> 结束
失败 -> 结束
```

**原因**：完整的流程图应该有明确的起点和终点。

### 错误 4: 状态配色不清晰
**❌ 错误写法**：
```d2
成功: { style.fill: "#ffffff" }
失败: { style.fill: "#ffffff" }
```

**✅ 正确写法**：
```d2
成功: { style.fill: "#c8e6c9" }
失败: { style.fill: "#ffcdd2" }
```

**原因**：使用颜色区分不同状态能提高可读性（绿色=成功，红色=失败）。

### 错误 5: 循环路径不明确
**❌ 错误写法**：
```d2
验证 -> 处理
处理 -> 验证
```

**✅ 正确写法**：
```d2
输入 -> 验证
验证 -> 处理: "通过"
验证 -> 输入: "失败，重新输入"
```

**原因**：循环路径应该有清晰的标签说明为什么回到前面的步骤。

### 错误 6: 布局方向未设置
**❌ 错误写法**：
```d2
A -> B -> C -> D
```

**✅ 正确写法**：
```d2
direction: right
A -> B -> C -> D
```

**原因**：明确的布局方向能让流程图更符合阅读习惯。

## 生成检查清单

生成代码后，逐项检查：

- [ ] **判断节点使用菱形**：所有决策节点使用 `shape: diamond`
- [ ] **分支路径有标签**：判断节点的分支标注条件
- [ ] **流程完整**：有明确的起点和终点
- [ ] **状态配色合理**：成功用绿色，失败用红色，处理中用黄色
- [ ] **循环路径清晰**：循环有明确的标签说明
- [ ] **布局方向明确**：设置 `direction` 符合阅读习惯
- [ ] **无死循环**：所有循环都有退出条件
- [ ] **代码可渲染**：语法正确，可直接通过 Kroki 渲染

**任何检查项不通过，立即修正后重新生成**
