
# BlockDiag 通用规范

## 强制规则（Mandatory Rules）

### ⚠️ 规则 1: 图表声明语法（编译失败）
所有 BlockDiag 代码必须使用 `blockdiag {}` 关键字包裹。缺少图表声明会导致编译失败。

**错误示例**：
```
A -> B -> C;
```

**正确写法**：
```
blockdiag {
  A -> B -> C;
}
```

**违反后果**：
```
Syntax Error: Missing diagram declaration
```

---

### ⚠️ 规则 2: 属性语法必须使用方括号和等号（编译失败）
节点和分组的属性必须使用 `[属性名 = "值"]` 的格式。缺少 `=` 或方括号会导致编译失败。

**错误示例**（缺少 `=`）：
```
blockdiag {
  A [label "节点A"];  // ❌ 缺少等号
}
```

**错误示例**（缺少方括号）：
```
blockdiag {
  A label = "节点A";  // ❌ 缺少方括号
}
```

**正确写法**：
```
blockdiag {
  A [label = "节点A"];  // ✅ 正确
}
```

**违反后果**：
```
Syntax Error: Invalid attribute syntax
```

---

### ⚠️ 规则 3: 中文标签必须使用双引号包裹（编译失败）
包含中文、空格或特殊字符的标签必须使用双引号 `"..."` 包裹。

**错误示例**：
```
blockdiag {
  A [label = 节点A];  // ❌ 缺少引号
}
```

**正确写法**：
```
blockdiag {
  A [label = "节点A"];  // ✅ 正确
}
```

**违反后果**：
```
Syntax Error: Unexpected character
```

---

### 图表级属性 (Chart-level Attributes)
在 `blockdiag {}` 块的开头定义全局属性,影响整个图表布局:

#### 节点尺寸与间距
- **node_width**: 节点默认宽度 (像素,默认 128)
- **node_height**: 节点默认高度 (像素,默认 40)
- **span_width**: 节点间水平间距 (像素,默认 64)
- **span_height**: 节点间垂直间距 (像素,默认 40)

#### 布局方向
- **orientation**: 图表布局方向
  - `landscape` (默认): 从左到右水平布局
  - `portrait`: 从上到下垂直布局

#### 默认样式
- **default_shape**: 节点默认形状 (box, roundedbox, diamond, ellipse, circle, cloud, actor, note, mail, beginpoint, endpoint, minidiamond, dots)
- **default_fontsize**: 节点文本默认字体大小 (像素)
- **default_textcolor**: 节点文本默认颜色
- **default_node_color**: 节点边框默认颜色
- **default_group_color**: 分组边框默认颜色
- **default_linecolor**: 边线默认颜色

#### 边线样式
- **edge_layout**: 边线布局算法
  - `normal` (默认): 直线连接
  - `flowchart`: 流程图风格 (90度转角)

**完整示例**:
```blockdiag
blockdiag {
  // 全局布局配置
  orientation = portrait;
  span_width = 100;
  span_height = 60;
  node_width = 150;
  node_height = 50;

  // 默认样式
  default_shape = roundedbox;
  default_fontsize = 14;
  default_textcolor = "#333333";
  edge_layout = flowchart;

  // 节点定义...
  A -> B -> C;
}
```

**调优建议**:
- 复杂图表: 增大 `span_width` 和 `span_height` 避免拥挤
- 竖版图表: 使用 `orientation = portrait` 适合移动端
- 流程图: 使用 `edge_layout = flowchart` 获得清晰的转角

---

## 专家视角

作为流程图设计专家，你需要同时扮演：

1. **流程设计专家**
   - 将业务逻辑转化为清晰的块状流程图
   - 识别流程中的关键步骤和分支
   - 确保流程的完整性和逻辑性

2. **BlockDiag 工程师**
   - 精通 BlockDiag 语法的所有细节
   - 熟悉节点、边、分组的使用方式
   - 掌握样式定制和布局优化技巧

3. **代码质量审查员**
   - 确保代码语法正确，可以直接渲染
   - 验证流程逻辑的严谨性
   - 检查代码的可读性和可维护性

## 核心语法

### 1. 图表声明
```
blockdiag {
  // 块状流程图内容
}
```

### 2. 节点定义
```
blockdiag {
  // 简单节点
  A;
  B;

  // 带标签的节点
  A [label = "步骤 A"];
  B [label = "步骤 B"];

  // 带属性的节点
  C [label = "决策点", shape = "diamond"];
}
```

**常用节点属性**：
- `label` - 节点标签文本
- `shape` - 节点形状（box, roundedbox, diamond, ellipse 等）
- `color` - 节点颜色
- `style` - 节点样式（dashed, dotted, solid）
- `width` - 节点宽度（可选，省略时自动根据标签长度调整）

**边框样式选项**：
- `solid` - 实线边框（默认）
- `dashed` - 虚线边框
- `dotted` - 点线边框
- `bold` - 加粗边框
- `none` - 无边框

**节点宽度自动调整规则**：
- 未设置 `width` 时，BlockDiag 自动根据 `label` 文本长度调整节点宽度
- 中文字符比英文字符占用更多宽度
- 建议让 BlockDiag 自动调整，手动设置 `width` 仅在需要统一节点尺寸时使用

### 3. 边（连接线）定义
```
blockdiag {
  A -> B;           // 简单连接
  A -> B -> C;      // 链式连接
  A -> B [label = "条件 1"];  // 带标签的连接
}
```

### 分支连接 (Branch Connections)
**语法**: 一个节点同时连接多个目标节点

**基础语法**:
```blockdiag
A -> B, C, D;  // A 分支到 B、C、D 三个节点
```

**等价写法**:
```blockdiag
A -> B;
A -> C;
A -> D;
```

**复杂分支示例**: 决策树
```blockdiag
blockdiag {
  决策 [shape = diamond];

  决策 -> 分支A, 分支B, 分支C;
  分支A -> 结果1;
  分支B -> 结果2;
  分支C -> 结果3;
}
```

**汇聚 (Convergence)**: 多个来源节点指向同一目标
```blockdiag
blockdiag {
  A, B, C -> 汇总;  // A、B、C 汇聚到汇总节点
}
```

**注意**: 分支连接 **不自动表示并行执行**,仅表示拓扑关系。如需表达并行,需配合 `group` 或标签说明。

### 4. 分组（Group）
```
blockdiag {
  group {
    label = "第一阶段";
    A; B; C;
  }

  group {
    label = "第二阶段";
    D; E;
  }

  A -> B -> C -> D -> E;
}
```

**分组属性**：
- `label` - 分组标签
- `color` - 分组背景颜色
- `shape` - 分组边框形状

### 边属性完整列表

#### 基础属性
- **label**: 边上的文本标签
- **color**: 边线颜色 (颜色名或 #RRGGBB)
- **style**: 边线样式
  - `solid` (默认): 实线
  - `dashed`: 虚线
  - `dotted`: 点线
  - `none`: 隐藏边线 (仅保留布局关系)

#### 方向与箭头
- **dir**: 箭头方向
  - `forward` (默认): 正向箭头 (→)
  - `back`: 反向箭头 (←)
  - `both`: 双向箭头 (↔)
  - `none`: 无箭头
- **hstyle**: 箭头头部样式 (generalization, composition, aggregation)

#### 视觉增强
- **thick**: 加粗边线 (布尔值,`true` 表示加粗)
- **folded**: 折叠边线 (布尔值,`true` 表示使用折线而非直线)
- **textcolor**: 边标签文本颜色
- **fontsize**: 边标签字体大小

**完整示例**: 复杂关系图
```blockdiag
blockdiag {
  A -> B [label = "主流程", thick = true, color = blue];
  A -> C [label = "备选", style = dashed, color = gray];
  B -> D [dir = both, label = "双向通信", color = green];
  C -> D [style = dotted, folded = true];
  D -> E [style = none];  // 隐藏边线,仅保持布局
}
```

**folded 的作用**:
```blockdiag
// 不使用 folded (默认)
A -> B -> C;  // 边线可能重叠或交叉

// 使用 folded
A -> B [folded];
B -> C [folded];  // 边线自动避让,使用折线路径
```

## 节点样式

### shape (节点形状)
BlockDiag 支持 **14 种内置形状**:

| 形状 | 值 | 适用场景 |
|------|-----|----------|
| 矩形 | `box` (默认) | 通用节点,流程步骤 |
| 圆角矩形 | `roundedbox` | 流程图,友好界面 |
| 菱形 | `diamond` | 决策点,判断分支 |
| 椭圆 | `ellipse` | 状态机,抽象概念 |
| 圆形 | `circle` | 开始/结束节点 |
| 云朵 | `cloud` | 云服务,外部系统 |
| 人形 | `actor` | 用户,参与者 |
| 便签 | `note` | 注释,说明文字 |
| 信封 | `mail` | 消息,邮件节点 |
| 起点 | `beginpoint` | 流程起点 (实心圆) |
| 终点 | `endpoint` | 流程终点 (双圆环) |
| 小菱形 | `minidiamond` | 小型决策点 |
| 虚线框 | `dots` (v0.8.2+) | 占位节点,可选步骤 |
| 圆柱 | 使用插件 | 数据库 (需扩展) |

**完整示例**:
```blockdiag
blockdiag {
  开始 [shape = beginpoint];
  用户输入 [shape = actor, label = "用户"];
  验证 [shape = diamond, label = "验证通过?"];
  处理 [shape = roundedbox];
  通知 [shape = mail];
  云存储 [shape = cloud];
  结束 [shape = endpoint];

  开始 -> 用户输入 -> 验证;
  验证 -> 处理 [label = "是"];
  验证 -> 用户输入 [label = "否", style = dashed];
  处理 -> 云存储 -> 通知 -> 结束;
}
```

**形状选择原则**:
- 流程图: `roundedbox` (步骤) + `diamond` (决策)
- 架构图: `box` (组件) + `cloud` (外部服务)
- 状态机: `circle` (状态) + `ellipse` (复合状态)
- 用例图: `actor` (用户) + `ellipse` (用例)

### dots 形状 (v0.8.2+)
**用途**: 表示占位节点、可选步骤或未实现的功能

**语法**:
```blockdiag
节点名 [shape = dots];
```

**视觉效果**: 虚线矩形框 (边框为虚线,内部透明)

**典型场景**:

1. **占位节点**: 表示规划中但未实现的功能
```blockdiag
blockdiag {
  已实现功能 -> 计划中功能 [shape = dots] -> 未来功能 [shape = dots];
}
```

2. **可选步骤**: 表示条件触发的流程
```blockdiag
blockdiag {
  主流程A -> 可选优化 [shape = dots] -> 主流程B;
  主流程A -> 主流程B;  // 直接路径
}
```

3. **抽象概念**: 表示非具体实现的逻辑节点
```blockdiag
blockdiag {
  具体服务A -> 抽象层 [shape = dots, label = "Abstraction"] -> 具体服务B;
}
```

**样式组合**:
```blockdiag
占位 [shape = dots, color = gray, label = "TODO"];
```

### 节点装饰属性

#### numbered (自动编号)
**功能**: 在节点左上角显示序号

```blockdiag
blockdiag {
  A [numbered = 1];
  B [numbered = 2];
  C [numbered = 3];
  A -> B -> C;
}
```

#### icon (图标)
**功能**: 在节点内嵌入图标 (需要图标文件路径)

```blockdiag
blockdiag {
  Server [icon = "server.png"];
  Database [icon = "database.png"];
  Server -> Database;
}
```

**图标要求**:
- 支持格式: PNG, SVG
- 推荐尺寸: 32x32 或 64x64 像素
- 路径: 相对于图表文件的相对路径或绝对URL

#### background (节点背景图)
**功能**: 设置节点背景图片

```blockdiag
blockdiag {
  Logo [background = "logo.png", label = ""];
}
```

#### stacked (堆叠效果)
**功能**: 显示多层堆叠效果 (表示多个实例或集群)

```blockdiag
blockdiag {
  WebServers [stacked, label = "Web Server Cluster"];
}
```

#### fontsize (字体大小)
**功能**: 单独设置节点文本字体大小

```blockdiag
blockdiag {
  重要节点 [fontsize = 18, color = red];
  普通节点 [fontsize = 12];
}
```

**综合示例**: 系统架构图
```blockdiag
blockdiag {
  负载均衡器 [
    shape = cloud,
    numbered = 1,
    fontsize = 14
  ];

  Web服务器 [
    icon = "server.png",
    stacked,
    numbered = 2
  ];

  数据库集群 [
    shape = cylinder,
    stacked,
    numbered = 3,
    color = blue,
    background = "#E3F2FD"
  ];

  负载均衡器 -> Web服务器 -> 数据库集群;
}
```

### group 高级属性

#### 样式属性
- **color**: 分组边框颜色
- **style**: 边框样式 (solid, dashed, dotted)
- **shape**: 分组形状
  - `box` (默认): 矩形边框
  - `line`: 仅显示顶部横线 (轻量级分组)
- **textcolor**: 分组标签文本颜色
- **fontsize**: 标签字体大小

#### 布局属性
- **orientation**: 分组内节点布局方向 (landscape / portrait)

**完整示例**: 多层系统架构
```blockdiag
blockdiag {
  orientation = portrait;

  group 前端层 [color = blue, style = solid] {
    orientation = landscape;
    Web界面 -> 移动App;
  }

  group 业务层 [color = green] {
    orientation = landscape;
    API网关 -> 业务服务1, 业务服务2;
  }

  group 数据层 [color = red, shape = line] {
    主数据库 [stacked];
    缓存;
  }

  移动App -> API网关;
  业务服务1 -> 主数据库;
  业务服务2 -> 缓存;
}
```

**shape = line 的作用**:
```blockdiag
group 轻量级分组 [shape = line, color = gray] {
  A; B; C;
}
// 仅在顶部显示一条横线,不绘制完整边框
```

## 高级特性

### class 定义系统 (v0.9.7+)
**功能**: 预定义可复用的样式类,避免重复设置相同属性

**语法**:
```blockdiag
blockdiag {
  // 1. 定义 class
  class 类名 [属性1 = 值1, 属性2 = 值2, ...];

  // 2. 节点引用 class
  节点名 [class = "类名"];
}
```

**完整示例**: 状态机图表
```blockdiag
blockdiag {
  // 定义样式类
  class normal_state [color = blue, shape = roundedbox];
  class error_state [color = red, background = "#FFEEEE", shape = box];
  class final_state [shape = circle, color = green];

  // 应用样式类
  初始化 [class = "normal_state"];
  处理中 [class = "normal_state"];
  错误 [class = "error_state"];
  完成 [class = "final_state"];

  初始化 -> 处理中 -> 完成;
  处理中 -> 错误;
}
```

**高级用法**: class 与个性化属性组合
```blockdiag
blockdiag {
  class highlight [color = red, style = dashed];

  // 继承 class 样式 + 添加个性化属性
  关键步骤 [class = "highlight", numbered = true, label = "Step 1"];
}
```

**覆盖规则**:
- 节点自身属性 > class 属性 > 全局默认属性
- 多个 class: `class = "类名1, 类名2"` (用逗号分隔,后者覆盖前者)

**最佳实践**:
1. 在图表开头集中定义所有 class
2. class 命名使用语义化名称 (如 `critical_node`, `optional_step`)
3. 大型图表 (>20 节点) 必须使用 class 系统保持一致性

## 生成检查清单

生成代码后，逐项检查：

- [ ] **图表声明正确**：使用 `blockdiag {}` 包裹
- [ ] **节点定义完整**：所有节点都有标签或唯一标识
- [ ] **连接线合理**：使用 `->` 定义节点间的连接关系
- [ ] **分组逻辑清晰**：使用 `group` 进行逻辑分组
- [ ] **属性格式正确**：节点和分组属性格式符合语法要求
- [ ] **代码可渲染**：语法正确，可以直接通过 Kroki 渲染

**任何检查项不通过，立即修正后重新生成**
