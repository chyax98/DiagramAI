# ============================================
# L3 类型层模板 v1.0.0
# PacketDiag Packet (网络数据包图) 规范
# ============================================

[meta]
level = "L3"
language = "packetdiag"
diagram_type = "packet"
version = "1.0.0"
description = "PacketDiag 网络数据包图规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 可选: 类型相关的元数据
complexity = "medium"
target_length = 2000
use_cases = ["TCP 协议头", "UDP 协议头", "IP 协议头", "自定义协议报文"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "网络协议分析专家",
  "数据包结构设计师"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **colwidth 必须定义**: 必须在 `packetdiag {}` 开头定义 `colwidth`，通常使用 32（4 字节对齐）或 64（8 字节对齐）。32 位 colwidth 适合大多数协议（TCP、UDP、IP）。
  """,

  """
  **字段位范围从 0 开始**: 第一个字段必须从位 0 开始，后续字段位范围连续无间隙。例如：`0-15`, `16-31`, `32-63`。
  """,

  """
  **字段位宽符合协议标准**: 每个字段的位宽必须与协议标准一致。例如 TCP 源端口 16 位（0-15），目的端口 16 位（16-31）。
  """,

  """
  **单字段位宽使用单数**: 单比特字段使用单数，如 `106: URG`, `107: ACK`。多比特字段使用范围，如 `0-15: Source Port`。
  """,

  """
  **字段无重叠**: 所有字段位范围不能重叠。例如 `0-15` 和 `16-31` 正确，`0-15` 和 `10-25` 错误（重叠）。
  """,

  """
  **字段顺序符合协议**: 字段定义顺序必须从低位到高位，从协议头部开始到结尾。例如 TCP 协议按源端口 → 目的端口 → 序列号 → ... 的顺序。
  """,

  """
  **使用颜色区分字段类型**: 使用 `color` 属性区分不同功能的字段，提高可读性。例如地址字段用黄色 `#FFFFE0`，控制字段用橙色 `#FFE0B0`。
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别协议字段**:
  - 确定协议类型（TCP、UDP、IP 等）
  - 列出协议头部的所有字段及其位宽
  - 参考协议标准文档（RFC 或官方规范）
  - 识别字段的功能分类（地址、控制、数据等）
  """,

  """
  **2. 计算位范围**:
  - 确定 colwidth（通常 32 位）
  - 从位 0 开始，依次计算每个字段的位范围
  - 确保字段位范围连续无间隙
  - 验证总位数与协议头部长度一致
  """,

  """
  **3. 实现 PacketDiag 代码**:
  - 使用 `packetdiag {}` 包裹
  - 定义 `colwidth = 32` 和可选的 `node_height`
  - 按顺序定义所有字段及其位范围
  - 使用 `color` 属性区分不同类型字段
  - 添加必要的字段描述和注释
  """,

  """
  **4. 验证和优化**:
  - 验证字段位宽与协议标准一致
  - 检查字段位范围无重叠且连续
  - 确认字段名称清晰准确
  - 使用颜色提高字段可读性
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **协议标准符合性**:
  - 字段位宽与协议 RFC 或官方文档一致
  - 字段顺序符合协议规范
  - 字段名称使用协议标准术语
  - 所有必需字段完整定义
  """,

  """
  **位范围准确性**:
  - 字段位范围从 0 开始
  - 所有字段连续无间隙无重叠
  - 位范围计算正确（如 0-15 为 16 位）
  - 总位数与协议头部长度一致
  """,

  """
  **可读性和美观性**:
  - 字段名称清晰简洁
  - 使用颜色区分字段功能（地址、控制、标志等）
  - 关键字段视觉突出
  - 布局整洁，易于理解
  """
]

# ============================================
# Section 5: 使用场景 (Use Cases)
# ============================================

[[use_cases]]
title = "TCP 协议头结构"
scenario = """
展示标准 TCP 协议头部结构，包含源端口、目的端口、序列号、确认号、标志位等字段。
需要清晰展示 20 字节（160 位）的 TCP 头部完整结构。
"""
key_points = [
  "colwidth = 32（4 字节对齐）",
  "源端口和目的端口各 16 位（0-15 和 16-31）",
  "序列号和确认号各 32 位（32-63 和 64-95）",
  "标志位（URG、ACK、PSH、RST、SYN、FIN）各 1 位",
  "窗口大小、校验和、紧急指针各 16 位"
]

[[use_cases]]
title = "IPv4 协议头结构"
scenario = """
展示 IPv4 协议头部结构，使用颜色区分不同功能的字段。
版本和 IHL 字段用橙色，服务质量字段用绿色，地址字段用黄色。
"""
key_points = [
  "colwidth = 32, node_height = 72（增加字段高度）",
  "版本（4 位）和 IHL（4 位）用橙色 #FFE0B0",
  "DSCP 和 ECN 用绿色 #E0FFE0",
  "TTL 用红色 #FFB0B0，Protocol 用蓝色 #B0E0FF",
  "源和目的 IP 地址用黄色 #FFFFE0"
]

[[use_cases]]
title = "UDP 协议头结构"
scenario = """
展示简单的 UDP 协议头部结构，只有 8 字节（64 位）。
包含源端口、目的端口、长度、校验和四个字段。
"""
key_points = [
  "colwidth = 32",
  "源端口和目的端口各 16 位（0-15 和 16-31）",
  "长度和校验和各 16 位（32-47 和 48-63）",
  "简洁清晰，适合快速理解 UDP 结构"
]
