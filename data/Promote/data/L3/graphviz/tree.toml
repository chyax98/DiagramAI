# ============================================
# L3 类型层 - GraphViz Tree Structure (树形结构) 规范
# ============================================

[meta]
level = "L3"
language = "graphviz"
diagram_type = "tree"
version = "1.0.0"
description = "GraphViz 树形结构规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关元数据
complexity = "medium"
target_length = 2700
use_cases = ["组织架构", "文件系统", "决策树", "分类层次", "数据结构可视化"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "层次结构设计专家",
  "树形数据建模专家"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **树形结构必须使用 digraph**: 树形结构表达有向的父子关系, 必须使用 `digraph` 声明和 `->` 连接符。
  ```dot
  // ✅ 正确
  digraph Tree {
    root -> child1;
    root -> child2;
  }

  // ❌ 错误 - 树形结构不能用 graph
  graph Tree {
    root -- child1;
  }
  ```
  """,

  """
  **树形布局必须使用 TB**: 树形结构必须使用 `rankdir=TB` (从上到下) 布局, 这是树形结构的标准展示方式。
  ```dot
  // ✅ 正确
  digraph Tree {
    rankdir=TB;
    root -> child;
  }

  // ❌ 错误 - 水平布局不适合树形
  digraph Tree {
    rankdir=LR;
    root -> child;
  }
  ```
  """,

  """
  **树形结构不允许循环**: 树形结构中每个节点只有一个父节点, 不允许循环引用:
  ```dot
  // ✅ 正确 - 标准树形结构
  A -> B;
  B -> C;

  // ❌ 错误 - 存在循环
  A -> B;
  B -> C;
  C -> A;
  ```
  """,

  """
  **根节点必须突出显示**: 根节点应该用颜色或样式突出显示, 表明它是树的起点:
  ```dot
  root [label="根节点", fillcolor="#4caf50", fontcolor="white"];
  ```
  建议使用深色 (如绿色、蓝色) + 白色文字。
  """,

  """
  **同级节点必须对齐**: 兄弟节点应该使用 `{rank=same;}` 进行水平对齐, 提高可读性:
  ```dot
  root -> child1;
  root -> child2;
  root -> child3;
  {rank=same; child1; child2; child3;}
  ```
  """,

  """
  **节点形状语义化**: 根据节点类型选择合适的形状:
  - 普通节点: `shape=box, style="rounded,filled"` (圆角矩形)
  - 叶节点: `style="rounded,filled,dashed"` (虚线边框)
  - 目录: `shape=folder` (文件夹形状)
  - 文件: `shape=note` (文档形状)
  - 决策节点: `shape=diamond` (菱形)
  """,

  """
  **颜色表达层级深度**: 使用颜色深浅或渐变表达树的层级深度:
  - 根节点: 深色 (如 `#4caf50`, `#1976d2`)
  - 一级节点: 中等深度 (如 `#66bb6a`, `#42a5f5`)
  - 二级节点: 浅色 (如 `#81c784`, `#90caf9`)
  - 叶节点: 更浅或不同颜色 (如 `#fff9c4`, `#e3f2fd`)
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别树形结构要素**:
  - 根节点: 树的起点, 唯一的最顶层节点
  - 分支节点: 有子节点的中间节点
  - 叶节点: 无子节点的终端节点
  - 层级深度: 树的最大深度
  - 节点类型: 不同类型的节点 (如目录、文件、决策等)
  """,

  """
  **2. 提取父子关系**:
  - 确定每个节点的父节点
  - 确定每个节点的子节点列表
  - 确保无循环引用 (每个节点只有一个父节点)
  - 识别同级节点 (共享同一父节点)
  """,

  """
  **3. 设计节点结构**:
  - 根节点使用深色突出显示
  - 分支节点使用标准形状和颜色
  - 叶节点使用特殊样式区分 (如虚线边框)
  - 同级节点使用 `{rank=same;}` 对齐
  - 使用颜色深浅表达层级
  """,

  """
  **4. 选择布局引擎**:
  - 小规模树 (<100 节点): 使用默认 `dot` 引擎
  - 大规模树 (100-1000 节点): 使用 `sfdp` 引擎
  ```dot
  digraph LargeTree {
    layout=sfdp;
    overlap=false;
    sep="+0.2";
  }
  ```
  - 思维导图风格: 使用 `twopi` 引擎 (放射状布局)
  """,

  """
  **5. 优化树形结构**:
  - 使用 `ranksep` 和 `nodesep` 控制间距
  - 深度树 (>10 层) 使用紧凑布局 `ranksep=0.3`
  - 宽树 (每层>10 节点) 使用 `nodesep=0.3`
  - 边样式: `splines=ortho` (正交) 适合严谨风格
  - 性能优化: 超过 100 节点使用 `splines=false`
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **树形结构完整性**:
  - 有唯一的根节点
  - 无循环引用 (每个节点只有一个父节点)
  - 所有节点连接到根节点 (无孤立子树)
  - 层级清晰, 父子关系明确
  """,

  """
  **布局规范性**:
  - 使用 `rankdir=TB` 从上到下布局
  - 同级节点使用 `{rank=same;}` 对齐
  - 节点分布均匀, 避免拥挤
  - 连接线不交叉或交叉最少
  """,

  """
  **节点标识清晰**:
  - 根节点样式突出 (深色背景 + 白色文字)
  - 叶节点使用特殊样式 (虚线边框或不同颜色)
  - 节点形状表达节点类型 (目录用 folder, 文件用 note)
  - 颜色深浅表达层级深度
  """,

  """
  **树形图可读性**:
  - 节点命名简洁明了
  - 层级深度适中 (建议不超过 10 层)
  - 每层节点数量合理 (建议不超过 15 个)
  - 颜色使用语义化 (绿色=正常, 黄色=特殊, 红色=错误)
  - 大规模树使用合适的布局引擎 (sfdp)
  """
]
