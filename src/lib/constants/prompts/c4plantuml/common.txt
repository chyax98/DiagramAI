
# C4-PlantUML 语言规范

## 强制规则（Mandatory Rules）

C4-PlantUML 基于 PlantUML，必须遵循以下强制规则：

### ⚠️ 规则 1: 所有图表必须使用 @startuml 和 @enduml 包裹
这是 PlantUML 最基本的强制规则！缺少会导致渲染失败。

**错误示例**：
```plantuml
!include <C4/C4_Container>
Person(user, "用户")
```

**编译错误信息**：
```
Error: Syntax error at line 1: Unexpected content outside @startuml block
```

**正确写法**：
```plantuml
@startuml
!include <C4/C4_Container>
Person(user, "用户")
@enduml
```

### ⚠️ 规则 2: 特殊字符必须用双引号包裹
方括号 []、花括号 {}、圆括号 () 在描述文本中使用时必须用双引号包裹。

**错误示例**：
```plantuml
@startuml
!include <C4/C4_Container>
Container(api, API服务[v2], "Node.js")
@enduml
```

**编译错误信息**：
```
Error: Syntax error at line 3: Unexpected token '['
```

**正确写法**：
```plantuml
@startuml
!include <C4/C4_Container>
Container(api, "API服务[v2]", "Node.js", "RESTful API")
@enduml
```

### ⚠️ 规则 3: 必须包含完整的 C4-PlantUML 库引用（最致命错误）
**这是导致渲染失败的首要原因！** 不完整的 `!include` 会导致 PlantUML 无法识别 C4 关键字。

**❌ 错误示例 - 不完整的 include**：
```plantuml
@startuml
!include  <-- 缺少库文件路径，导致渲染失败

title 系统上下文图
Person(customer, "顾客", "在线购物用户")
System(ecommerce, "电商系统")
@enduml
```

**Kroki 实际错误信息**：
```
Error 400: cannot include  (line: 1)
```

**✅ 正确写法（两种官方支持的格式）**：

**方式 1 - 使用标准库短格式（推荐，适用于支持 PlantUML 标准库的环境）**：
```plantuml
@startuml
!include <C4/C4_Context>

title 系统上下文图
Person(customer, "顾客", "在线购物用户")
System(ecommerce, "电商系统")
@enduml
```

**方式 2 - 使用 HTTPS URL（在线环境，始终最新）**：
```plantuml
@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

title 系统上下文图
Person(customer, "顾客", "在线购物用户")
System(ecommerce, "电商系统")
@enduml
```

**⚠️ 根据图表类型选择正确的库文件**：
| 图表类型 | 标准库短格式 | HTTPS URL |
|---------|------------|-----------|
| Context 图 | `!include <C4/C4_Context>` | `!include https://raw.githubusercontent.com/.../C4_Context.puml` |
| Container 图 | `!include <C4/C4_Container>` | `!include https://raw.githubusercontent.com/.../C4_Container.puml` |
| Component 图 | `!include <C4/C4_Component>` | `!include https://raw.githubusercontent.com/.../C4_Component.puml` |
| Dynamic 图 | `!include <C4/C4_Dynamic>` | `!include https://raw.githubusercontent.com/.../C4_Dynamic.puml` |
| Deployment 图 | `!include <C4/C4_Deployment>` | `!include https://raw.githubusercontent.com/.../C4_Deployment.puml` |

**注意**: Kroki 默认在 SECURE 模式下运行,可能阻止外部 URL include。优先使用**标准库短格式**。

### ⚠️ 规则 4: 手写风格必须使用 !option 指令（Kroki 兼容性）
**重要**: 旧语法 `skinparam handwritten true` 在 Kroki 环境下已废弃，必须使用新语法。

**错误示例**：
```plantuml
@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
skinparam handwritten true
Person(user, "用户")
@enduml
```

**Kroki 错误信息**：
```
Warning: 'skinparam handwritten' is deprecated, use '!option handwritten' instead
```

**正确写法**：
```plantuml
@startuml
!option handwritten false
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
Person(user, "用户")
@enduml
```

## 核心概念

C4 模型（Context, Container, Component, Code）是一种用于可视化软件架构的分层方法。C4-PlantUML 是 PlantUML 的扩展库，专门用于绘制 C4 模型图表。

### C4 模型四个层次

1. **Level 1 - System Context**: 系统与外部实体的交互关系
2. **Level 2 - Container**: 系统内部的高层技术构成（应用、数据库、服务等）
3. **Level 3 - Component**: 容器内部的组件和职责划分
4. **Level 4 - Code**: 代码级别的类图（通常不在 C4-PlantUML 中实现）

## 基础语法

### 图表声明

所有 C4-PlantUML 图表必须包含以下结构：

```plantuml
@startuml
' 使用标准库短格式（推荐）
!include <C4/C4_Container>

' 推荐添加布局宏
LAYOUT_WITH_LEGEND()

' 图表标题
title 容器架构图

' 图表内容...

@enduml
```

**⚠️ 根据图表类型选择正确的库文件**：
- **Context 图**: `!include <C4/C4_Context>`
- **Container 图**: `!include <C4/C4_Container>`
- **Component 图**: `!include <C4/C4_Component>`
- **Dynamic 图**: `!include <C4/C4_Dynamic>`
- **Deployment 图**: `!include <C4/C4_Deployment>`

### 元素定义

#### 人员（Person）
```plantuml
Person(alias, "显示名称", "可选描述")
Person_Ext(alias, "外部人员", "外部用户描述")
```

#### 系统（System）
```plantuml
System(alias, "系统名称", "系统描述")
System_Ext(alias, "外部系统", "外部系统描述")
System_Boundary(alias, "边界名称") {
    ' 内部容器...
}
```

**⚠️ 边界嵌套规则**:
- `Enterprise_Boundary` 可包含: System, System_Boundary
- `System_Boundary` 可包含: Container, ContainerDb, ContainerQueue
- `Container_Boundary` 可包含: Component, ComponentDb, ComponentQueue
- 不允许同类边界嵌套 (如 System_Boundary 内不能再嵌套 System_Boundary)
- 如需通用分组,使用 `Boundary(alias, "标签")` (无类型限制)

**示例 - 企业级边界嵌套**:
```plantuml
@startuml
!include <C4/C4_Container>

Enterprise_Boundary(enterprise, "企业边界") {
    System_Boundary(system1, "系统A") {
        Container(web1, "Web应用", "React")
        ContainerDb(db1, "数据库", "PostgreSQL")
    }

    System_Boundary(system2, "系统B") {
        Container(api2, "API服务", "Node.js")
    }
}
@enduml
```

#### 容器（Container）
```plantuml
Container(alias, "容器名称", "技术栈", "容器描述")
Container_Boundary(alias, "边界名称") {
    ' 内部组件...
}
```

**容器专用变体**:
```plantuml
ContainerDb(alias, "数据库名称", "数据库类型", "数据描述")
ContainerQueue(alias, "队列名称", "队列技术", "队列描述")
```

**说明**: 使用专用宏会自动应用对应的数据库或队列图标,增强视觉识别度。

**示例**:
```plantuml
ContainerDb(userDb, "用户数据库", "PostgreSQL", "存储用户信息")
ContainerQueue(msgQueue, "消息队列", "RabbitMQ", "异步任务处理")
```

#### 组件（Component）
```plantuml
Component(alias, "组件名称", "技术栈", "组件描述")
```

**组件专用变体**:
```plantuml
ComponentDb(alias, "数据组件", "技术", "数据访问描述")
ComponentQueue(alias, "消息组件", "技术", "消息处理描述")
```

**说明**: 使用专用宏会自动应用对应的数据库或队列图标,增强视觉识别度。

**示例**:
```plantuml
ComponentDb(userRepo, "用户仓储", "JPA/Hibernate", "用户数据访问层")
ComponentQueue(eventHandler, "事件处理器", "Spring AMQP", "处理异步事件")
```

### 关系定义

#### 基础关系
```plantuml
Rel(from, to, "描述", "可选技术")
Rel_Back(from, to, "反向关系", "技术")
```

#### 方向关系
```plantuml
Rel_U(from, to, "向上", "技术")    ' Upward
Rel_D(from, to, "向下", "技术")    ' Downward
Rel_L(from, to, "向左", "技术")    ' Left
Rel_R(from, to, "向右", "技术")    ' Right
```

#### 带序号关系（动态图专用）

```plantuml
RelIndex(1, from, to, "描述")
RelIndex(2, from, to, "描述", "技术")
```

**使用场景**: C4 动态图 (Dynamic Diagram),用于展示时序交互流程,序号表示执行顺序。

**示例**:
```plantuml
@startuml
!include <C4/C4_Dynamic>

title 登录流程动态图

Person(user, "用户")
Container(web, "Web应用", "React")
Container(api, "API服务", "Node.js")
ContainerDb(db, "数据库", "PostgreSQL")

RelIndex(1, user, web, "输入账号密码")
RelIndex(2, web, api, "POST /login", "HTTPS/JSON")
RelIndex(3, api, db, "验证凭证", "SQL")
RelIndex(4, db, api, "返回用户信息")
RelIndex(5, api, web, "返回JWT令牌", "JSON")
RelIndex(6, web, user, "跳转到首页")
@enduml
```

**注意**: `RelIndex` 仅在 `!include <C4/C4_Dynamic>` 图表中可用,普通图表请使用 `Rel` 系列。

### 布局和样式

#### 布局方向
```plantuml
LAYOUT_TOP_DOWN()           ' 从上到下（默认方向）
LAYOUT_LEFT_RIGHT()         ' 从左到右
LAYOUT_LANDSCAPE()          ' 横向布局
LAYOUT_WITH_LEGEND()        ' 推荐：自动布局 + 底部图例
```

#### 精确布局控制

当自动布局不满足需求时,可使用以下宏进行精确控制：

```plantuml
' 元素位置控制
Lay_U(from, to)   ' from 在 to 上方
Lay_D(from, to)   ' from 在 to 下方
Lay_L(from, to)   ' from 在 to 左侧
Lay_R(from, to)   ' from 在 to 右侧

' 距离控制
Lay_Distance(from, to, 2)  ' 设置距离为 2 个单位
```

**使用场景**: 当自动布局不满足需求时,用于精确控制元素位置和间距。

**示例**:
```plantuml
@startuml
!include <C4/C4_Container>

Container(web, "Web应用", "React")
Container(api, "API", "Node.js")
Container(db, "数据库", "PostgreSQL")

' 强制 web 在 api 左侧
Lay_L(web, api)
' 强制 db 在 api 下方,距离 2 单位
Lay_D(api, db)
Lay_Distance(api, db, 2)
@enduml
```

#### 显示图例
C4-PlantUML 提供两种图例显示方式：

```plantuml
' 方式 1: 底部图例（增加额外空白）
SHOW_LEGEND()               ' 在底部右侧显示图例

' 方式 2: 浮动图例（节省空间，推荐）
SHOW_FLOATING_LEGEND()      ' 在绘图区域内显示图例，复用现有空白

' 方式 3: 组合宏（推荐，自动包含图例）
LAYOUT_WITH_LEGEND()        ' 自动处理布局和图例

' 隐藏图例
HIDE_LEGEND()               ' 不显示图例
```

**最佳实践**: 使用 `LAYOUT_WITH_LEGEND()` 或 `SHOW_FLOATING_LEGEND()` 以获得更紧凑的布局。

### 样式定制

C4-PlantUML 支持通过主题和 skinparam 定制图表样式。

#### 预定义主题

C4-PlantUML 提供多种官方主题:

```plantuml
@startuml
!include <C4/C4_Container>

' 应用主题（在元素定义之前）
!theme C4_blue        ' 蓝色主题（默认）
!theme C4_brown       ' 棕色主题
!theme C4_green       ' 绿色主题
!theme C4_gray        ' 灰色主题

LAYOUT_WITH_LEGEND()

Person(user, "用户")
Container(web, "Web应用", "React")
@enduml
```

**注意**: 主题必须在 `!include` 之后、元素定义之前应用。

#### 自定义颜色

通过 `skinparam` 定制元素颜色:

```plantuml
@startuml
!include <C4/C4_Container>

' 全局背景色
skinparam backgroundColor #FEFEFE

' 边界颜色
skinparam rectangleBorderColor #2E4057
skinparam rectangleBackgroundColor #F0F4F7

' 关系箭头
skinparam arrowColor #666666

Person(user, "用户")
System(app, "系统")
@enduml
```

#### 自定义字体

```plantuml
@startuml
!include <C4/C4_Container>

' 设置全局字体
skinparam defaultFontName "Microsoft YaHei"
skinparam defaultFontSize 14

' 设置标题字体
skinparam titleFontSize 20
skinparam titleFontStyle bold

title 系统架构图
@enduml
```

#### 元素级样式定制

使用 C4-PlantUML 宏定制特定元素颜色:

```plantuml
@startuml
!include <C4/C4_Container>

' 使用带颜色参数的宏
AddElementTag("critical", $bgColor="#FF6B6B", $borderColor="#C92A2A")
AddElementTag("external", $bgColor="#E3F2FD", $borderColor="#1976D2")

Person(user, "用户")
Container(web, "Web应用", "React", $tags="critical")
System_Ext(payment, "支付系统", $tags="external")
@enduml
```

**常用标签参数**:
- `$bgColor`: 背景色
- `$borderColor`: 边框色
- `$fontColor`: 字体颜色

#### 关系样式定制

```plantuml
@startuml
!include <C4/C4_Container>

' 定义关系标签
AddRelTag("async", $lineColor="#FFA500", $lineStyle="DashedLine")
AddRelTag("sync", $lineColor="#2E7D32", $lineStyle="BoldLine")

Person(user, "用户")
Container(web, "Web应用", "React")
Container(queue, "消息队列", "RabbitMQ")

Rel(user, web, "访问", "HTTPS", $tags="sync")
Rel(web, queue, "发送消息", "AMQP", $tags="async")
@enduml
```

**关系样式参数**:
- `$lineColor`: 线条颜色
- `$lineStyle`: 线条样式 (SolidLine, DashedLine, DottedLine, BoldLine)
- `$textColor`: 标签文字颜色

### Sprite 图标支持

C4-PlantUML 支持为元素添加图标,增强视觉表达。

#### 使用 PlantUML 标准库图标

PlantUML 提供丰富的图标库 (AWS, Azure, GCP, Kubernetes 等):

```plantuml
@startuml
!include <C4/C4_Container>
!include <aws/ApplicationServices/AmazonAPIGateway/AmazonAPIGateway>
!include <kubernetes/k8s-sprites-unlabeled-25pct>

LAYOUT_WITH_LEGEND()

Person(user, "用户")
Container(api, "API网关", "AWS API Gateway", $sprite="AmazonAPIGateway")
Container(k8s, "K8s集群", "Kubernetes", $sprite="k8s")

Rel(user, api, "访问")
Rel(api, k8s, "路由")
@enduml
```

**常用图标库**:
- AWS: `!include <aws/...>`
- Azure: `!include <azure/...>`
- GCP: `!include <gcp/...>`
- Kubernetes: `!include <kubernetes/...>`
- Material Design: `!include <material/...>`

#### 自定义 Sprite 图标

创建自定义单色 Sprite:

```plantuml
@startuml
!include <C4/C4_Container>

' 定义自定义 sprite (16x16)
sprite $customIcon [16x16/16] {
0000000000000000
0001111111111000
0010000000001000
0010000110001000
0010001001001000
0010000110001000
0010000000001000
0001111111111000
0000000000000000
}

Container(app, "自定义应用", "技术栈", $sprite="customIcon")
@enduml
```

#### 使用图标 URL

直接使用在线图标:

```plantuml
@startuml
!include <C4/C4_Container>

!define ICONURL https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master

!includeurl ICONURL/devicons/react.puml
!includeurl ICONURL/devicons/nodejs.puml

Container(web, "前端应用", "React", $sprite="react")
Container(api, "后端服务", "Node.js", $sprite="nodejs")
@enduml
```

**图标资源库**:
- PlantUML Icon Font Sprites: https://github.com/tupadr3/plantuml-icon-font-sprites
- Font Awesome: DevIcons, FontAwesome, Material Design Icons

#### 最佳实践

**图标使用原则**:
- 仅为关键技术组件添加图标
- 避免过度使用导致视觉混乱
- 图标应与技术栈相匹配
- 优先使用标准库图标 (无需外部依赖)

**示例 - 合理使用图标**:
```plantuml
@startuml
!include <C4/C4_Container>
!include <aws/Storage/AmazonS3/AmazonS3>
!include <aws/Database/AmazonRDS/AmazonRDS>

LAYOUT_WITH_LEGEND()

Person(user, "用户")
Container(web, "Web应用", "React")
Container(api, "API服务", "Node.js")
ContainerDb(db, "数据库", "PostgreSQL", $sprite="AmazonRDS")
ContainerDb(storage, "对象存储", "S3", $sprite="AmazonS3")

Rel(user, web, "访问")
Rel(web, api, "调用")
Rel(api, db, "读写")
Rel(api, storage, "上传/下载")
@enduml
```

## 命名规范

### 元素别名（alias）
- 使用有意义的英文简称
- 采用驼峰命名法或下划线命名法
- 示例：`webApp`, `authService`, `order_db`

### 显示名称
- 使用清晰的中文或英文描述
- 放在双引号中
- 示例：`"Web 应用"`, `"认证服务"`, `"订单数据库"`

### 技术栈标注
- 明确指出使用的技术和框架
- 示例：`"React, Next.js"`, `"Node.js, Express"`, `"PostgreSQL"`

## C4 模型最佳实践

### 1. 保持层次一致性
- 每个图表只聚焦一个抽象层次
- **Context 图**：不包含 Container 或 Component 细节
- **Container 图**：不深入到组件级别
- **Component 图**：不展示代码实现

### 2. 明确边界
- 使用 `System_Boundary` 或 `Container_Boundary` 清晰划分系统边界
- 边界内的元素属于同一个系统或容器

### 3. 技术标注完整
- Container 和 Component 必须包含技术栈信息
- 关系描述应包含通信协议或格式
- 示例：`"REST/JSON"`, `"gRPC"`, `"SQL/JDBC"`

### 4. 合理粒度
- Context 图：3-10 个系统
- Container 图：5-15 个容器
- Component 图：5-20 个组件
- 过多元素应考虑拆分为多个图表

## 常见错误

### ⚠️ 错误 1: 缺少或不完整的 include 声明（最常见！）
❌ **错误写法 1 - 完全缺少 include**：
```plantuml
@startuml
Person(user, "用户")
System(app, "应用")
@enduml
```

❌ **错误写法 2 - 不完整的 include（真实失败案例）**：
```plantuml
@startuml
!include  <-- 缺少库文件路径，导致 "Error 400: cannot include"
Person(customer, "顾客")
System(ecommerce, "电商系统")
@enduml
```

✅ **正确写法**：
```plantuml
@startuml
' 使用标准库短格式（推荐）
!include <C4/C4_Container>

' 推荐添加布局宏
LAYOUT_WITH_LEGEND()

Person(user, "用户")
System(app, "应用")
@enduml
```

**原因**：C4-PlantUML 元素定义来自于外部库，必须先 include 才能使用。`!include` 后面**绝对不能为空**。

### 错误 2: 混用不同抽象层次
❌ **错误写法**：在 Context 图中使用 Component
```plantuml
@startuml
!include <C4/C4_Container>

Person(user, "用户")
System(app, "应用")
Component(ctrl, "控制器", "Spring MVC")  ' 错误：Context图不应有Component
@enduml
```

✅ **正确写法**：
```plantuml
@startuml
!include <C4/C4_Container>

Person(user, "用户")
System(app, "应用系统")
System_Ext(payment, "支付系统")
@enduml
```

**原因**：C4 模型强调层次分离，每个图表应聚焦单一抽象层次。

### 错误 3: 图例使用不当
❌ **不推荐的写法 - 使用底部图例增加额外空白**：
```plantuml
@startuml
!include <C4/C4_Context>

Person(customer, "顾客")
System(ecommerce, "电商系统")

LAYOUT_TOP_DOWN()
SHOW_LEGEND()  <-- 会在底部增加额外空白
@enduml
```

✅ **推荐写法 - 使用浮动图例节省空间**：
```plantuml
@startuml
!include <C4/C4_Context>

' 推荐方式 1：使用组合宏
LAYOUT_WITH_LEGEND()

Person(customer, "顾客")
System(ecommerce, "电商系统")
@enduml
```

✅ **推荐写法 - 或单独使用浮动图例**：
```plantuml
@startuml
!include <C4/C4_Context>

LAYOUT_TOP_DOWN()
SHOW_FLOATING_LEGEND()  <-- 浮动图例，复用现有空白

Person(customer, "顾客")
System(ecommerce, "电商系统")
@enduml
```

**原因**：`SHOW_FLOATING_LEGEND()` 在绘图区域内显示图例，比 `SHOW_LEGEND()` 更节省空间。两者都是有效的，但浮动图例更推荐。

### 错误 4: 缺少技术栈标注
❌ **错误写法**：
```plantuml
Container(web, "Web应用")  ' 缺少技术栈
```

✅ **正确写法**：
```plantuml
Container(web, "Web应用", "React, TypeScript", "前端应用")
```

**原因**：C4 模型的 Container 和 Component 层必须包含技术栈信息，这是其核心价值。

### 错误 5: 边界嵌套违规
❌ **错误写法 - 同类边界嵌套**：
```plantuml
@startuml
!include <C4/C4_Container>

System_Boundary(outer, "外层系统") {
    System_Boundary(inner, "内层系统") {  ' 错误：System_Boundary 不能嵌套
        Container(web, "Web应用", "React")
    }
}
@enduml
```

❌ **错误写法 - 跨层嵌套**：
```plantuml
@startuml
!include <C4/C4_Component>

Container_Boundary(container, "容器") {
    System(sys, "系统")  ' 错误：Container_Boundary 不能包含 System
}
@enduml
```

✅ **正确写法**：
```plantuml
@startuml
!include <C4/C4_Container>

' 使用 Enterprise_Boundary 包含多个系统
Enterprise_Boundary(enterprise, "企业边界") {
    System_Boundary(system1, "系统A") {
        Container(web1, "Web应用", "React")
    }

    System_Boundary(system2, "系统B") {
        Container(api2, "API服务", "Node.js")
    }
}
@enduml
```

**原因**：C4-PlantUML 严格限制边界嵌套规则,防止层次混乱。

### 错误 6: 图表类型与 include 不匹配
❌ **错误写法 - 图表类型错误**：
```plantuml
@startuml
!include <C4/C4_Context>  ' Context 库

' 使用了 Component 元素,但 include 是 Context
Component(ctrl, "控制器", "Spring MVC")
@enduml
```

❌ **错误写法 - 动态图未使用 Dynamic 库**：
```plantuml
@startuml
!include <C4/C4_Container>  ' 错误：应使用 C4_Dynamic

RelIndex(1, user, web, "访问")  ' RelIndex 需要 Dynamic 库
@enduml
```

✅ **正确写法**：
```plantuml
@startuml
!include <C4/C4_Dynamic>  ' 正确：使用 Dynamic 库

title 登录流程动态图

Person(user, "用户")
Container(web, "Web应用", "React")

RelIndex(1, user, web, "输入账号密码")
RelIndex(2, web, user, "显示首页")
@enduml
```

**原因**：不同 C4 图表类型需要对应的库文件,否则会导致元素或宏无法识别。

**图表类型与 include 对应关系**:
| 图表类型 | 必需 include | 可用元素 |
|---------|-------------|---------|
| Context 图 | `<C4/C4_Context>` | Person, System, System_Ext, System_Boundary |
| Container 图 | `<C4/C4_Container>` | Person, System, Container, ContainerDb, ContainerQueue, System_Boundary, Container_Boundary |
| Component 图 | `<C4/C4_Component>` | Container, Component, ComponentDb, ComponentQueue, Container_Boundary |
| Dynamic 图 | `<C4/C4_Dynamic>` | Person, System, Container, Component + RelIndex |
| Deployment 图 | `<C4/C4_Deployment>` | Deployment_Node, Container, ContainerDb, ContainerQueue |

---

## ⚠️ 核心检查清单（每次生成代码前必查！）

### ✅ 必须包含的元素（缺一不可）

1. **完整的 `@startuml` 和 `@enduml` 包裹**
   ```plantuml
   @startuml
   ' 代码...
   @enduml
   ```

2. **完整的 C4 库引用（标准库短格式）**
   ```plantuml
   !include <C4/C4_Context>
   ```
   ⚠️ **最常见错误**: `!include` 后面为空，导致 "Error 400: cannot include"

3. **布局宏（推荐使用）**
   ```plantuml
   LAYOUT_WITH_LEGEND()
   ```
   或分别指定:
   ```plantuml
   LAYOUT_TOP_DOWN()
   SHOW_FLOATING_LEGEND()
   ```

### ✅ 完整的正确示例模板

**Context 图标准模板**:
```plantuml
@startuml
!include <C4/C4_Context>

LAYOUT_WITH_LEGEND()

title 系统上下文图 - 示例系统

Person(user, "用户", "系统使用者")
System(mainSystem, "核心系统", "主要业务功能")
System_Ext(externalSystem, "外部系统", "第三方服务")

Rel(user, mainSystem, "使用", "HTTPS")
Rel(mainSystem, externalSystem, "调用", "API/JSON")
@enduml
```

**Container 图标准模板**:
```plantuml
@startuml
!include <C4/C4_Container>

LAYOUT_WITH_LEGEND()

title 容器架构图 - 示例系统

Person(user, "用户", "系统使用者")

System_Boundary(system, "系统边界") {
    Container(web, "Web 应用", "React, TypeScript", "前端界面")
    Container(api, "API 服务", "Node.js, Express", "后端接口")
    ContainerDb(db, "数据库", "PostgreSQL", "持久化存储")
}

Rel(user, web, "访问", "HTTPS")
Rel(web, api, "调用", "REST/JSON")
Rel(api, db, "读写", "SQL/JDBC")
@enduml
```

### 🚫 绝对避免的错误写法

1. ❌ `!include` 后面为空（最致命错误！）
2. ❌ 缺少 `@startuml` 或 `@enduml`
3. ❌ 在 Context 图中混入 Container/Component 元素
4. ❌ Container 或 Component 缺少技术栈参数
