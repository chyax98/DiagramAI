# ============================================
# L3 类型层 - Mermaid ER Diagram v1.0.0
# ============================================

[meta]
level = "L3"
language = "mermaid"
diagram_type = "er"
version = "1.0.0"
description = "Mermaid ER 图（实体关系图）规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 可选元数据
complexity = "medium"
target_length = 2700
use_cases = ["数据库设计", "实体关系建模", "数据建模", "系统数据架构"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "数据库设计专家 - 熟悉实体关系模型设计原则",
  "Mermaid ER 工程师 - 精通关系基数和属性约束定义"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **图表声明**: 必须使用 `erDiagram` 关键字开始 ER 图
  """,

  """
  **实体命名规范**: 实体名称推荐使用大写:
  - 推荐: `CUSTOMER`, `ORDER`, `PRODUCT`（符合数据库表命名规范）
  - 虽然小写可以渲染，但大写更规范
  - 实体至少应有一个属性（通常是主键）
  - 避免空实体定义（会导致渲染异常）
  """,

  """
  **属性定义规范**: 属性必须指定类型:
  - 格式: `类型 名称 约束 "注释"`
  - 类型: `string`, `int`, `bigint`, `decimal`, `date`, `datetime`, `boolean`, `text`, `blob` 等
  - 约束: `PK`（主键）、`FK`（外键）、`UK`（唯一键）、`NN`（非空）
  - 注释: 可选，用双引号包裹（如 `"订单总额"`）
  - 每个实体至少有一个 `PK` 主键
  """,

  """
  **关系基数符号**: Mermaid ER 图使用特定的基数符号:
  - `||`: 有且仅有一（Exactly One）- 1
  - `|o`: 零或一（Zero or One）- 0..1
  - `}|`: 一或多（One or More）- 1..N
  - `}o`: 零或多（Zero or More）- 0..N
  - 不支持 `1--N` 表示法，必须使用上述符号
  """,

  """
  **关系语法**: 关系定义格式 `实体1 左基数--右基数 实体2 : "关系名"`:
  - 一对一: `A ||--|| B`（如: 用户 - 身份证）
  - 一对多: `A ||--o{ B`（如: 部门 - 员工）
  - 多对多: `A }o--o{ B`（如: 学生 - 课程）
  - 关系标签: 使用双引号处理特殊字符（如 `"has (many)"`）
  - 实线表示"必须"关系，虚线表示"可选"关系（如 `}o..o{`）
  """,

  """
  **关系方向和逻辑**: 关系基数要符合实际业务逻辑:
  - 从左到右读: 实体1 [左基数] [动词] 实体2 [右基数]
  - 示例: `CUSTOMER ||--o{ ORDER : places`
    - 读作: 一个客户 (||) 下 零到多个 (o{) 订单
    - 反向读: 一个订单 (||) 属于 有且仅有一个客户
  - 避免"一"和"多"的方向搞反
  """,

  """
  **多对多关系处理**: 多对多关系通过中间表实现:
  - 创建中间表连接两个实体
  - 中间表包含两个外键（指向两个实体的主键）
  - 示例: `POST }o--o{ TAG` 通过 `POST_TAG` 实现
    - `POST_TAG }|--|| POST`
    - `POST_TAG }|--|| TAG`
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别实体和属性**:
  - 根据业务需求识别核心实体（如用户、订单、商品）
  - 定义每个实体的属性（字段）
  - 确定每个属性的类型（string, int, date 等）
  - 标记主键 (`PK`)、外键 (`FK`)、唯一键 (`UK`)
  """,

  """
  **2. 设计实体关系**:
  - **一对一**: 如用户 - 个人资料（`||--||`）
  - **一对多**: 如部门 - 员工（`||--o{`）
  - **多对多**: 如学生 - 课程（`}o--o{`，需要中间表）
  - 确定关系的基数和方向
  - 标注关系的业务含义（使用 `: "关系名"`）
  """,

  """
  **3. 定义属性约束**:
  - 标记主键 (`PK`): 每个实体至少有一个主键
  - 标记外键 (`FK`): 标注外键关系（如 `customer_id FK "关联客户"`）
  - 标记唯一键 (`UK`): 如 `email UK`
  - 添加注释说明: 如 `total_amount "订单总额"`
  """,

  """
  **4. 处理多对多关系**:
  - 创建中间表（如 `ORDER_ITEM` 连接 `ORDER` 和 `PRODUCT`）
  - 中间表包含两个外键
  - 定义中间表与两个实体的关系（通常是 `}|--||`）
  """,

  """
  **5. 优化 ER 图结构**:
  - 确保关系基数符合业务逻辑
  - 关系方向清晰（从"一"方指向"多"方）
  - 实体命名规范（推荐大写）
  - 属性类型完整，约束明确
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **实体定义完整性**:
  - 实体名称规范（推荐大写，如 `CUSTOMER`）
  - 每个实体至少有一个属性
  - 每个实体至少有一个 `PK` 主键
  - 属性类型完整（所有属性都指定了类型）
  - 避免空实体定义
  """,

  """
  **关系基数正确性**:
  - 关系基数符号正确（`||`, `}o`, `}|` 等）
  - 关系方向符合业务逻辑（一对多/多对多）
  - 多重性格式正确（使用引号包裹，如 `"1"`, `"*"`）
  - 关系标签清晰（使用双引号处理特殊字符）
  """,

  """
  **属性约束规范**:
  - 主键使用 `PK` 标记
  - 外键使用 `FK` 标记
  - 唯一键使用 `UK` 标记
  - 约束符号正确（不使用 `PRIMARY KEY`, `UNIQUE` 等完整词）
  """,

  """
  **多对多关系处理**:
  - 多对多关系通过中间表实现
  - 中间表包含两个外键（`FK`）
  - 中间表与两个实体的关系明确（通常是 `}|--||`）
  """
]
