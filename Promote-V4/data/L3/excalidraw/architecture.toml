# ============================================
# L3 类型层 - Excalidraw Architecture (架构图) v1.0.0
# 手绘风格的系统架构图,展示技术栈和组件关系
# ============================================

[meta]
level = "L3"
language = "excalidraw"
diagram_type = "architecture"
version = "1.0.0"
description = "Excalidraw 架构图规范 - 系统架构和技术栈"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关元数据
complexity = "high"
target_length = 3200
use_cases = ["系统架构设计", "微服务架构", "技术栈展示", "部署架构", "网络拓扑"]

# ============================================
# Section 1: D 角色定义
# ============================================

[D_role]
additional_roles = [
  "系统架构师 - 将复杂技术架构转化为清晰的视觉表达,合理组织层次结构和模块划分",
  "信息可视化专家 - 使用颜色编码区分架构层级,使用箭头样式区分通信类型"
]

# ============================================
# Section 2: E 约束条件
# ============================================

[E_constraints]
items = [
  """
  **分层架构规范 [核心约束]**: 系统架构必须清晰展示层次结构:
  - **展示层** (顶部 y=100-200): 前端、用户界面,使用蓝色系 `#1971c2`, `#e7f5ff`
  - **业务层** (中部 y=300-400): 后端服务、业务逻辑,使用绿色系 `#2f9e44`, `#d3f9d8`
  - **数据层** (底部 y=500-600): 数据库、缓存、存储,使用橙色系 `#f08c00`, `#fff4e6`
  - **中间件层** (侧边或独立): 网关、消息队列,使用紫色系 `#5f3dc4`, `#e5dbff`
  - 不同层级使用不同的 y 坐标区间,层级之间有明显的视觉分隔
  """,

  """
  **形状语义规范**: 使用不同形状表达不同类型的架构组件:
  - **服务/模块**: 矩形 (rectangle),宽 200-250px,高 100-200px,标注服务名称
  - **数据库/存储**: 菱形 (diamond),宽高 100-120px,标注数据库类型 (MySQL, Redis)
  - **外部系统**: 椭圆 (ellipse),宽 140-180px,高 80-100px,标注第三方服务
  - **网关/代理**: 矩形,使用紫色系,标注网关类型 (Nginx, Kong)
  - **负载均衡**: 矩形,使用灰色系,标注 LB 或 Load Balancer
  """,

  """
  **箭头样式和协议标注 [必需]**: 必须使用不同的箭头样式表达不同类型的通信:
  - **主要业务流**: `strokeStyle: "solid"` (实线),标注 "HTTP", "gRPC", "REST API"
  - **API 调用**: `strokeStyle: "dashed"` (虚线),标注 "API", "RPC", "Gateway"
  - **数据库连接**: `strokeStyle: "dotted"` (点线),标注 "SQL", "NoSQL", "Redis"
  - **消息传递**: `strokeStyle: "dashed"`,标注 "Kafka", "RabbitMQ", "WebSocket"
  - 所有箭头必须有 `label.text` 标注通信协议或关系类型
  """,

  """
  **颜色编码系统**: 使用统一的颜色编码区分架构层级和组件类型:
  - **蓝色系**: 前端、客户端、用户界面
    - 边框: `#1971c2`, 背景: `#e7f5ff`
  - **绿色系**: 后端、服务端、业务逻辑
    - 边框: `#2f9e44`, 背景: `#d3f9d8`
  - **橙色系**: 数据库、缓存、存储
    - 边框: `#f08c00`, 背景: `#fff4e6`
  - **紫色系**: 网关、代理、中间件
    - 边框: `#5f3dc4`, 背景: `#e5dbff`
  - **灰色系**: 负载均衡、基础设施
    - 边框: `#495057`, 背景: `#e9ecef`
  """,

  """
  **手绘风格控制**: 架构图使用适度的手绘效果保持专业感:
  - `roughness: 0` (精确线条,推荐用于正式架构图) 或 `roughness: 1` (标准手绘)
  - `fillStyle: "hachure"` (斜线填充) 或 "solid" (实心填充)
  - `fontFamily: 1` (手绘字体) 或 `fontFamily: 3` (代码字体,更适合技术架构)
  - `strokeWidth: 2` (明显的边框线条)
  - 保持所有元素的手绘风格一致
  """
]

# ============================================
# Section 3: P 流程规范
# ============================================

[P_process]
items = [
  """
  **1. 识别架构层级和组件**: 从用户描述中提取架构要素:
  - **展示层**: Web 前端 (React, Vue), 移动端 (iOS, Android), 桌面端 (Electron)
  - **网关层**: API Gateway, Nginx, Kong
  - **业务层**: 用户服务, 订单服务, 支付服务 (微服务架构)
  - **数据层**: MySQL, PostgreSQL, MongoDB, Redis, Elasticsearch
  - **中间件**: Kafka, RabbitMQ, Redis (缓存), Memcached
  - **外部系统**: 第三方 API, 云服务 (AWS, Azure), 支付网关
  """,

  """
  **2. 设计分层布局**: 规划清晰的层次结构 (从上到下):
  - **顶层 (y=100-200)**: 展示层组件 (前端、客户端)
    - 水平排列: Web (x=100), iOS (x=300), Android (x=500)
  - **网关层 (y=250-300)**: API Gateway, Load Balancer
    - 居中放置,连接展示层和业务层
  - **中层 (y=350-450)**: 业务层服务 (后端微服务)
    - 水平排列: 用户服务 (x=100), 订单服务 (x=350), 支付服务 (x=600)
  - **底层 (y=550-650)**: 数据层组件 (数据库、缓存)
    - 水平排列: MySQL (x=150), Redis (x=400), Elasticsearch (x=650)
  - **侧边或独立区域**: 外部系统、消息队列
  """,

  """
  **3. 创建架构组件**: 为每个组件创建合适的图形和样式:
  - **前端组件**: 矩形,蓝色系,宽 150-200px,高 80-100px,标注 "Web 前端"
  - **后端服务**: 矩形,绿色系,宽 200-250px,高 100-150px,标注 "用户服务\\nUser Service"
  - **数据库**: 菱形,橙色系,宽高 100-120px,标注 "MySQL" 或 "Redis"
  - **网关**: 矩形,紫色系,宽 180-220px,高 80-100px,标注 "API Gateway"
  - **外部系统**: 椭圆,灰色系,宽 140-180px,高 80-100px,标注 "支付网关"
  - 使用 `label.text` 添加组件名称,支持 `\\n` 换行 (中英文双语)
  """,

  """
  **4. 添加通信关系**: 使用箭头表达组件之间的调用和依赖关系:
  - **选择箭头样式**:
    - 实线 (solid): HTTP/REST 调用, 主要业务流
    - 虚线 (dashed): API 调用, 网关路由
    - 点线 (dotted): 数据库连接, 缓存访问
  - **添加协议标注**: 必须使用 `label.text` 标注:
    - "HTTP/REST", "gRPC", "GraphQL" (业务调用)
    - "SQL", "NoSQL", "Redis" (数据访问)
    - "Kafka", "RabbitMQ", "WebSocket" (消息传递)
  - **箭头颜色**: 可以与起点或终点的颜色呼应,或使用绿色 `#2f9e44` 表示数据流
  """,

  """
  **5. 优化架构表达**: 确保架构图清晰、专业:
  - **层次分明**: 不同层级使用不同的 y 坐标和颜色
  - **对齐整齐**: 同层级组件的 y 坐标相同,水平间距一致
  - **连接清晰**: 箭头路径合理,避免交叉
  - **标注完整**: 所有组件和箭头都有清晰的名称或协议标注
  - **视觉平衡**: 元素分布均匀,不过度拥挤或分散
  """
]

# ============================================
# Section 4: H 质量标准
# ============================================

[H_quality]
items = [
  """
  **分层清晰性**: 架构图必须有清晰的层次结构:
  - 不同层级使用不同的 y 坐标区间 (展示层 y=100-200, 业务层 y=300-400, 数据层 y=500-600)
  - 同层级组件的 y 坐标相近或相同
  - 使用颜色编码区分层级 (蓝色前端、绿色后端、橙色数据)
  - 层级之间有明显的视觉分隔 (y 坐标间隔 100-150px)
  """,

  """
  **形状语义正确性**: 组件形状的使用必须符合架构图规范:
  - 服务/模块使用矩形 (rectangle)
  - 数据库/存储使用菱形 (diamond)
  - 外部系统使用椭圆 (ellipse)
  - 不得混淆使用 (如用矩形表示数据库)
  """,

  """
  **箭头样式规范性**: 箭头样式必须有明确的语义:
  - 实线 (solid): 主要业务流程、同步调用
  - 虚线 (dashed): API 调用、网关路由
  - 点线 (dotted): 数据库连接、缓存访问
  - 不同类型的关系使用不同的箭头样式
  """,

  """
  **协议标注完整性**: 所有箭头都必须有清晰的协议标注:
  - 必须使用 `label.text` 标注通信协议
  - 标注应该是常见的技术术语: HTTP, gRPC, SQL, Redis, Kafka 等
  - 标注文本清晰可读,字体大小 14-16px
  - 避免使用模糊或不准确的标注 (如 "调用", "连接")
  """,

  """
  **颜色编码一致性**: 必须使用统一的颜色编码系统:
  - 蓝色系: 前端/客户端 (边框 `#1971c2`, 背景 `#e7f5ff`)
  - 绿色系: 后端/服务端 (边框 `#2f9e44`, 背景 `#d3f9d8`)
  - 橙色系: 数据库/存储 (边框 `#f08c00`, 背景 `#fff4e6`)
  - 紫色系: 网关/中间件 (边框 `#5f3dc4`, 背景 `#e5dbff`)
  - 同类型组件使用相同的颜色系
  """,

  """
  **布局专业性**: 架构图布局应该专业、整洁:
  - 元素对齐整齐 (同层级 y 坐标相同)
  - 水平间距一致 (建议 150-200px)
  - 垂直间距合理 (层级间 100-150px)
  - 连接线不交叉或交叉最少
  - 整体视觉平衡,不拥挤不稀疏
  """
]
