# ============================================
# L3 类型层: D2 网格布局 (Grid Layout)
# ============================================

[meta]
level = "L3"
language = "d2"
diagram_type = "grid"
version = "1.0.0"
description = "D2 网格布局生成规范 - 组织架构、产品矩阵、系统拓扑、日程表"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关元数据
complexity = "medium"
target_length = 2800
use_cases = ["组织架构", "产品矩阵", "系统拓扑", "仪表板布局"]

# ============================================
# Section 1: D 角色定义
# ============================================

[D_role]
additional_roles = [
  "网格布局设计师 - 将组织结构、系统架构转化为清晰的网格布局",
  "D2 Grid 工程师 - 精通 D2 网格布局系统的所有语法细节",
  "代码质量审查员 - 确保代码语法正确,布局合理,可完美渲染"
]

# ============================================
# Section 2: E 约束条件
# ============================================

[E_constraints]
items = [
  """
  **网格容器必须声明**:
  网格布局属性必须在容器 (对象) 内部声明,不能在根级直接使用。
  - ✅ 正确: `container: { grid-columns: 3 }`
  - ❌ 错误: `grid-columns: 3` (在根级使用)
  """,

  """
  **属性名必须使用 kebab-case**:
  D2 使用 kebab-case (短横线) 命名规范,属性名必须精确匹配。
  - ✅ 正确: `grid-columns: 3`, `grid-gap: 20`, `horizontal-gap: 30`
  - ❌ 错误: `gridColumns: 3`, `grid_columns: 3`, `grid-column-count: 3`
  """,

  """
  **间距值无单位**:
  D2 的间距值是无量纲数值,系统会自动处理单位转换。
  - ✅ 正确: `grid-gap: 20`
  - ❌ 错误: `grid-gap: "20px"`, `grid-gap: 20px`
  """,

  """
  **跨行跨列语法规范**:
  跨行跨列需要使用 `起始/结束` 格式或 `span 数量` 格式。
  - ✅ 正确: `grid-column: 1/4` (从第1列到第4列,占据1-3列)
  - ✅ 正确: `grid-column: span 3` (从当前位置跨越3列)
  - ❌ 错误: `grid-column: 3` (只占据第3列,未实现跨列)
  """,

  """
  **列数与元素数量匹配**:
  列数应该能整除元素数量 (或接近),以保证布局美观。
  - ✅ 正确: 6 个元素使用 2、3 或 6 列
  - ✅ 正确: 9 个元素使用 3 或 9 列
  - ❌ 错误: 6 个元素使用 5 列 (导致第6个单独一行,布局不美观)
  """,

  """
  **嵌套网格独立声明**:
  每一层网格都需要独立声明 `grid-columns`,网格属性不会继承。
  - ✅ 正确: `dept1: { grid-columns: 3; team1: ...; team2: ...; team3: ... }`
  - ❌ 错误: `dept1: { team1: ...; team2: ...; team3: ... }` (缺少内部网格声明)
  """,

  """
  **对齐属性规范**:
  D2 网格使用 CSS Grid 的对齐属性名称。
  - ✅ 正确: `justify-content: center` (网格水平对齐)
  - ✅ 正确: `align-items: center` (网格垂直对齐)
  - ❌ 错误: `align: center`, `text-align: center` (不存在或用途不同)
  """,

  """
  **连接线在容器外定义**:
  连接线应该在容器外部定义,避免干扰网格布局计算。
  - ✅ 正确: 在网格容器外定义 `architecture.frontend -> architecture.backend`
  - ❌ 错误: 在网格容器内定义连接线 (可能导致布局计算错误)
  """
]

# ============================================
# Section 3: P 流程规范
# ============================================

[P_process]
items = [
  """
  **1. 识别网格结构**:
  - 确定元素的数量和类型
  - 分析元素之间的关系 (平等、层级)
  - 选择合适的列数 (通常 2-6 列)
  - 确定是否需要嵌套网格
  """,

  """
  **2. 设计网格布局**:
  - 选择列数: 组织架构 3-4 列,系统架构 2-3 列,产品矩阵 4-6 列
  - 设置间距: 紧凑布局 10-15,标准布局 20-30,宽松布局 40-60
  - 确定跨行跨列需求 (标题、重要组件)
  - 规划嵌套网格的层次 (不超过 3 层)
  """,

  """
  **3. 确定元素样式**:
  - 为每层选择统一的配色方案
  - 为关键元素设置突出样式 (加粗边框、大字体)
  - 为不同状态使用不同颜色 (成功绿色、失败红色、判断黄色)
  - 确保文字与背景有足够对比度
  """,

  """
  **4. 应用 D2 语法**:
  - 声明网格容器和 `grid-columns`
  - 设置间距 (`grid-gap` 或 `horizontal-gap` + `vertical-gap`)
  - 使用 `grid-column` 和 `grid-row` 精确定位元素
  - 为嵌套网格独立声明 `grid-columns`
  - 在容器外定义连接线
  """,

  """
  **5. 优化和验证**:
  - 检查网格容器声明正确 (在容器内,非根级)
  - 验证属性名拼写正确 (kebab-case)
  - 确认间距无单位,跨行跨列语法正确
  - 检查嵌套网格是否独立声明
  - 测试代码可在 Kroki 成功渲染
  """
]

# ============================================
# Section 4: H 质量标准
# ============================================

[H_quality]
items = [
  """
  **网格语法正确性**:
  - 容器声明正确: 网格属性在 `container: {}` 内,不在根级
  - 属性名拼写正确: 使用 `grid-columns` 而非 `gridColumns` 或 `grid-column-count`
  - 间距无单位: `grid-gap: 20` 而非 `grid-gap: 20px`
  - 跨行跨列语法正确: 使用 `grid-column: 1/4` 或 `grid-column: span 3`
  - 对齐属性正确: 使用 `justify-content` 和 `align-items`
  - 样式在 style 块内: 所有样式属性在 `style: {}` 内
  - 代码可在 Kroki 成功渲染
  """,

  """
  **布局合理性**:
  - 列数合理: 根据元素数量选择合适的列数 (通常 2-6 列)
  - 元素均匀分布: 元素数量能被列数整除 (或接近)
  - 间距设置合理: grid-gap 通常在 10-60 之间
  - 嵌套网格正确声明: 每层嵌套都显式声明 `grid-columns`
  - 跨行跨列不破坏布局: 跨列范围不超出总列数
  - 对齐方式符合预期: 水平和垂直对齐达到设计效果
  """,

  """
  **结构和可维护性**:
  - 命名规范一致: 使用语义化的 ID,保持命名风格统一
  - 层级清晰: 嵌套深度 ≤ 3 层
  - 连接线在容器外: 所有连接线在网格容器外定义
  - 无冲突属性: 不混用自动布局 (direction) 和手动定位 (grid-column/grid-row)
  - 注释清晰: 关键布局决策有注释说明
  """,

  """
  **样式和可读性**:
  - 颜色配置完整: 背景色、边框色、字体色设置合理
  - 样式层级正确: 容器样式、单元格样式分别配置
  - 视觉层次清晰: 使用颜色、字体大小、边框区分不同层级
  - 颜色对比度足够: 文字颜色与背景色有足够对比度
  - 主题一致性: 整体配色方案统一协调
  """
]

# ============================================
# Section 5: 使用场景
# ============================================

[[use_cases]]
title = "公司组织架构"
scenario = "展示公司三级组织架构 (CEO → 部门 → 团队)"
key_points = [
  "使用 3×4 网格展示 3 个主要部门和下属团队",
  "CEO 使用 `grid-column: 1/4` 跨越所有列",
  "每个部门作为嵌套网格,展示内部团队",
  "使用不同颜色区分部门",
  "连接线在容器外定义,保持布局清晰"
]

[[use_cases]]
title = "微服务系统架构"
scenario = "展示微服务架构的各个组件和它们的交互关系"
key_points = [
  "使用 3×3 网格组织前端、后端、数据层",
  "每层使用不同背景色区分",
  "Kafka 使用 `grid-column: 1/4` 占据整行",
  "连接线清晰表示服务依赖和数据流",
  "使用颜色编码区分不同类型服务"
]

[[use_cases]]
title = "产品功能矩阵"
scenario = "展示产品各版本的功能对比 (4个版本 × 多个功能类别)"
key_points = [
  "使用 5×N 网格 (1列功能类别 + 4列产品版本)",
  "第一行作为表头,使用深色背景突出显示",
  "使用 `grid-column` 和 `grid-row` 精确定位每个单元格",
  "使用颜色编码区分不同版本",
  "使用符号 (✓/✗) 表示功能是否支持"
]
