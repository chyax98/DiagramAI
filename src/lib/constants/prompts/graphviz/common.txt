
# Graphviz DOT 语言通用规范

## 强制规则（Mandatory Rules）

### ⚠️ 规则 1: digraph 必须使用 `->`，graph 必须使用 `--`
这是最常见的致命错误！混用会导致编译失败。

**错误示例**：
```dot
digraph {
  A -- B;  // ❌ 编译失败！有向图不能使用 --
}
```

**正确写法**：
```dot
digraph {
  A -> B;  // ✅ 有向图使用 ->
}

graph {
  A -- B;  // ✅ 无向图使用 --
}
```

**违反后果**：
```
Error: syntax error in line 2 near '--'
```

---

### ⚠️ 规则 2: 所有语句必须以分号结尾
这是 DOT 语法的硬性要求！缺少分号会导致解析失败。

**错误示例**：
```dot
digraph {
  A -> B           // ❌ 缺少分号！
  B -> C [color="red"]   // ❌ 缺少分号！
  node [shape=box]       // ❌ 缺少分号！
}
```

**正确写法**：
```dot
digraph {
  A -> B;                    // ✅ 正确
  B -> C [color="red"];      // ✅ 正确
  node [shape=box];          // ✅ 正确
}
```

**违反后果**：
```
Error: syntax error in line 3
```

---

### ⚠️ 规则 3: 聚类子图必须以 `cluster_` 开头
如果要显示边框和标签,子图名称必须遵守这个命名规则。

**错误示例**：
```dot
digraph {
  subgraph group1 {    // ❌ 不会显示边框！
    label="组1";
    A; B;
  }
}
```

**正确写法**：
```dot
digraph {
  subgraph cluster_group1 {  // ✅ 正确，会显示边框
    label="组1";
    style=filled;
    color=lightgrey;
    A; B;
  }
}
```

**违反后果**：
不会报错,但子图不会显示可视边框,用户意图无法实现。

---

### ⚠️ 规则 4: 节点 ID 包含空格或特殊字符必须用引号
**错误示例**：
```dot
digraph {
  用户 管理员 -> 系统;      // ❌ 空格导致解析为两个节点
  node@1 -> node#2;        // ❌ 特殊字符导致解析错误
}
```

**正确写法**：
```dot
digraph {
  "用户 管理员" -> 系统;    // ✅ 正确
  "node@1" -> "node#2";    // ✅ 正确
  // 或直接使用中文无空格
  用户管理员 -> 系统;       // ✅ 推荐
}
```

**违反后果**：
```
Error: syntax error in line 2
```

---

### ⚠️ 规则 5: rankdir 和全局样式必须在所有节点和边定义之前
**错误示例**：
```dot
digraph {
  A -> B;
  rankdir=LR;  // ❌ 放在后面可能不生效
  node [shape=box];  // ❌ 可能影响之前定义的节点
}
```

**正确写法**：
```dot
digraph {
  rankdir=LR;  // ✅ 必须放在最前面
  node [shape=box];  // ✅ 全局样式紧随其后
  edge [color="#1976d2"];

  A -> B;  // ✅ 节点和边定义放在最后
}
```

**违反后果**：
布局方向或样式可能不生效,导致图表显示异常。

---

## 语法要求

### 图声明
```dot
// 有向图（使用 -> 连接）
digraph 图名称 {
  // 图内容
}

// 无向图（使用 -- 连接）
graph 图名称 {
  // 图内容
}

// 严格图（不允许重复边）
strict digraph 图名称 {
  // 图内容
}
```

**重要规则**：
- 有向图必须使用 `digraph` 和 `->`
- 无向图必须使用 `graph` 和 `--`
- 不要混用 `->` 和 `--`
- 图名称可选，支持中文但建议使用英文

### 节点语法
```dot
// 基础节点定义
节点ID [label="显示文本"];

// 带多个属性
节点ID [
  label="显示文本",
  shape=box,
  style=filled,
  fillcolor="#e3f2fd"
];

// 中文节点（推荐）
用户 [shape=circle];
订单 [shape=box];
```

**常用节点形状**：
- `box` - 矩形（默认，通用步骤）
- `circle` - 圆形（状态节点）
- `ellipse` - 椭圆（默认形状）
- `diamond` - 菱形（判断节点）
- `doublecircle` - 双圆（结束状态）
- `cylinder` - 圆柱（数据库）
- `plaintext` - 纯文本（无边框）

### 边语法
```dot
// 有向图
A -> B;
A -> B [label="条件"];
A -> B [label="成功", color="#4caf50", style=bold];

// 无向图
A -- B;
A -- B [label="连接", color="#2196f3"];

// 链式连接
A -> B -> C -> D;
```

**常用边样式**：
- `solid` - 实线（默认）
- `dashed` - 虚线
- `dotted` - 点线
- `bold` - 粗线

## 命名规范

### 节点 ID 命名
- ✅ **推荐**：直接使用中文（Graphviz 完整支持中文）
- ✅ **可选**：使用英文字母、数字、下划线
- ❌ **避免**：使用特殊字符（! @ # $ % ^ & *）

**示例**：
```dot
// ✅ 好的命名
用户;
订单系统;
node1;
user_service;

// ❌ 不推荐
node@1;        // 包含特殊字符
node 1;        // 包含空格（需要引号）
"node 1";      // 需要引号，不够清晰
```

### 标签命名
- 使用 `label` 属性定义显示文本
- 支持中文、英文、数字、符号
- 可以使用 `\n` 换行

## 样式系统

### 全局样式
```dot
digraph {
  // 全局配置
  rankdir=TB;          // 布局方向：TB/LR/BT/RL
  node [shape=box, style=filled, fillcolor="#e3f2fd"];
  edge [color="#1976d2", fontsize=10];
  
  // 图内容...
}
```

### 布局方向
- `TB` (Top to Bottom) - 从上到下（默认）
- `LR` (Left to Right) - 从左到右
- `BT` (Bottom to Top) - 从下到上
- `RL` (Right to Left) - 从右到左

### 配色方案建议

#### 蓝绿色调（专业清新）
```dot
node [fillcolor="#e3f2fd", style=filled];
edge [color="#1976d2"];
```

#### 暖色调（活力温暖）
```dot
node [fillcolor="#fff3e0", style=filled];
edge [color="#f57f17"];
```

#### 单色渐变（简约优雅）
```dot
node [fillcolor="#f5f5f5:#e0e0e0", style=filled, gradientangle=90];
edge [color="#424242"];
```

### 布局引擎
- `dot` - 层次化布局（默认，适合流程图）
- `neato` - 弹簧模型（适合无向图）
- `circo` - 环形布局（适合网络拓扑）
- `fdp` - 力导向布局（适合大型图）
- `twopi` - 径向布局（适合中心辐射）
- `osage` - 聚类布局

**布局引擎选择指南**：
- **有向流程图**：使用 `dot`（默认），自动分层排列
- **无向关系图**：使用 `neato`，基于物理弹簧模型平衡节点位置
- **环形拓扑图**：使用 `circo`，适合显示循环关系或网络拓扑
- **大型复杂图**：使用 `fdp`，力导向布局处理大规模节点
- **中心辐射图**：使用 `twopi`，根节点居中，其他节点环绕分布

**使用方法**：
```dot
graph {
  layout=circo;  // 指定布局引擎
  // ...
}
```

### 子图（Subgraph）
```dot
digraph {
  // 聚类子图（带边框）
  subgraph cluster_0 {
    label="组名";
    style=filled;
    color="#bbdefb";
    fillcolor="#e3f2fd";
    
    节点A;
    节点B;
  }
  
  // 普通子图（用于布局约束）
  subgraph {
    rank=same;  // 节点在同一水平线
    节点C;
    节点D;
  }
}
```

**重要规则**：
- 聚类子图必须以 `cluster_` 开头
- 聚类子图会显示边框和标签
- 普通子图用于布局约束

## 常见错误

### 错误 1: 混用有向图和无向图语法（对应强制规则 1）
**❌ 错误写法**：
```dot
digraph {
  A -- B;  // ❌ 有向图不能使用 --
}

graph {
  A -> B;  // ❌ 无向图不能使用 ->
}
```

**✅ 正确写法**：
```dot
digraph {
  A -> B;  // ✅ 有向图使用 ->
}

graph {
  A -- B;  // ✅ 无向图使用 --
}
```

**原因**：digraph 和 graph 的连接符语法不同,混用会导致语法错误。

---

### 错误 2: 语句缺少分号（对应强制规则 2）
**❌ 错误写法**：
```dot
digraph {
  A -> B
  C -> D [color="red"]
  node [shape=box]
}
```

**✅ 正确写法**：
```dot
digraph {
  A -> B;
  C -> D [color="red"];
  node [shape=box];
}
```

**原因**：DOT 语法要求所有语句以分号结尾,这是硬性约束。

---

### 错误 3: 子图命名错误（对应强制规则 3）
**❌ 错误写法**：
```dot
digraph {
  subgraph group1 {  // ❌ 缺少 cluster_ 前缀，不会显示边框
    label="组1";
    A; B;
  }
}
```

**✅ 正确写法**：
```dot
digraph {
  subgraph cluster_group1 {  // ✅ cluster_ 前缀必需
    label="组1";
    style=filled;
    color=lightgrey;
    A; B;
  }
}
```

**原因**：只有以 cluster_ 开头的子图才会显示边框。

---

### 错误 4: 节点 ID 包含空格未加引号（对应强制规则 4）
**❌ 错误写法**：
```dot
digraph {
  用户 管理员 -> 系统;      // ❌ 空格导致解析为两个节点
  node@1 -> node#2;        // ❌ 特殊字符导致解析错误
}
```

**✅ 正确写法**：
```dot
digraph {
  "用户 管理员" -> 系统;    // ✅ 正确
  "node@1" -> "node#2";    // ✅ 正确
  // 或直接使用中文无空格
  用户管理员 -> 系统;       // ✅ 推荐
}
```

**原因**：空格和特殊字符会被解析为分隔符或语法字符,必须用引号包裹。

---

### 错误 5: 全局配置位置错误（对应强制规则 5）
**❌ 错误写法**：
```dot
digraph {
  A -> B;
  C -> D;
  rankdir=LR;          // ❌ 放在后面可能不生效
  node [shape=box];    // ❌ 不会影响已定义的节点
}
```

**✅ 正确写法**：
```dot
digraph {
  rankdir=LR;          // ✅ 布局方向放在最前面
  node [shape=box];    // ✅ 全局样式紧随其后
  edge [color="#333"];

  A -> B;              // ✅ 节点和边定义放在最后
  C -> D;
}
```

**原因**：rankdir 和全局样式必须在节点定义之前,否则可能不生效。

## Kroki 渲染注意事项

### 支持的特性
- ✅ 所有标准 DOT 语法
- ✅ 中文节点和标签
- ✅ 所有布局引擎（dot、neato、circo、fdp、twopi、osage）
- ✅ HTML 标签（<BR/>、<B>、<I> 等）
- ✅ 颜色名称和十六进制色值

### 不支持的特性
- ❌ 外部图片引用（image 属性）
- ❌ 自定义字体文件
- ❌ PostScript 自定义形状

### 最佳实践
1. **使用十六进制颜色**：`#4caf50` 比 `green` 更精确
2. **避免过度嵌套**：最多 3 层子图嵌套
3. **合理使用换行**：标签使用 `\n` 保持简洁
4. **统一样式**：同类节点使用相同形状和颜色
5. **测试布局引擎**：不同引擎适合不同场景

## 注释语法

Graphviz 支持三种注释方式:

1. **C风格注释**:
   - 单行: `// 这是注释`
   - 多行: `/* 这是
              多行注释 */`

2. **C++风格注释**:
   - 仅单行: `// 单行注释`

3. **#号注释** (仅在某些上下文):
   - 行首: `# 配置注释`

**最佳实践**:
- 复杂逻辑前添加注释说明业务含义
- 避免过度注释显而易见的代码
- 注释与代码保持同步更新

示例:
```dot
digraph G {
    // 用户认证模块
    login [label="登录"];

    /* 数据处理流程
       包含验证和存储 */
    process [label="处理"];
}
```

## Record节点详细说明

Record形状用于显示结构化数据(如类、表结构、接口定义)。

### 基础语法

**record形状** (水平布局):
```dot
node [shape=record];
User [label="<f0> User | <f1> id: int | <f2> name: string"];
```

**Mrecord形状** (圆角矩形record):
```dot
node [shape=Mrecord];
User [label="<f0> User | <f1> id: int | <f2> name: string"];
```

### 标签语法规则

**字段分隔符**:
- `|` 垂直分隔字段
- `{...}` 创建嵌套结构

**端口定义**:
- `<port_name>` 定义可连接的端口

**对齐控制**:
- `\l` 左对齐 (left)
- `\r` 右对齐 (right)
- `\n` 居中 (默认)

### 完整示例

```dot
digraph ClassDiagram {
    node [shape=record];

    // 类定义
    User [label="{<head> User | <fields> - id: int\l- name: string\l- email: string\l | <methods> + login()\l+ logout()\l}"];

    Order [label="{<head> Order | <fields> - orderId: int\l- userId: int\l- total: float\l}"];

    // 通过端口连接
    User:fields -> Order:fields [label="1..*"];
}
```

### 端口连接系统

**9个方位端口**:
- `n` (north/上), `ne` (东北), `e` (east/右)
- `se` (东南), `s` (south/下), `sw` (西南)
- `w` (west/左), `nw` (西北), `c` (center/中)

**精确连接语法**:
```dot
A:e -> B:w;           // A的右侧连到B的左侧
A:field1:e -> B:s;    // A的field1端口右侧连到B的下方
```

**应用场景**:
- ER图: 表结构展示
- 类图: 类成员显示
- 架构图: 组件详情
- 接口文档: API结构

## 端口连接系统

端口系统用于精确控制边的连接点,实现专业级布局。

### 基础端口

**9个方位端口**:
```
    nw    n    ne
      \   |   /
    w --- c --- e
      /   |   \
    sw    s    se
```

**语法**:
```dot
A:n -> B:s;    // A的上方连到B的下方
A:e -> B:w;    // A的右侧连到B的左侧
```

### Record节点端口

**命名端口** (配合record使用):
```dot
node [shape=record];
A [label="<f0> Header | <f1> Body | <f2> Footer"];
B [label="<g0> Section1 | <g1> Section2"];

A:f1 -> B:g0;  // Body连到Section1
```

**复合端口**:
```dot
A:f1:e -> B:g0:w;  // Body的右侧连到Section1的左侧
```

### 应用场景

1. **ER图精确连接**:
   - 表字段之间的外键关系
   - 避免边穿透节点

2. **架构图模块连接**:
   - 服务之间的API调用
   - 分层架构的层间连接

3. **流程图分支优化**:
   - 多分支从不同端口出发
   - 减少边交叉

**最佳实践**:
- 长距离连接优先使用水平端口(e/w)
- 垂直布局使用垂直端口(n/s)
- Record节点必须使用命名端口

## HTML-Like Labels

HTML-like标签提供比record更强大的格式化能力,支持表格、字体、颜色等。

### 基础语法

**表格结构**:
```dot
A [label=<
    <TABLE>
        <TR><TD>Header</TD></TR>
        <TR><TD>Content</TD></TR>
    </TABLE>
>];
```

**注意**: HTML标签使用 `<...>` 包裹,不需要引号。

### 常用标签

**表格标签**:
- `<TABLE>` 表格容器
- `<TR>` 表格行
- `<TD>` 表格单元格 (可用PORT属性定义端口)

**文本格式**:
- `<B>粗体</B>`
- `<I>斜体</I>`
- `<U>下划线</U>`
- `<FONT COLOR="red">红色文本</FONT>`
- `<BR/>` 换行

### 高级示例

**ER图表结构**:
```dot
digraph ER {
    User [label=<
        <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
            <TR><TD BGCOLOR="lightblue"><B>User</B></TD></TR>
            <TR><TD PORT="id">id: INT PK</TD></TR>
            <TR><TD PORT="name">name: VARCHAR(100)</TD></TR>
            <TR><TD PORT="email">email: VARCHAR(100)</TD></TR>
        </TABLE>
    >];

    Order [label=<
        <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
            <TR><TD BGCOLOR="lightgreen"><B>Order</B></TD></TR>
            <TR><TD PORT="oid">orderId: INT PK</TD></TR>
            <TR><TD PORT="uid">userId: INT FK</TD></TR>
            <TR><TD>total: DECIMAL</TD></TR>
        </TABLE>
    >];

    User:id -> Order:uid;
}
```

**架构图组件状态**:
```dot
Service [label=<
    <TABLE>
        <TR><TD><B>API Gateway</B></TD></TR>
        <TR><TD><FONT COLOR="green">● Running</FONT></TD></TR>
        <TR><TD>Port: 8080</TD></TR>
    </TABLE>
>];
```

### 转义规则

**特殊字符**:
- `&lt;` 表示 `<`
- `&gt;` 表示 `>`
- `&amp;` 表示 `&`
- `&quot;` 表示 `"`

### 应用场景

- ER图: 专业的表结构展示
- 架构图: 服务状态和配置信息
- 类图: 复杂的类成员格式化
- 任何需要多行格式化文本的场景

## 布局控制高级属性

高级布局属性用于精确控制节点位置、边路径和整体布局质量。

### constraint属性 (边约束)

**用途**: 控制边是否影响节点的rank(层级)分配

**语法**:
```dot
A -> B [constraint=false];  // 此边不影响A和B的层级关系
```

**应用场景**:
- 流程图的回退边(避免循环影响布局)
- 跨层级的参考连接
- 保持主流程清晰的辅助连接

**示例**:
```dot
digraph Flow {
    rankdir=LR;
    A -> B -> C -> D;      // 主流程
    D -> A [constraint=false, style=dashed];  // 循环回退,不影响布局
}
```

### rank属性 (同层对齐)

**用途**: 强制多个节点处于同一水平层级

**语法**:
```dot
{rank=same; A; B; C;}  // A、B、C在同一层
```

**应用场景**:
- 流程图的并行步骤
- 架构图的同层服务
- 树形图的同级节点

**示例**:
```dot
digraph Parallel {
    start -> process1;
    start -> process2;
    start -> process3;

    {rank=same; process1; process2; process3;}  // 并行步骤对齐

    process1 -> end;
    process2 -> end;
    process3 -> end;
}
```

### weight属性 (边权重)

**用途**: 控制边的"重要性",影响边的路径选择

**语法**:
```dot
A -> B [weight=5];   // 权重5,优先沿此路径布局
A -> C [weight=1];   // 权重1,次要路径
```

**默认值**: 1
**推荐值**: 主流程2-5, 次要流程0.5-1

**应用场景**:
- 强调主流程路径
- 减少次要边对布局的影响
- 优化复杂图的边交叉

### ranksep属性 (层级间距)

**用途**: 控制rank(层级)之间的垂直间距

**语法**:
```dot
graph [ranksep=0.5];   // 层级间距0.5英寸
graph [ranksep=0.5 equally];  // 均匀分布
```

**默认值**: 0.5
**推荐值**: 紧凑0.3-0.5, 松散0.8-1.5

### nodesep属性 (节点间距)

**用途**: 控制同一rank内节点的水平间距

**语法**:
```dot
graph [nodesep=0.5];   // 节点间距0.5英寸
```

**默认值**: 0.25
**推荐值**: 紧凑0.2-0.3, 松散0.5-1.0

### 性能优化组合

**大规模图表优化**:
```dot
graph [
    ranksep=0.3,      // 紧凑垂直间距
    nodesep=0.2,      // 紧凑水平间距
    splines=false     // 禁用曲线(提升性能)
];
```

**质量优先**:
```dot
graph [
    ranksep=0.8,      // 宽松垂直间距
    nodesep=0.5,      // 宽松水平间距
    splines=ortho     // 正交路由(美观)
];
```
