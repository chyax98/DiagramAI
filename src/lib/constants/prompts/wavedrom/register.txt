
# WaveDrom Register 位字段图生成要求

## 重要说明

WaveDrom 的 Register 图表实际上是 **Bitfield（位字段图）**，用于静态展示寄存器的位布局。

- **用途**: 展示寄存器/指令的位字段结构（哪些位表示什么字段）
- **语法**: 使用 `"reg"` 数组定义位字段
- **适用场景**: 寄存器手册、指令编码、协议帧格式、数据包结构

⚠️ **与时序图的区别**：
- Register (Bitfield) 是**静态布局图**，展示位字段划分
- Timing Diagram 是**动态时序图**，展示信号随时间变化（使用 `"signal"` 数组）

如果需要展示寄存器的读写时序，应使用 Timing Diagram（见 `timing.txt`）。

**规则适用性说明**：
- **仅适用于 Register**: `vflip`/`hflip` 配置、`type` 字段颜色、`attr` 多行显示
- **仅适用于 Timing**: `wave` 波形语法、`phase`/`period` 配置、信号分组
- **两者共享**: JSON 格式规范、`config.hspace`/`vspace`/`fontsize` 配置

---

## 核心语法

### 寄存器对象结构
```json
{
  "reg": [
    {
      "bits": 位宽,
      "name": "字段名",
      "attr": "属性描述",
      "type": 类型编号
    }
  ],
  "config": {
    "bits": 总位宽,
    "lanes": 行数,
    "hspace": 水平间距
  }
}
```

### 字段属性详解
**bits（必需）**：
- 整数，表示该字段占用的位数
- 所有字段的 bits 总和应等于寄存器总位宽

**name（可选）**：
- 字段名称，显示在字段框内
- 推荐使用标准缩写（RW、RO、WO、RSV）

**attr（可选）**：
- 字段属性或描述，显示在字段框下方
- 可以是字符串或字符串数组（数组用于多行显示）
- 常用格式：位范围 `[7:0]`、访问类型 `RW`、复位值 `0x00`

**type（可选）**：
- 整数，控制字段的显示颜色
- `0` 或不设置（默认）: 浅灰色背景
- `2`: 白色背景
- `3`: 浅蓝色背景（常用于数据字段）
- `4`: 浅绿色背景（常用于控制字段）
- `5`: 浅黄色背景（常用于状态字段）
- `6`: 浅红色背景（常用于保留字段）
- `7`: 深灰色背景（常用于只读字段）

### 配置选项
```json
{
  "config": {
    "bits": 32,        // 总位宽（可选，默认自动计算）
    "lanes": 1,        // 显示行数（1-8）
    "hspace": 800,     // 水平间距（像素）
    "vspace": 80,      // 垂直间距（像素）
    "fontsize": 14,    // 字体大小
    "vflip": false,    // 垂直翻转（默认false，从上到下显示）
    "hflip": false     // 水平翻转（默认false，从右到左显示位序）
  }
}
```

**翻转选项说明**：
- **vflip**: 垂直翻转整个寄存器图
  - `false`（默认）: 第一个字段在顶部
  - `true`: 第一个字段在底部
- **hflip**: 水平翻转位序编号
  - `false`（默认）: LSB（最低位）在右侧，MSB（最高位）在左侧
  - `true`: LSB在左侧，MSB在右侧
- 通常保持默认值，特殊需求时使用

## 生成示例

### 示例 1: 8 位控制寄存器（简单场景）
**用户需求**：8 位 GPIO 控制寄存器，包含使能位和方向位

**生成代码**：
```json
{
  "reg": [
    {"bits": 1, "name": "EN", "attr": "Enable", "type": 4},
    {"bits": 1, "name": "DIR", "attr": "Direction", "type": 4},
    {"bits": 6, "name": "RSV", "attr": "Reserved", "type": 6}
  ],
  "config": {"bits": 8}
}
```

**关键点**：
- 总位宽 = 1 + 1 + 6 = 8 位
- 控制位使用 type 4（绿色）
- 保留位使用 type 6（红色）
- attr 提供字段描述

### 示例 2: 32 位 RISC-V 指令格式（中等复杂度）
**用户需求**：RISC-V I-type 指令编码格式

**应用场景**：指令集手册、编译器开发、处理器设计文档

**生成代码**：
```json
{
  "reg": [
    {"bits": 7, "name": "opcode", "attr": "OP-IMM"},
    {"bits": 5, "name": "rd", "attr": "dest"},
    {"bits": 3, "name": "funct3", "attr": ["ADDI", "SLTI", "ANDI"], "type": 4},
    {"bits": 5, "name": "rs1", "attr": "src"},
    {"bits": 12, "name": "imm[11:0]", "attr": "I-immediate", "type": 3}
  ],
  "config": {"bits": 32, "hspace": 900}
}
```

**关键点**：
- 标准 32 位指令宽度
- attr 可以是数组，显示多个可选值
- 不同字段类型用颜色区分
- hspace 调整显示宽度

### 示例 3: 32 位状态寄存器（高级场景）
**用户需求**：带多种字段类型的处理器状态寄存器

**应用场景**：处理器状态寄存器手册、驱动开发、固件编程

**生成代码**：
```json
{
  "reg": [
    {"bits": 8, "name": "FLAGS", "attr": ["[7:0]", "NZCV..."], "type": 5},
    {"bits": 4, "name": "MODE", "attr": ["[11:8]", "RW"], "type": 4},
    {"bits": 4, "name": "RSV", "attr": "Reserved", "type": 6},
    {"bits": 8, "name": "IRQ_MASK", "attr": ["[23:16]", "RW"], "type": 4},
    {"bits": 8, "name": "VERSION", "attr": ["[31:24]", "RO"], "type": 7}
  ],
  "config": {"bits": 32, "lanes": 1, "hspace": 1000}
}
```

**关键点**：
- 多种字段类型：状态（黄）、控制（绿）、保留（红）、只读（灰）
- attr 数组显示位范围和访问类型
- 清晰的颜色区分提高可读性

### 示例 4: 多行寄存器组（高级场景）
**用户需求**：128 位数据包头部格式，分 4 行显示

**应用场景**：网络协议栈、数据包解析、协议分析工具

**生成代码**：
```json
{
  "reg": [
    {"bits": 16, "name": "SRC_PORT", "attr": "[15:0]", "type": 3},
    {"bits": 16, "name": "DST_PORT", "attr": "[31:16]", "type": 3},
    {"bits": 32, "name": "SEQ_NUM", "attr": "[63:32]", "type": 4},
    {"bits": 32, "name": "ACK_NUM", "attr": "[95:64]", "type": 4},
    {"bits": 4, "name": "HLEN", "attr": "Header Length", "type": 5},
    {"bits": 6, "name": "FLAGS", "attr": "Control Flags", "type": 5},
    {"bits": 16, "name": "WIN_SIZE", "attr": "Window", "type": 3},
    {"bits": 6, "name": "RSV", "attr": "Reserved", "type": 6}
  ],
  "config": {"bits": 128, "lanes": 4, "hspace": 800}
}
```

**关键点**：
- lanes: 4 将 128 位分成 4 行（每行 32 位）
- 模拟 TCP 头部格式
- 不同功能字段用颜色区分
- 适用于复杂协议帧格式

## 常见错误

### 错误 1: 位宽总和不匹配
**❌ 错误写法**：
```json
{"reg":[
  {"bits":7,"name":"op"},
  {"bits":5,"name":"rd"}
],"config":{"bits":32}}
```

**✅ 正确写法**：
```json
{"reg":[
  {"bits":7,"name":"op"},
  {"bits":5,"name":"rd"},
  {"bits":20,"name":"RSV"}
],"config":{"bits":32}}
```

**原因**：所有字段的 bits 总和必须等于配置的总位宽（7+5+20=32）。

### 错误 2: JSON 格式错误
**❌ 错误写法**：
```json
{reg:[{bits:8,name:'data'}]}
```

**✅ 正确写法**：
```json
{"reg":[{"bits":8,"name":"data"}]}
```

**原因**：必须使用严格的 JSON 格式，所有键和字符串值都需要双引号。

### 错误 3: type 值超出范围
**❌ 错误写法**：
```json
{"reg":[{"bits":8,"name":"data","type":10}]}
```

**✅ 正确写法**：
```json
{"reg":[{"bits":8,"name":"data","type":3}]}
```

**原因**：type 值应在 0, 2-7 范围内，超出范围可能导致渲染异常或颜色显示错误。

### 错误 4: bits 为 0 或负数
**❌ 错误写法**：
```json
{"reg":[{"bits":0,"name":"field"}]}
```

**✅ 正确写法**：
```json
{"reg":[{"bits":1,"name":"field"}]}
```

**原因**：bits 必须是正整数，最小为 1。

### 错误 5: lanes 配置不合理
**❌ 错误写法**：
```json
{"reg":[{"bits":32,"name":"data"}],"config":{"bits":32,"lanes":4}}
```

**✅ 正确写法**：
```json
{"reg":[{"bits":32,"name":"data"}],"config":{"bits":32,"lanes":1}}
```

**原因**：lanes 应该让每行位数合理（通常 8 的倍数），32 位用 1 行即可。

### 错误 6: 字段顺序错误
**❌ 错误写法**：
```json
{"reg":[
  {"bits":7,"name":"[6:0]"},
  {"bits":1,"name":"[7]"}
]}
```

**✅ 正确写法**：
```json
{"reg":[
  {"bits":1,"name":"[0]"},
  {"bits":7,"name":"[7:1]"}
]}
```

**原因**：字段应从低位到高位排列（从右到左显示），符合硬件惯例。

**硬件位字段排列惯例**：
- **显示顺序**: 寄存器图通常按照 **从右到左** 显示位序
  - 最右侧: Bit 0（LSB，最低有效位）
  - 最左侧: Bit 31/63（MSB，最高有效位）
- **数组定义顺序**: `reg` 数组中的字段按照 **从低位到高位** 的顺序定义
  - 第一个对象定义 Bit 0-6（会显示在最右侧）
  - 最后一个对象定义 Bit 25-31（会显示在最左侧）
- **示例验证**: 8位寄存器 `[{"bits":1,"name":"EN"},{"bits":7,"name":"DATA"}]`
  - EN（1位）显示在最右侧（Bit 0）
  - DATA（7位）显示在左侧（Bit 1-7）

## 生成检查清单

生成代码后，逐项检查：

- [ ] **JSON 格式正确**：所有键和字符串值使用双引号
- [ ] **位宽总和正确**：所有字段 bits 总和等于 config.bits
- [ ] **bits 值合法**：所有 bits 为正整数
- [ ] **type 值合法**：type 在 0, 2-7 范围内（如使用）
- [ ] **字段顺序正确**：从低位到高位排列
- [ ] **lanes 配置合理**：每行位数适中（通常 8、16、32）
- [ ] **字段命名规范**：使用标准硬件术语或缩写
- [ ] **颜色使用合理**：不同功能字段用不同颜色区分
- [ ] **代码可渲染**：JSON 可通过 Kroki 渲染（无语法错误）

**任何检查项不通过，立即修正后重新生成**
