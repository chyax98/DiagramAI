# ============================================
# L2 语言层 - WaveDrom 通用规范
# ============================================
# 版本: 1.0.0
# 创建日期: 2025-10-19
# 语言: WaveDrom - 数字信号时序波形图和位字段图语言
# ============================================

[meta]
level = "L2"
language = "wavedrom"
version = "1.0.0"
description = "WaveDrom 语言通用规范 - 数字信号时序和位字段可视化"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 语言元数据
language_version = "2.x"
kroki_support = true
official_docs = "https://wavedrom.com/"

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "数字电路设计专家 - 理解数字信号时序关系和约束、时钟域、建立时间、保持时间等概念",
  "硬件工程师 - 掌握常见总线协议(SPI、I2C、UART、DDR)的时序特性和寄存器设计规范",
  "WaveJSON 工程师 - 精通 WaveJSON 格式和 wave 符号系统、signal/reg/data/node/edge 等字段"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **严格 JSON 格式规范**: WaveDrom 要求完全符合 RFC 8259 标准的 JSON 格式,所有键和字符串值必须使用双引号,不支持单引号、缺少引号或尾随逗号。违反此规则会导致 100% 渲染失败。
  - 错误示例: `{signal:[{name:'clk',wave:'p....'}]}`
  - 正确写法: `{"signal":[{"name":"clk","wave":"p...."}]}`
  - Kroki 错误: `SyntaxError: Unexpected token s in JSON at position 1`
  """,

  """
  **根数组必需性**: 所有 WaveDrom 图表的根对象必须包含 `signal` 数组(时序图)或 `reg` 数组(位字段图)之一。缺少根数组无法渲染。
  - 时序图: `{"signal":[{"name":"CLK","wave":"p...."}]}`
  - 位字段图: `{"reg":[{"bits":8,"name":"data"}]}`
  - Kroki 错误: `Error: Missing 'signal' or 'reg' array in root object`
  """,

  """
  **Wave 字符串长度一致性**: 同一时序图中所有信号的 wave 字符串长度必须相同,代表相同的时间跨度。不一致的长度会导致对齐错误或渲染失败。
  - 错误示例: `{"signal":[{"name":"CLK","wave":"p....."},{"name":"DATA","wave":"x34x"}]}`(5 vs 4)
  - 正确写法: `{"signal":[{"name":"CLK","wave":"p....."},{"name":"DATA","wave":"x.34.x"}]}`(均为5)
  """,

  """
  **数据符号配对规则**: 使用数据符号(2-9)时,必须在同一信号对象中提供 `data` 数组来标注数据内容。缺少 data 数组会导致数据符号显示为空白。
  - 错误示例: `{"name":"BUS","wave":"x345x"}`(使用了3/4/5但无data)
  - 正确写法: `{"name":"BUS","wave":"x345x","data":["A","B","C"]}`
  """,

  """
  **Wave 符号合法性**: wave 字符串只能包含预定义的符号字符,不支持中文、特殊符号或空格。合法符号包括:
  - 时钟: `p` `n` `P` `N`
  - 电平: `0` `1` `x` `z` `=`
  - 数据: `2` `3` `4` `5` `6` `7` `8` `9`
  - 辅助: `.` `|` `u` `d`
  - 非法字符会导致渲染失败或显示异常
  """,

  """
  **Kroki 兼容性约束**:
  1. 禁止 JSON 注释 - Kroki 使用标准 JSON 解析器,不支持 `//` 或 `/* */` 注释
  2. URL 编码限制 - 超大图表(>10KB JSON)可能超过 URL 长度限制
  3. 超时限制 - 复杂图表(>100 个信号)可能触发 5 秒渲染超时
  4. 字符转义 - 字符串中的双引号必须转义为 `\\"`
  5. 无外部资源 - 不支持嵌入图片或外部 SVG 文件
  """,

  """
  **位字段图位宽规范**: 位字段图(reg 数组)中所有字段的 bits 总和应为标准字长(8/16/32/64/128)或至少是 8 的倍数。bits 必须为正整数,type 值应在 0-7 范围内。
  - 推荐: 总和为 8, 16, 32, 64, 128 位
  - 可接受: 总和为 8 的倍数(24, 40, 48...)
  - 错误: bits 为 0 或负数, type 超出 0-7 范围
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别图表类型**: 根据用户需求选择合适的 WaveDrom 图表类型:
  - **Timing (时序波形图)**: 展示精确时序关系,支持 node/edge 标注,使用 `signal` 数组
  - **Signal (信号逻辑图)**: 展示信号因果关系,简化语法,使用 `signal` 数组
  - **Register (位字段图)**: 展示寄存器/协议位布局,使用 `reg` 数组
  - **Bitfield (位字段图)**: 与 Register 相同,是 Register 的别名
  """,

  """
  **2. 设计信号/字段结构** (时序图):
  - 设计清晰的信号命名规范(使用标准硬件命名: CLK、RST、DATA、ADDR)
  - 设计合理的信号分组(时钟/控制/数据)
  - 选择合适的 wave 符号(p/n/0/1/x/z/=/2-9)
  - 确定 wave 字符串长度(所有信号必须一致)
  - 规划数据标签(data 数组)和时序约束(node/edge)
  """,

  """
  **2. 设计位字段结构** (位字段图):
  - 设计清晰的字段命名和分组(使用 attr 标注)
  - 计算位宽分配(确保总和为标准字长)
  - 选择合适的字段类型颜色(type 0-7)
  - 确定布局参数(lanes/hspace/vspace)
  - 处理保留位和对齐
  """,

  """
  **3. 应用 WaveDrom 语法**:
  - 时序图: 使用 signal/wave/data/node/edge/config 字段
  - 位字段图: 使用 reg/bits/name/attr/type/config 字段
  - 确保 JSON 格式完全正确(双引号、逗号、括号)
  - 添加必要的配置项(hscale/lanes/hspace)
  - 验证所有约束条件(长度一致、数据配对、符号合法)
  """,

  """
  **4. 验证和优化**:
  - JSON 格式验证(使用 jsonlint.com 或类似工具)
  - 检查强制规则(6 条强制规则全部通过)
  - 时序图: 验证 wave 长度一致性、数据标签完整性
  - 位字段图: 验证位宽总和、type 值范围、字段顺序
  - 逐步简化测试(从最小示例开始,逐步添加复杂度)
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **WaveDrom 语法验证**: 代码必须符合 WaveDrom 官方语法规范,无语法错误,能被 WaveDrom 解析器成功解析。所有 6 条强制规则必须 100% 遵守。
  """,

  """
  **Kroki 渲染测试**: 代码必须能被 Kroki 成功渲染为 SVG 图像,无渲染错误或警告。超时、URL 过长等问题需要优化。
  """,

  """
  **时序图质量标准**:
  - 所有信号 wave 字符串长度完全一致
  - 数据符号(2-9)配有完整的 data 数组
  - 时钟信号放在最前面或分组首位
  - 信号命名使用标准硬件术语(CLK/RST/DATA/EN/REQ/ACK)
  - 时序逻辑正确,符合实际硬件时序关系
  """,

  """
  **位字段图质量标准**:
  - 所有字段 bits 总和为标准字长(8/16/32/64/128)或 8 的倍数
  - 字段顺序符合硬件规范(MSB→LSB 或 LSB→MSB)
  - 字段命名清晰规范,使用标准术语
  - 颜色使用一致且有意义(同类型字段同色)
  - 布局合理,lanes/hspace/vspace 配置适当
  """,

  """
  **可读性和专业性**:
  - 信号/字段分组清晰,使用 {} 或 attr 分隔
  - 命名风格一致(全大写/驼峰/下划线)
  - 复杂度控制合理(时序图≤20信号、wave≤50字符,位字段图≤50字段)
  - 必要时使用 config 优化显示(hscale/lanes/hspace/vspace)
  - 图表标题和说明完整(head/foot)
  """
]
