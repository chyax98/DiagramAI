# Vega-Lite 数据可视化专家参考手册

> **文档定位说明**:
> 此文件是 **完整的 Vega-Lite 参考手册**，供开发者深度学习和查阅使用。
> 在 AI 生成图表时，应**优先使用** `common.txt` (L2 核心规范) + 各图表类型文件 (L3 专项指南)。
> 此文件**不应直接用于 prompt 组合**，仅作为理解 Vega-Lite 完整语法和高级特性的参考文档。

## 何时使用此文件？

✅ **推荐使用场景**:
- 学习 Vega-Lite 的完整语法体系
- 理解高级特性 (layer, facet, selection, transform, params)
- 查阅数据类型和标记类型的详细选择指南
- 解决复杂的可视化问题和架构设计
- 作为开发者的技术参考手册

❌ **不应使用此文件的场景**:
- AI 生成简单图表 (应使用 `common.txt` + `bar.txt/line.txt` 等)
- Token 预算紧张时 (此文件约 4500 tokens，远超单次生成需求)
- 快速原型开发 (L2/L3 文件已足够)

---

## 专家视角

你是一位资深数据可视化工程师和统计图表专家,精通 Vega-Lite 声明式可视化语法,拥有 10 年以上的数据分析、商业智能和科学可视化经验。

你深刻理解:
- Vega-Lite 的声明式语法设计哲学(Grammar of Graphics)
- 数据类型系统(quantitative、nominal、ordinal、temporal)
- 标记类型与编码通道的最佳组合
- 数据变换流程(filter、aggregate、calculate、bin)
- 交互设计原则(selection、condition、bind)
- 多视图组合策略(layer、facet、concat、repeat)

你的输出标准:
✅ 数据结构与标记类型语义匹配
✅ 编码通道选择符合可视化最佳实践
✅ 数据变换逻辑清晰且高效
✅ 图表美观且信息密度适中
✅ 生成的 JSON 完整有效且可渲染
✅ 使用真实业务场景数据

---

## 核心语法说明

### 1. $schema (必需)

- **说明**: 指定 Vega-Lite JSON Schema 版本
- **类型**: string (URL)
- **位置**: JSON 根对象的第一个属性
- **标准值**: `"https://vega.github.io/schema/vega-lite/v5.json"`
- **作用**: 启用 IDE 自动补全和验证,确保规范兼容性
- **注意**: 必须与实际使用的 Vega-Lite 版本匹配

### 2. data (必需)

- **说明**: 定义数据源,支持内联数据或外部 URL
- **类型**: object
- **子属性**:
  - `data.values`: 内联数据数组 (Array<Object>)
  - `data.url`: 外部数据 URL (string, 支持 CSV/JSON/TSV)
  - `data.format`: 数据格式配置 (可选, 如 CSV 的 delimiter)
- **示例**:
  ```json
  "data": {
    "values": [
      {"category": "A", "value": 28},
      {"category": "B", "value": 55}
    ]
  }
  ```
- **最佳实践**: 小数据集用 `values`,大数据集用 `url`

### 3. mark (必需)

- **说明**: 指定图表的标记类型,决定数据的几何表示
- **类型**: string 或 object
- **支持的标记类型**:
  - `"bar"`: 柱状图/条形图
  - `"line"`: 折线图
  - `"point"`: 散点图
  - `"area"`: 面积图
  - `"circle"`: 圆形标记
  - `"square"`: 方形标记
  - `"tick"`: 刻度线
  - `"rule"`: 规则线
  - `"text"`: 文本标记
  - `"geoshape"`: 地理形状
  - `"rect"`: 矩形(热力图)
  - `"arc"`: 弧形(饼图/环形图)
  - `"boxplot"`: 箱线图
- **对象形式**: 支持额外属性如 `color`、`opacity`、`size` 等
- **示例**: `"mark": "bar"` 或 `"mark": {"type": "line", "color": "steelblue"}`

### 4. encoding (必需)

- **说明**: 定义数据字段到视觉通道的映射
- **类型**: object
- **主要编码通道**:
  - **位置通道**: `x`、`y`、`x2`、`y2` (控制标记位置)
  - **标记属性通道**: `color`、`size`、`shape`、`opacity` (控制标记外观)
  - **文本通道**: `text`、`tooltip` (显示文本信息)
  - **细节通道**: `detail`、`order` (控制分组和排序)
- **通道定义**: 每个通道包含 `field`(字段名)、`type`(数据类型)、聚合/变换等
- **示例**:
  ```json
  "encoding": {
    "x": {"field": "category", "type": "nominal"},
    "y": {"field": "value", "type": "quantitative"}
  }
  ```

### 5. type (编码通道中的数据类型)

- **说明**: 指定数据字段的测量类型,决定默认的刻度和排序
- **类型**: string
- **支持的数据类型**:
  - `"quantitative"`: 定量数据(连续数值,如温度、销售额)
  - `"nominal"`: 定性数据(无序分类,如颜色、名称)
  - `"ordinal"`: 有序数据(有序分类,如评级、大小等级)
  - `"temporal"`: 时间数据(日期、时间戳)
- **影响**: 决定轴类型、默认排序、刻度粒度
- **示例**: `{"field": "date", "type": "temporal"}`

### 6. aggregate (可选)

- **说明**: 对数据进行聚合操作
- **类型**: string
- **支持的聚合函数**:
  - 数值统计: `"sum"`, `"mean"`, `"average"`, `"median"`, `"min"`, `"max"`
  - 计数: `"count"`, `"distinct"`, `"missing"`, `"valid"`
  - 统计: `"variance"`, `"stdev"`, `"q1"`, `"q3"`
  - 极值: `"argmin"`, `"argmax"`
- **位置**: 在编码通道定义中使用
- **示例**: `{"aggregate": "mean", "field": "value", "type": "quantitative"}`

### 7. bin (可选)

- **说明**: 将连续数据离散化为箱(bins)
- **类型**: boolean 或 object
- **应用**: 创建直方图、热力图
- **参数**:
  - `maxbins`: 最大箱数 (默认 10)
  - `step`: 箱宽度
  - `extent`: 范围 [min, max]
- **示例**: `{"bin": true, "field": "age", "type": "quantitative"}`

### 8. timeUnit (可选)

- **说明**: 将时间数据截断到特定单位
- **类型**: string
- **支持的时间单位**:
  - 单位: `"year"`, `"month"`, `"date"`, `"day"`, `"hours"`, `"minutes"`, `"seconds"`
  - 复合: `"yearmonth"`, `"monthdate"`, `"hoursminutes"`
- **应用**: 按时间分组、时间序列可视化
- **示例**: `{"timeUnit": "yearmonth", "field": "timestamp", "type": "temporal"}`

### 9. scale (可选)

- **说明**: 控制数据值到视觉值的映射
- **类型**: object
- **常用属性**:
  - `domain`: 数据域 (输入范围)
  - `range`: 视觉域 (输出范围)
  - `type`: 刻度类型 ("linear", "log", "sqrt", "time")
  - `zero`: 是否包含零点 (boolean)
  - `scheme`: 颜色方案 (如 "category10", "viridis")
- **示例**: `{"scale": {"domain": [0, 100], "range": ["red", "blue"]}}`

### 10. axis (可选)

- **说明**: 自定义坐标轴样式
- **类型**: object 或 null (null 隐藏坐标轴)
- **常用属性**:
  - `title`: 轴标题 (string)
  - `labelAngle`: 标签旋转角度 (number)
  - `format`: 数值格式化 (如 ".2f" 保留两位小数)
  - `grid`: 是否显示网格线 (boolean)
- **示例**: `{"axis": {"title": "销售额 (万元)", "format": ".1f"}}`

### 11. legend (可选)

- **说明**: 自定义图例样式
- **类型**: object 或 null (null 隐藏图例)
- **常用属性**:
  - `title`: 图例标题
  - `orient`: 方位 ("left", "right", "top", "bottom")
  - `format`: 值格式化
- **示例**: `{"legend": {"title": "产品类别", "orient": "right"}}`

### 12. transform (可选)

- **说明**: 对数据进行变换操作,在可视化前处理数据
- **类型**: Array<TransformObject>
- **常用变换**:
  - `filter`: 过滤数据 (如 `{"filter": "datum.value > 50"}`)
  - `calculate`: 计算新字段 (如 `{"calculate": "datum.a * 2", "as": "doubled"}`)
  - `aggregate`: 聚合数据
  - `bin`: 数据分箱
  - `fold`: 宽数据转长数据
  - `pivot`: 长数据转宽数据
- **示例**:
  ```json
  "transform": [
    {"filter": "datum.year == 2023"},
    {"calculate": "datum.sales * 1.1", "as": "adjusted_sales"}
  ]
  ```

### 13. width / height (可选)

- **说明**: 指定图表画布尺寸
- **类型**: number (像素) 或 "container"
- **默认**: Vega-Lite 自动计算
- **建议**: 响应式布局使用 `"container"`,固定布局使用具体数值
- **示例**: `"width": 600, "height": 400`

### 14. title (可选)

- **说明**: 图表标题
- **类型**: string 或 object
- **对象形式属性**: `text`, `fontSize`, `anchor`, `color`, `offset`
- **示例**: `"title": "2023年月度销售趋势"` 或 `{"text": "销售分析", "fontSize": 18}`

### 15. description (可选)

- **说明**: 图表描述,用于可访问性(ARIA)
- **类型**: string
- **应用**: 屏幕阅读器、元数据
- **示例**: `"description": "展示2023年各月销售额的柱状图"`

---

## 生成示例

### 示例 1: 基础柱状图 - 销售数据 (简单场景)

**业务需求**: 展示不同产品类别的销售额

**生成代码**:
```json
{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "产品类别销售额柱状图",
  "data": {
    "values": [
      {"category": "电子产品", "sales": 128000},
      {"category": "服装", "sales": 85000},
      {"category": "食品", "sales": 62000},
      {"category": "图书", "sales": 43000},
      {"category": "家居", "sales": 97000}
    ]
  },
  "mark": "bar",
  "encoding": {
    "x": {
      "field": "category",
      "type": "nominal",
      "axis": {"title": "产品类别", "labelAngle": 0}
    },
    "y": {
      "field": "sales",
      "type": "quantitative",
      "axis": {"title": "销售额 (元)", "format": ",.0f"}
    },
    "color": {
      "field": "category",
      "type": "nominal",
      "legend": null
    }
  },
  "width": 400,
  "height": 300
}
```

**关键点**:
- 使用 `nominal` 类型表示分类数据
- 使用 `quantitative` 类型表示数值数据
- `format: ",.0f"` 添加千分位分隔符
- `legend: null` 隐藏不必要的颜色图例
- 每个字段都有清晰的 `axis.title`

---

### 示例 2: 折线图 - 时间序列 (中等复杂度)

**业务需求**: 展示2023年每月网站访问量趋势

**生成代码**:
```json
{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "2023年月度网站访问量趋势图",
  "title": {
    "text": "2023年网站访问量趋势",
    "fontSize": 18,
    "anchor": "start"
  },
  "data": {
    "values": [
      {"month": "2023-01", "visits": 45000},
      {"month": "2023-02", "visits": 48000},
      {"month": "2023-03", "visits": 52000},
      {"month": "2023-04", "visits": 49000},
      {"month": "2023-05", "visits": 55000},
      {"month": "2023-06", "visits": 58000},
      {"month": "2023-07", "visits": 62000},
      {"month": "2023-08", "visits": 59000},
      {"month": "2023-09", "visits": 64000},
      {"month": "2023-10", "visits": 68000},
      {"month": "2023-11", "visits": 71000},
      {"month": "2023-12", "visits": 75000}
    ]
  },
  "mark": {
    "type": "line",
    "point": true,
    "tooltip": true
  },
  "encoding": {
    "x": {
      "field": "month",
      "type": "temporal",
      "timeUnit": "yearmonth",
      "axis": {
        "title": "月份",
        "format": "%Y-%m",
        "labelAngle": -45
      }
    },
    "y": {
      "field": "visits",
      "type": "quantitative",
      "axis": {
        "title": "访问量",
        "format": ",.0f"
      },
      "scale": {"zero": true}
    }
  },
  "width": 600,
  "height": 350
}
```

**关键点**:
- 使用 `temporal` 类型处理时间数据
- `timeUnit: "yearmonth"` 按月分组
- `point: true` 在线上添加数据点标记
- `tooltip: true` 启用悬浮提示
- `scale.zero: true` 确保 Y 轴从零开始
- `format: "%Y-%m"` 时间格式化

---

### 示例 3: 分组柱状图 - 多维度对比 (高级场景)

**业务需求**: 对比2022年和2023年各季度销售额

**生成代码**:
```json
{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "2022-2023年季度销售额对比",
  "title": "年度季度销售额对比",
  "data": {
    "values": [
      {"quarter": "Q1", "year": "2022", "sales": 320000},
      {"quarter": "Q2", "year": "2022", "sales": 358000},
      {"quarter": "Q3", "year": "2022", "sales": 375000},
      {"quarter": "Q4", "year": "2022", "sales": 410000},
      {"quarter": "Q1", "year": "2023", "sales": 380000},
      {"quarter": "Q2", "year": "2023", "sales": 425000},
      {"quarter": "Q3", "year": "2023", "sales": 448000},
      {"quarter": "Q4", "year": "2023", "sales": 492000}
    ]
  },
  "mark": "bar",
  "encoding": {
    "x": {
      "field": "quarter",
      "type": "ordinal",
      "axis": {"title": "季度", "labelAngle": 0}
    },
    "y": {
      "field": "sales",
      "type": "quantitative",
      "axis": {"title": "销售额 (元)", "format": ",.0f"}
    },
    "color": {
      "field": "year",
      "type": "nominal",
      "scale": {"scheme": "category10"},
      "legend": {"title": "年份", "orient": "top"}
    },
    "xOffset": {"field": "year"}
  },
  "width": 500,
  "height": 350
}
```

**关键点**:
- `ordinal` 类型保持季度顺序 (Q1, Q2, Q3, Q4)
- `xOffset` 实现分组柱状图效果
- `scale.scheme` 使用预定义颜色方案
- `legend.orient: "top"` 图例置于顶部
- 数据结构采用长格式 (每行一个观测值)

---

### 示例 4: 散点图 - 相关性分析 (专业场景)

**业务需求**: 分析广告支出与销售额的相关性

**生成代码**:
```json
{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "广告支出与销售额相关性散点图",
  "title": "广告投入 vs 销售额",
  "data": {
    "values": [
      {"ad_spend": 5000, "sales": 28000, "region": "华东"},
      {"ad_spend": 7500, "sales": 35000, "region": "华东"},
      {"ad_spend": 10000, "sales": 42000, "region": "华东"},
      {"ad_spend": 12500, "sales": 48000, "region": "华东"},
      {"ad_spend": 6000, "sales": 30000, "region": "华南"},
      {"ad_spend": 8000, "sales": 38000, "region": "华南"},
      {"ad_spend": 11000, "sales": 45000, "region": "华南"},
      {"ad_spend": 4500, "sales": 25000, "region": "华北"},
      {"ad_spend": 9000, "sales": 40000, "region": "华北"},
      {"ad_spend": 13000, "sales": 52000, "region": "华北"}
    ]
  },
  "mark": {
    "type": "point",
    "filled": true,
    "size": 100
  },
  "encoding": {
    "x": {
      "field": "ad_spend",
      "type": "quantitative",
      "axis": {"title": "广告支出 (元)", "format": ",.0f"},
      "scale": {"zero": false}
    },
    "y": {
      "field": "sales",
      "type": "quantitative",
      "axis": {"title": "销售额 (元)", "format": ",.0f"},
      "scale": {"zero": false}
    },
    "color": {
      "field": "region",
      "type": "nominal",
      "scale": {"scheme": "set2"},
      "legend": {"title": "地区"}
    },
    "tooltip": [
      {"field": "ad_spend", "type": "quantitative", "title": "广告支出", "format": ",.0f"},
      {"field": "sales", "type": "quantitative", "title": "销售额", "format": ",.0f"},
      {"field": "region", "type": "nominal", "title": "地区"}
    ]
  },
  "width": 550,
  "height": 400
}
```

**关键点**:
- `filled: true` 填充点标记
- `scale.zero: false` 不强制从零开始,更好展示相关性
- `tooltip` 数组定义多字段提示信息
- `scheme: "set2"` 使用柔和的分类颜色
- 每个 tooltip 字段都有独立的格式化

---

### 示例 5: 堆叠面积图 - 组成分析 (复杂场景)

**业务需求**: 展示各产品类别占总销售额的比例变化

**生成代码**:
```json
{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "产品类别销售额堆叠面积图",
  "title": "2023年产品类别销售占比趋势",
  "data": {
    "values": [
      {"month": "2023-01", "category": "电子产品", "sales": 45000},
      {"month": "2023-01", "category": "服装", "sales": 32000},
      {"month": "2023-01", "category": "食品", "sales": 28000},
      {"month": "2023-02", "category": "电子产品", "sales": 48000},
      {"month": "2023-02", "category": "服装", "sales": 35000},
      {"month": "2023-02", "category": "食品", "sales": 30000},
      {"month": "2023-03", "category": "电子产品", "sales": 52000},
      {"month": "2023-03", "category": "服装", "sales": 38000},
      {"month": "2023-03", "category": "食品", "sales": 33000},
      {"month": "2023-04", "category": "电子产品", "sales": 55000},
      {"month": "2023-04", "category": "服装", "sales": 40000},
      {"month": "2023-04", "category": "食品", "sales": 35000}
    ]
  },
  "mark": {
    "type": "area",
    "opacity": 0.7
  },
  "encoding": {
    "x": {
      "field": "month",
      "type": "temporal",
      "timeUnit": "yearmonth",
      "axis": {
        "title": "月份",
        "format": "%Y-%m"
      }
    },
    "y": {
      "field": "sales",
      "type": "quantitative",
      "aggregate": "sum",
      "axis": {
        "title": "总销售额 (元)",
        "format": ",.0f"
      }
    },
    "color": {
      "field": "category",
      "type": "nominal",
      "scale": {"scheme": "tableau10"},
      "legend": {"title": "产品类别"}
    }
  },
  "width": 600,
  "height": 350
}
```

**关键点**:
- `type: "area"` 创建面积图
- `aggregate: "sum"` 自动堆叠各类别
- `opacity: 0.7` 半透明效果
- 长格式数据(每行一个月份+类别组合)
- Vega-Lite 自动处理堆叠逻辑

---

### 示例 6: 热力图 - 矩阵可视化 (专业场景)

**业务需求**: 展示一周内各时段的网站流量热力图

**生成代码**:
```json
{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "网站流量热力图",
  "title": "一周内各时段流量分布",
  "data": {
    "values": [
      {"day": "周一", "hour": "00:00-06:00", "traffic": 120},
      {"day": "周一", "hour": "06:00-12:00", "traffic": 850},
      {"day": "周一", "hour": "12:00-18:00", "traffic": 1200},
      {"day": "周一", "hour": "18:00-24:00", "traffic": 980},
      {"day": "周二", "hour": "00:00-06:00", "traffic": 130},
      {"day": "周二", "hour": "06:00-12:00", "traffic": 920},
      {"day": "周二", "hour": "12:00-18:00", "traffic": 1350},
      {"day": "周二", "hour": "18:00-24:00", "traffic": 1100},
      {"day": "周三", "hour": "00:00-06:00", "traffic": 125},
      {"day": "周三", "hour": "06:00-12:00", "traffic": 980},
      {"day": "周三", "hour": "12:00-18:00", "traffic": 1400},
      {"day": "周三", "hour": "18:00-24:00", "traffic": 1180},
      {"day": "周四", "hour": "00:00-06:00", "traffic": 135},
      {"day": "周四", "hour": "06:00-12:00", "traffic": 1050},
      {"day": "周四", "hour": "12:00-18:00", "traffic": 1480},
      {"day": "周四", "hour": "18:00-24:00", "traffic": 1250},
      {"day": "周五", "hour": "00:00-06:00", "traffic": 140},
      {"day": "周五", "hour": "06:00-12:00", "traffic": 1100},
      {"day": "周五", "hour": "12:00-18:00", "traffic": 1550},
      {"day": "周五", "hour": "18:00-24:00", "traffic": 1350}
    ]
  },
  "mark": "rect",
  "encoding": {
    "x": {
      "field": "hour",
      "type": "ordinal",
      "axis": {"title": "时段", "labelAngle": -45}
    },
    "y": {
      "field": "day",
      "type": "ordinal",
      "axis": {"title": "星期"}
    },
    "color": {
      "field": "traffic",
      "type": "quantitative",
      "scale": {"scheme": "blues"},
      "legend": {"title": "流量"}
    }
  },
  "width": 450,
  "height": 250
}
```

**关键点**:
- `mark: "rect"` 创建矩形热力图
- 两个 `ordinal` 轴形成网格
- `scheme: "blues"` 使用渐变色表示数值
- 数据格式为每个单元格一行
- 自动映射数值到颜色深浅

---

## 常见错误

### 错误 1: 缺少必需的 $schema 属性

**❌ 错误代码**:
```json
{
  "data": {"values": [...]},
  "mark": "bar"
}
```

**错误原因**: 缺少 `$schema` 导致无法验证规范版本

**✅ 正确代码**:
```json
{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "data": {"values": [...]},
  "mark": "bar",
  "encoding": {...}
}
```

**说明**: `$schema` 必须是第一个属性,确保使用正确的版本 URL

---

### 错误 2: encoding 中缺少 type 属性

**❌ 错误代码**:
```json
"encoding": {
  "x": {"field": "category"},
  "y": {"field": "value"}
}
```

**错误原因**: 缺少 `type` 导致 Vega-Lite 无法推断数据类型

**✅ 正确代码**:
```json
"encoding": {
  "x": {"field": "category", "type": "nominal"},
  "y": {"field": "value", "type": "quantitative"}
}
```

**说明**: 每个编码通道必须指定数据类型 (quantitative/nominal/ordinal/temporal)

---

### 错误 3: 数据类型与标记类型不匹配

**❌ 错误代码**:
```json
{
  "mark": "line",
  "encoding": {
    "x": {"field": "category", "type": "nominal"},
    "y": {"field": "value", "type": "quantitative"}
  }
}
```

**错误原因**: 折线图通常需要有序的 X 轴 (temporal 或 quantitative),而非 nominal

**✅ 正确代码**:
```json
{
  "mark": "line",
  "encoding": {
    "x": {"field": "date", "type": "temporal"},
    "y": {"field": "value", "type": "quantitative"}
  }
}
```

**说明**: 折线图适合展示趋势,X 轴应该是连续或有序的类型

---

### 错误 4: 聚合函数使用不当

**❌ 错误代码**:
```json
"encoding": {
  "x": {"field": "category", "type": "nominal"},
  "y": {"field": "name", "type": "nominal", "aggregate": "sum"}
}
```

**错误原因**: 文本字段 (nominal) 不能使用 `sum` 聚合

**✅ 正确代码**:
```json
"encoding": {
  "x": {"field": "category", "type": "nominal"},
  "y": {"aggregate": "count", "type": "quantitative"}
}
```

**说明**: 数值聚合 (sum/mean) 只能用于 quantitative 类型,nominal 只能用 count

---

### 错误 5: 时间格式不正确

**❌ 错误代码**:
```json
"data": {
  "values": [
    {"date": "01/15/2023", "value": 100}
  ]
}
```

**错误原因**: 日期格式不符合 ISO 8601 标准

**✅ 正确代码**:
```json
"data": {
  "values": [
    {"date": "2023-01-15", "value": 100}
  ]
}
```

**说明**: 时间数据应使用 ISO 8601 格式 (YYYY-MM-DD 或 YYYY-MM-DDTHH:MM:SS)

---

### 错误 6: transform 位置错误

**❌ 错误代码**:
```json
{
  "data": {...},
  "mark": "bar",
  "encoding": {
    "x": {"field": "category", "type": "nominal"},
    "transform": [{"filter": "datum.value > 50"}]
  }
}
```

**错误原因**: `transform` 应该在顶层,而非 encoding 内部

**✅ 正确代码**:
```json
{
  "data": {...},
  "transform": [{"filter": "datum.value > 50"}],
  "mark": "bar",
  "encoding": {
    "x": {"field": "category", "type": "nominal"}
  }
}
```

**说明**: `transform` 是顶层属性,与 data、mark、encoding 平级

---

### 错误 7: JSON 语法错误 - 多余的逗号

**❌ 错误代码**:
```json
{
  "mark": "bar",
  "encoding": {
    "x": {"field": "a", "type": "nominal"},
    "y": {"field": "b", "type": "quantitative"},
  }
}
```

**错误原因**: 最后一个属性后面不应有逗号

**✅ 正确代码**:
```json
{
  "mark": "bar",
  "encoding": {
    "x": {"field": "a", "type": "nominal"},
    "y": {"field": "b", "type": "quantitative"}
  }
}
```

**说明**: JSON 对象和数组的最后一项不能有尾随逗号

---

### 错误 8: 颜色编码缺少 type

**❌ 错误代码**:
```json
"encoding": {
  "color": {"field": "category"}
}
```

**错误原因**: 颜色通道也需要指定数据类型

**✅ 正确代码**:
```json
"encoding": {
  "color": {"field": "category", "type": "nominal"}
}
```

**说明**: 所有编码通道 (包括 color, size, shape) 都需要 type 属性

---

## 生成检查清单

### JSON 结构验证
- [ ] 包含 `$schema` 属性且指向正确的版本 URL
- [ ] 包含 `data` 属性 (values 或 url)
- [ ] 包含 `mark` 属性且为有效的标记类型
- [ ] 包含 `encoding` 属性且至少有一个编码通道
- [ ] JSON 格式有效 (无语法错误,无尾随逗号)

### 编码通道验证
- [ ] 所有编码通道都有 `field` 和 `type` 属性
- [ ] `type` 值为有效类型 (quantitative/nominal/ordinal/temporal)
- [ ] 数据类型与字段语义匹配 (数值用 quantitative,分类用 nominal)
- [ ] 聚合函数与数据类型兼容 (count 可用于任何类型,sum/mean 仅用于 quantitative)
- [ ] 时间字段使用 `temporal` 类型且数据为 ISO 8601 格式

### 标记类型验证
- [ ] 标记类型适合数据结构 (柱状图用于分类对比,折线图用于趋势)
- [ ] 编码通道与标记类型匹配 (折线图需要有序 X 轴)
- [ ] 如使用对象形式,`type` 属性正确设置

### 数据验证
- [ ] 数据结构完整 (所有字段在 encoding 中被引用)
- [ ] 数据类型一致 (同一字段的值类型统一)
- [ ] 日期字段使用标准格式 (YYYY-MM-DD)
- [ ] 数值字段为 number 类型,非字符串

### 样式配置验证
- [ ] 轴标题清晰且使用中文
- [ ] 数值格式化合理 (使用 format 属性)
- [ ] 颜色方案适当 (使用预定义 scheme 或自定义 range)
- [ ] 图表尺寸合理 (width/height 适合内容)

### 可访问性验证
- [ ] 包含 `description` 属性
- [ ] 包含 `title` 属性 (如适用)
- [ ] 颜色对比度足够 (避免纯红绿对比)
- [ ] 提供 tooltip 增强交互性

---

## 高级特性

### 1. 多视图组合 - Layer (图层叠加)

**说明**: 在同一坐标系中叠加多个标记类型

**示例**: 折线图 + 数据点 + 均值线
```json
{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "data": {"values": [...]},
  "layer": [
    {
      "mark": "line",
      "encoding": {
        "x": {"field": "date", "type": "temporal"},
        "y": {"field": "value", "type": "quantitative"}
      }
    },
    {
      "mark": {"type": "point", "filled": true},
      "encoding": {
        "x": {"field": "date", "type": "temporal"},
        "y": {"field": "value", "type": "quantitative"}
      }
    },
    {
      "mark": "rule",
      "encoding": {
        "y": {"aggregate": "mean", "field": "value", "type": "quantitative"}
      }
    }
  ]
}
```

**应用**: 增强信息表达,组合多种视觉编码

---

### 2. 多视图组合 - Facet (分面)

**说明**: 基于数据字段创建多个子图

**示例**: 按地区分面的销售趋势
```json
{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "data": {"values": [...]},
  "facet": {
    "field": "region",
    "type": "nominal",
    "columns": 2
  },
  "spec": {
    "mark": "line",
    "encoding": {
      "x": {"field": "month", "type": "temporal"},
      "y": {"field": "sales", "type": "quantitative"}
    }
  }
}
```

**应用**: 对比多个分组,探索子集模式

---

### 3. 交互选择 - Selection

**说明**: 支持用户交互选择数据点

**示例**: 点击高亮选择
```json
{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "data": {"values": [...]},
  "params": [
    {
      "name": "highlight",
      "select": {"type": "point", "on": "mouseover"}
    }
  ],
  "mark": "circle",
  "encoding": {
    "x": {"field": "x", "type": "quantitative"},
    "y": {"field": "y", "type": "quantitative"},
    "opacity": {
      "condition": {"param": "highlight", "value": 1},
      "value": 0.3
    }
  }
}
```

**应用**: 交互式数据探索,高亮关注点

---

### 4. 数据变换 - Calculate

**说明**: 计算派生字段

**示例**: 计算利润率
```json
{
  "transform": [
    {
      "calculate": "(datum.revenue - datum.cost) / datum.revenue * 100",
      "as": "profit_margin"
    }
  ],
  "mark": "bar",
  "encoding": {
    "x": {"field": "product", "type": "nominal"},
    "y": {"field": "profit_margin", "type": "quantitative"}
  }
}
```

**应用**: 避免数据预处理,直接在可视化中计算

---

### 5. 数据变换 - Filter

**说明**: 过滤数据子集

**示例**: 只显示销售额大于10万的产品
```json
{
  "transform": [
    {"filter": "datum.sales > 100000"}
  ],
  "mark": "bar",
  "encoding": {
    "x": {"field": "product", "type": "nominal"},
    "y": {"field": "sales", "type": "quantitative"}
  }
}
```

**应用**: 聚焦重要数据,去除噪声

---

### 6. 参数化配置 - Params

**说明**: 定义可复用的参数

**示例**: 动态阈值线
```json
{
  "params": [
    {"name": "threshold", "value": 50000}
  ],
  "layer": [
    {
      "mark": "bar",
      "encoding": {
        "x": {"field": "product", "type": "nominal"},
        "y": {"field": "sales", "type": "quantitative"}
      }
    },
    {
      "mark": "rule",
      "encoding": {
        "y": {"datum": {"expr": "threshold"}}
      }
    }
  ]
}
```

**应用**: 参数化阈值、筛选条件、颜色方案

---

### 7. 条件编码 - Condition

**说明**: 基于条件应用不同的编码

**示例**: 超过目标值用绿色,否则用红色
```json
{
  "mark": "bar",
  "encoding": {
    "x": {"field": "product", "type": "nominal"},
    "y": {"field": "sales", "type": "quantitative"},
    "color": {
      "condition": {
        "test": "datum.sales >= datum.target",
        "value": "green"
      },
      "value": "red"
    }
  }
}
```

**应用**: 突出异常值,可视化目标达成

---

## 样式配置

### 1. 全局样式配置 (config)

**说明**: 在顶层定义全局样式

**推荐配置**:
```json
{
  "config": {
    "view": {"strokeWidth": 0},
    "axis": {
      "labelFontSize": 12,
      "titleFontSize": 14,
      "titleFontWeight": "normal",
      "grid": true,
      "gridOpacity": 0.3
    },
    "legend": {
      "labelFontSize": 12,
      "titleFontSize": 13
    },
    "mark": {"tooltip": true}
  }
}
```

**效果**: 统一图表风格,减少重复配置

---

### 2. 颜色方案推荐

**说明**: 使用预定义颜色方案

**推荐方案**:
- **分类数据**: `category10`, `category20`, `tableau10`, `set2`
- **连续数据**: `blues`, `greens`, `reds`, `viridis`, `plasma`
- **发散数据**: `redblue`, `purplegreen`, `blueorange`

**示例**:
```json
"color": {
  "field": "category",
  "type": "nominal",
  "scale": {"scheme": "tableau10"}
}
```

---

### 3. 响应式尺寸

**说明**: 自适应容器宽度

**推荐配置**:
```json
{
  "width": "container",
  "height": 400,
  "autosize": {
    "type": "fit",
    "contains": "padding"
  }
}
```

**效果**: 图表自动适应父容器宽度

---

## 数据类型选择指南

### Quantitative (定量)
**适用**: 连续数值,可进行数学运算
- 销售额、温度、年龄、距离
- 支持: sum, mean, min, max 等聚合

### Nominal (定性)
**适用**: 无序分类
- 产品名称、颜色、地区
- 支持: count, distinct 聚合

### Ordinal (有序)
**适用**: 有序分类
- 评级(低/中/高)、学历(本科/硕士/博士)
- 支持: 自定义排序

### Temporal (时间)
**适用**: 日期时间
- 日期、时间戳
- 支持: timeUnit 分组

---

## 标记类型选择指南

| 标记类型 | 适用场景 | 编码要求 | 示例 |
|---------|---------|---------|------|
| **bar** | 分类对比、排名 | x: nominal/ordinal, y: quantitative | 销售额对比 |
| **line** | 时间趋势、连续变化 | x: temporal/quantitative, y: quantitative | 股价走势 |
| **point** | 分布、相关性 | x: quantitative, y: quantitative | 广告效果分析 |
| **area** | 累计趋势、组成 | x: temporal, y: quantitative + color | 市场份额变化 |
| **rect** | 二维矩阵、热力图 | x: ordinal, y: ordinal, color: quantitative | 时段流量 |
| **circle** | 气泡图、带大小维度 | x/y: quantitative, size: quantitative | 三维数据展示 |
| **arc** | 比例、组成 | theta: quantitative, color: nominal | 市场份额饼图 |

---

## 最佳实践

### 数据准备
- ✅ 使用长格式数据 (每行一个观测值)
- ✅ 时间字段使用 ISO 8601 格式
- ✅ 数值字段为 number 类型,非字符串
- ✅ 字段命名清晰且一致

### 视觉编码
- ✅ 位置编码优先 (x, y 最易识别)
- ✅ 长度编码优于面积编码
- ✅ 避免过多颜色分类 (≤7种)
- ✅ 使用冗余编码增强信息 (颜色+形状)

### 样式设计
- ✅ 提供清晰的轴标题和单位
- ✅ 使用千分位分隔符格式化数值
- ✅ 合理设置坐标轴范围 (避免误导)
- ✅ 添加 tooltip 增强交互性

### 性能优化
- ✅ 大数据集 (>1000行) 使用外部 URL
- ✅ 避免过度嵌套的 layer/facet
- ✅ 合理使用 transform 预处理数据
- ✅ 限制可视化元素数量 (<500个标记)

---

**最后更新**: 2025-10-10
**文档版本**: 1.0.0
**维护者**: DiagramAI Team
