# ============================================
# L2 语言层模板 v1.0.0
# PacketDiag 语言的通用规范
# ============================================

[meta]
level = "L2"
language = "packetdiag"
version = "1.0.0"
description = "PacketDiag 网络数据包图语言通用规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 可选: 语言相关的元数据
kroki_support = true
official_docs = "http://blockdiag.com/en/nwdiag/packetdiag-examples.html"

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "网络协议专家",
  "PacketDiag 语法专家",
  "数据包结构设计师"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **图表声明语法**: 所有 PacketDiag 代码必须使用 `packetdiag {}` 关键字包裹。缺少图表声明会导致编译失败。
  """,

  """
  **必须定义 colwidth**: PacketDiag 必须在开头定义 `colwidth` 属性，指定每行的位宽（必须是 8、16 或 32）。缺少 `colwidth` 会导致编译失败。
  """,

  """
  **字段位范围不能重叠**: 字段的位范围（如 `0-15`、`16-31`）不能重叠。重叠会导致渲染异常或编译错误。
  """,

  """
  **位编号从 0 开始**: 字段位编号必须从 0 开始，如 `0-15`、`16-31`，而非从 1 开始。使用错误的起始位会导致语法错误。
  """,

  """
  **起始位必须小于或等于结束位**: 位范围格式必须是 `起始位-结束位`，其中起始位 ≤ 结束位，如 `0-15`、`16-31`。起始位大于结束位会导致语法错误。
  """,

  """
  **中文标签必须使用双引号包裹**: 包含中文、空格或特殊字符的字段名称必须使用双引号 `"..."` 包裹，否则会导致语法错误。
  """,

  """
  **字段位范围单位**: 字段位范围以比特（bit）为单位。例如 `colwidth = 32` 表示每行 32 比特（4 字节），`0-15` 表示字段占用 16 比特（2 字节）。
  """,

  """
  **Kroki 兼容性**: 生成的代码必须能被 Kroki 成功渲染，避免使用 Kroki 不支持的 PacketDiag 特性。
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别协议或结构需求**:
  - 确定是单一协议数据包（如 TCP、UDP、IP）还是协议栈（多层封装）
  - 识别协议头部的所有字段
  - 确定每个字段的位宽和位置
  - 识别字段的逻辑分组（如控制字段、地址字段、数据字段）
  """,

  """
  **2. 规划位范围分配**:
  - 确定 `colwidth` 值（通常 32 或 64 比特）
  - 计算每个字段的位范围（从 0 开始）
  - 确保所有字段位范围无重叠且连续
  - 规划字段分组和层次（对于协议栈）
  """,

  """
  **3. 应用 PacketDiag 语法**:
  - 使用 `packetdiag {}` 包裹所有内容
  - 定义 `colwidth` 和可选的 `node_height`
  - 按位范围顺序定义所有字段
  - 使用 `color` 属性区分不同类型的字段
  - 使用 `rotate` 或 `colheight` 优化空间受限的字段
  """,

  """
  **4. 验证和优化**:
  - 验证所有字段位范围从 0 开始且无重叠
  - 检查字段位宽与协议标准一致
  - 确认字段标签清晰且使用双引号（如有中文）
  - 使用颜色区分不同功能的字段，提高可读性
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **PacketDiag 语法验证**: 代码必须符合 PacketDiag 官方语法规范，无语法错误，能被 PacketDiag 解析器成功解析。
  """,

  """
  **Kroki 渲染测试**: 代码必须能被 Kroki 成功渲染为 SVG 图像，无渲染错误或警告。
  """,

  """
  **字段布局准确性**:
  - 所有字段位范围从 0 开始且连续无重叠
  - 字段位宽与协议标准一致（如 TCP 源端口 16 位）
  - colwidth 值合理（通常 32 或 64）
  - 字段排列顺序符合协议规范
  """,

  """
  **可读性和专业性**:
  - 字段名称清晰准确，反映协议标准术语
  - 使用颜色区分不同功能的字段（如控制字段、地址字段）
  - 关键字段有适当的视觉强调
  - 协议栈图分层清晰，颜色区分明显
  """
]
