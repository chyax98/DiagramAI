# ============================================
# L3 类型层 v1.0.0
# C4-PlantUML Context (系统上下文图) 规范
# ============================================

[meta]
level = "L3"
language = "c4plantuml"
diagram_type = "context"
version = "1.0.0"
description = "C4-PlantUML 系统上下文图规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关的元数据
complexity = "low"
target_length = 2400
use_cases = ["系统边界识别", "外部依赖分析", "业务全景视图", "利益相关者沟通"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "系统边界分析专家 - 识别系统与外部实体的交互边界",
  "业务架构师 - 从业务视角抽象系统功能和外部关系"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **Context 图专用库引用**: 必须使用 `!include <C4/C4_Context>` 或 `!include <C4/C4_Container>` (Container 库包含 Context 元素):
  ```plantuml
  @startuml
  !include <C4/C4_Context>
  ' 或 !include <C4/C4_Container>
  @enduml
  ```
  ❌ 绝对禁止空的 `!include`,这是历史 60% 失败的根本原因。
  """,

  """
  **元素类型约束**: Context 图只能使用以下元素类型:
  - `Person(alias, "名称", "描述")` - 内部用户
  - `Person_Ext(alias, "名称", "描述")` - 外部用户
  - `System(alias, "名称", "描述")` - 目标系统 (通常 1-2 个)
  - `System_Ext(alias, "名称", "描述")` - 外部系统/第三方服务
  - `System_Boundary(alias, "边界名称")` - 系统边界分组
  - `Enterprise_Boundary(alias, "企业边界")` - 企业级边界 (可选)

  ❌ 禁止使用 Container、Component、ContainerDb 等低层次元素。
  """,

  """
  **抽象层次约束**: Context 图必须保持高层抽象,聚焦系统级交互:
  - 不展示系统内部的容器 (如 Web 应用、API 服务、数据库)
  - 不展示技术实现细节 (如编程语言、框架)
  - 关系描述使用业务语言,避免技术术语 (如 API 路径、HTTP 方法)
  - 示例: "下单购买" 而非 "POST /api/orders"
  """,

  """
  **目标系统标识约束**: 目标系统 (正在设计的系统) 必须使用 `System`,不能使用 `System_Ext`:
  ```plantuml
  ✅ 正确: System(shop, "在线购物系统", "核心业务系统")
  ❌ 错误: System_Ext(shop, "在线购物系统")
  ```
  外部系统、第三方服务必须使用 `System_Ext`。
  """,

  """
  **元素数量约束**: Context 图应保持简洁,避免过度复杂:
  - 系统数量: 3-10 个 (推荐)
  - 人员数量: 1-5 个 (推荐)
  - 总元素数: 建议 ≤ 15 个
  - 过多元素应考虑拆分为多个子图或使用边界分组
  """,

  """
  **元素描述完整性**: 所有元素必须包含名称和描述参数:
  ```plantuml
  ✅ 正确: Person(user, "用户", "在线购物的终端用户")
  ❌ 错误: Person(user, "用户")  // 缺少描述
  ```
  完整的描述有助于理解每个元素的职责和角色。
  """,

  """
  **布局和图例约束**: 推荐使用以下布局宏增强可读性:
  - `LAYOUT_WITH_LEGEND()` - 推荐,自动处理布局和图例
  - 或分别使用: `LAYOUT_TOP_DOWN()` / `LAYOUT_LEFT_RIGHT()` + `SHOW_FLOATING_LEGEND()`
  - 避免使用 `SHOW_LEGEND()` (占用额外空白),推荐 `SHOW_FLOATING_LEGEND()`
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别核心系统**: 确定正在设计的目标系统:
  - 明确系统的核心职责和业务功能
  - 通常只有 1-2 个目标系统 (使用 `System`)
  - 目标系统是图表的中心,所有交互围绕它展开
  - 示例: 在线购物系统、ERP 系统、微服务平台
  """,

  """
  **2. 识别外部实体**: 找出与系统交互的所有外部实体:
  - **人员**: 系统的用户和参与者
    - 内部用户 (员工、管理员): `Person`
    - 外部用户 (客户、访客): `Person_Ext`
  - **外部系统**: 第三方服务和遗留系统
    - 支付系统、短信服务、CRM 系统: `System_Ext`
    - 数据分析平台、监控系统: `System_Ext`
  """,

  """
  **3. 设计边界和分组**: 使用边界明确系统范围:
  - `System_Boundary(alias, "系统名称")` - 对相关系统进行逻辑分组
  - `Enterprise_Boundary(alias, "企业边界")` - 定义企业级边界 (可选)
  - 边界帮助区分"我们的系统"和"外部系统"
  - 示例: 将多个微服务抽象为一个系统放在边界内
  """,

  """
  **4. 定义交互关系**: 使用业务语言描述系统间的交互:
  - 使用 `Rel(from, to, "业务描述", "通信方式")` 定义关系
  - 关系描述聚焦"做什么",而非"怎么做"
  - 标注高层通信方式: HTTPS、API、邮件、消息队列
  - 示例:
    - "浏览商品、下单购买" (业务语言)
    - "HTTPS" (通信方式)
  """,

  """
  **5. 应用布局优化**: 使用布局宏改善图表可读性:
  - 推荐使用 `LAYOUT_WITH_LEGEND()` 一步完成布局和图例
  - 或使用 `LAYOUT_TOP_DOWN()` / `LAYOUT_LEFT_RIGHT()` 控制方向
  - 添加图表标题: `title 系统上下文图 - XXX系统`
  - 检查元素数量,过多时考虑拆分或使用边界分组
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **库引用完整性**:
  - 必须包含 `@startuml/@enduml` 包裹
  - 必须包含完整的库引用: `!include <C4/C4_Context>` 或 `!include <C4/C4_Container>`
  - 绝对不能出现空的 `!include` (导致 "Error 400: cannot include")
  - 能被 Kroki 成功渲染,无语法错误
  """,

  """
  **抽象层次一致性**:
  - 只使用 Person、Person_Ext、System、System_Ext、System_Boundary、Enterprise_Boundary
  - 不包含 Container、Component、ContainerDb 等低层次元素
  - 不展示系统内部结构 (如数据库、服务、API)
  - 关系描述使用业务语言,避免技术细节
  """,

  """
  **元素标识正确性**:
  - 目标系统使用 `System`,外部系统使用 `System_Ext`
  - 内部用户使用 `Person`,外部用户使用 `Person_Ext`
  - 所有元素包含完整的名称和描述参数
  - 元素总数适中 (建议 5-15 个),避免过度复杂
  """,

  """
  **关系描述业务化**:
  - 关系描述使用业务语言 (如 "下单购买"、"处理支付")
  - 通信方式标注高层协议 (HTTPS、API、邮件、消息队列)
  - 避免技术细节 (如 "POST /api/orders"、"SQL 查询")
  - 关系数量合理,只保留核心交互
  """,

  """
  **可读性和专业性**:
  - 推荐使用 `LAYOUT_WITH_LEGEND()` 或 `SHOW_FLOATING_LEGEND()`
  - 图表包含有意义的标题 (如 "系统上下文图 - 在线购物系统")
  - 布局合理,元素分布均匀,避免拥挤
  - 关系线不交叉或交叉最少
  - 适当使用边界 (System_Boundary) 增强结构清晰度
  """
]
