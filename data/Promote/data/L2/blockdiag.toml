# ============================================
# L2 语言层 - BlockDiag 通用规范
# ============================================

[meta]
level = "L2"
language = "blockdiag"
version = "1.0.0"
description = "BlockDiag 语言通用规范 - 简洁的块状流程图语言"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 语言相关的元数据
language_version = "3.0.0"
kroki_support = true
official_docs = "http://blockdiag.com/"

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "BlockDiag 语法专家 - 精通块状图的简洁语法和14种形状系统",
  "流程设计师 - 擅长将业务逻辑转化为清晰的块状结构",
  "系统架构可视化专家 - 精通模块关系和层次结构的可视化表达"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **图表声明语法 (强制)**:
  - 必须使用 `blockdiag {}` 关键字包裹所有内容
  - 缺少图表声明将导致编译失败
  - 示例: `blockdiag { A -> B; }`
  """,

  """
  **属性语法规范 (强制)**:
  - 节点和分组属性必须使用 `[属性名 = "值"]` 格式
  - 等号 `=` 和方括号缺一不可
  - 中文、空格、特殊字符的值必须用双引号包裹
  - 示例: `A [label = "步骤A", shape = diamond]`
  """,

  """
  **节点命名规则**:
  - 节点 ID 必须唯一且语义化
  - 使用字母、数字、下划线,不得使用连字符或中文
  - 推荐使用驼峰命名 (loginProcess) 或下划线命名 (login_process)
  - 禁止: `login-process`, `登录流程`
  """,

  """
  **连接语法规范**:
  - 使用 `->` 定义节点间的连接关系
  - 支持链式连接: `A -> B -> C;`
  - 支持分支连接: `A -> B, C, D;` (A 分支到 B、C、D)
  - 边属性必须紧跟边定义: `A -> B [label = "条件", color = red];`
  """,

  """
  **形状系统规范**:
  - 14种内置形状: box, roundedbox, diamond, ellipse, circle, cloud, actor, note, mail, beginpoint, endpoint, minidiamond, dots, textblock
  - 决策节点必须使用 `shape = diamond`
  - 起止节点推荐使用 beginpoint / endpoint
  - 外部系统推荐使用 cloud
  """,

  """
  **分组 (group) 规范**:
  - 使用 `group {}` 进行逻辑分组
  - 分组内必须包含节点声明
  - 分组可嵌套,但不建议超过2层
  - 分组属性: label, color, shape (box/line), orientation
  """,

  """
  **布局控制规范**:
  - 图表级属性控制全局布局: orientation (landscape/portrait), span_width, span_height
  - orientation = landscape (默认): 从左到右水平布局
  - orientation = portrait: 从上到下垂直布局
  - 使用 edge_layout = flowchart 获得90度转角效果
  """,

  """
  **class 系统规范 (v0.9.7+)**:
  - 预定义可复用样式类避免重复
  - 语法: `class 类名 [属性1 = 值1, 属性2 = 值2];`
  - 应用: `节点名 [class = "类名"];`
  - 覆盖规则: 节点属性 > class 属性 > 全局默认属性
  - 大型图表 (>20节点) 必须使用 class 系统保持一致性
  """,

  """
  **Kroki 兼容性**:
  - 生成的代码必须能被 Kroki 成功渲染为 SVG
  - 避免使用实验性特性或非标准语法
  - 所有反斜杠必须正确转义: `\\\\` 表示单个反斜杠
  """,

  """
  **代码可读性要求**:
  - 使用注释 (`//`) 说明复杂逻辑
  - 节点定义和连接关系分开书写
  - 相关节点使用空行分组
  - class 定义集中在代码开头
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 理解需求和选择图表类型**:
  - BlockDiag 适用场景: 系统架构图、流程图、决策树、网络拓扑、组织结构
  - 识别关键要素: 节点 (模块/步骤)、连接关系 (依赖/顺序)、分组 (层次/阶段)
  - 确定布局方向: landscape (时序性强) vs portrait (层次分明)
  """,

  """
  **2. 设计节点结构**:
  - 提取核心节点: 开始、处理步骤、决策点、结束
  - 选择合适形状:
    * 流程图: roundedbox (步骤) + diamond (决策)
    * 架构图: box (组件) + cloud (外部服务)
    * 状态机: circle (状态) + ellipse (复合状态)
  - 设计语义化 ID: loginProcess, validateUser, saveData
  """,

  """
  **3. 定义连接关系**:
  - 明确节点间的逻辑关系: 顺序、分支、汇聚
  - 使用链式连接简化顺序流: `A -> B -> C -> D;`
  - 使用分支连接表达并行: `决策 -> 分支A, 分支B, 分支C;`
  - 为关键边添加标签: `A -> B [label = "成功"];`
  """,

  """
  **4. 应用分组和样式**:
  - 使用 group 划分逻辑阶段或层次
  - 定义 class 系统统一样式 (大型图表必需)
  - 设置图表级属性优化布局: span_width, span_height, edge_layout
  - 使用颜色区分不同类型节点: 关键节点 (red), 正常节点 (blue), 可选节点 (gray)
  """,

  """
  **5. 优化和验证**:
  - 检查所有节点都有清晰的 label
  - 确保决策节点使用 diamond 形状
  - 验证分组逻辑清晰,层次不超过2层
  - 检查连接线是否交叉,优化节点顺序减少交叉
  - 验证语法正确性: 属性格式、引号使用、图表声明
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **语法正确性**:
  - 使用 `blockdiag {}` 包裹,无遗漏
  - 所有属性使用 `[key = "value"]` 格式
  - 中文标签正确使用双引号
  - 反斜杠正确转义 (如路径中的 `\\\\`)
  """,

  """
  **结构完整性**:
  - 所有节点都有明确的 label 或语义化 ID
  - 连接关系清晰,无悬空节点
  - 决策节点使用 diamond 形状且所有分支都有标签
  - 分组逻辑合理,层次不超过2层
  """,

  """
  **Kroki 渲染测试**:
  - 代码能被 Kroki 成功解析
  - 渲染的 SVG 图像布局合理,无重叠
  - 文本标签清晰可读,长度适中
  - 连接线无过多交叉,逻辑流向清晰
  """,

  """
  **可读性和美观性**:
  - 节点布局均匀,避免过度拥挤或分散
  - 使用 class 系统保持样式一致性
  - 关键路径使用颜色或粗线突出显示
  - 代码结构清晰,注释充分,易于维护
  """
]
