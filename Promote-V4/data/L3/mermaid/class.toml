# ============================================
# L3 类型层 - Mermaid Class Diagram v1.0.0
# ============================================

[meta]
level = "L3"
language = "mermaid"
diagram_type = "class"
version = "1.0.0"
description = "Mermaid 类图规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 可选元数据
complexity = "medium"
target_length = 3000
use_cases = ["面向对象设计", "类关系建模", "系统架构", "UML 设计"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "面向对象设计专家 - 理解类的职责、边界和关系",
  "UML 规范审查员 - 确保符合 UML 类图标准"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **图表声明**: 必须使用 `classDiagram` 关键字开始类图
  """,

  """
  **类定义规范**: 类定义必须包含属性和方法:
  - 属性格式: `可见性 类型 名称`（如 `+String name`）
  - 方法格式: `可见性 方法名(参数类型 参数名, ...) 返回类型 修饰符`
  - 可见性修饰符: `+` (public), `-` (private), `#` (protected), `~` (package)
  - 每个类至少应有一个属性（通常是主键或标识符）
  """,

  """
  **方法定义完整语法**:
  - **参数语法**: `方法名(类型 名称, ...)`（如 `connect(String url, int port)`）
  - **返回类型**: 方法签名后指定（如 `connect() boolean`）
  - **静态方法**: 使用 `$` 符号在返回类型后（如 `getInstance()$ DatabaseHelper`）
  - **抽象方法**: 使用 `*` 符号在返回类型后（如 `draw()* void`）
  - **禁止使用**: `static` 或 `abstract` 关键字（仅使用符号）
  """,

  """
  **关系符号正确性**: 根据关系类型选择正确的符号:
  - 继承（Inheritance）: `--|>` 实线三角箭头（子类指向父类）
  - 实现（Realization）: `..|>` 虚线三角箭头（实现类指向接口）
  - 组合（Composition）: `*--` 实心菱形（整体包含部分）
  - 聚合（Aggregation）: `o--` 空心菱形（整体聚合部分）
  - 关联（Association）: `-->` 实线箭头（普通关联）
  - 依赖（Dependency）: `..>` 虚线箭头（依赖关系）
  - 双向关联: `--` 无箭头实线
  """,

  """
  **关系方向和多重性**: 关系箭头方向必须符合业务逻辑:
  - 继承: 子类指向父类（`Dog --|> Animal`）
  - 组合: 整体指向部分（`Car *-- Engine`）
  - 多重性格式: 使用引号包裹（如 `"1"`, `"*"`, `"0..1"`, `"1..N"`）
  - 关系标签: 使用双引号处理特殊字符（如 `"has (many)"`）
  """,

  """
  **泛型语法**: Mermaid 使用 `~T~` 表示泛型（非 `<T>`）:
  - 单泛型: `List~T~`
  - 多泛型: `Map~K, V~`
  - 泛型约束: `Repository~T extends Entity~`
  - 泛型在关系中: `UserRepository --|> Repository~User~`
  """,

  """
  **注解和标注**: 使用特定语法标注接口和抽象类:
  - 接口: `<<interface>>` 标注
  - 抽象类: `<<abstract>>` 标注
  - 注释: `note for ClassName "说明"`
  - 标注必须在类定义内部
  """,

  """
  **保留关键字禁用**: 类名不得使用 Class Diagram 保留关键字:
  - 禁用: `class`, `classDef`, `style`, `namespace`, `direction`, `link`, `click`, `callback`
  - 使用大写驼峰命名（如 `UserService`, `DataRepository`）
  - 避免使用常见设计模式名称作为完整类名（如 `Factory`, `Builder`，可添加前缀如 `MyFactory`）
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别类和职责**:
  - 根据业务需求识别核心类
  - 定义每个类的属性和方法
  - 确定类的可见性和访问控制
  - 识别接口和抽象类
  """,

  """
  **2. 设计类关系**:
  - **继承关系**: 识别父类和子类（`is-a` 关系）
  - **实现关系**: 接口和实现类
  - **组合关系**: 强拥有关系（部分不能脱离整体存在）
  - **聚合关系**: 弱拥有关系（部分可以独立存在）
  - **关联关系**: 普通的引用关系
  - **依赖关系**: 临时使用关系（方法参数、局部变量）
  """,

  """
  **3. 定义属性和方法**:
  - 属性定义: `可见性 类型 名称`（如 `+String name`, `-int age`）
  - 方法定义: `可见性 方法名(参数) 返回类型 修饰符`
  - 静态成员: 使用 `$` 标记（如 `+PI$ double`, `+getInstance()$ MyClass`）
  - 抽象方法: 使用 `*` 标记（如 `+draw()* void`）
  """,

  """
  **4. 应用泛型和注解**:
  - 使用泛型: `~T~` 语法（如 `List~T~`, `Map~K, V~`）
  - 标注接口: `<<interface>>`
  - 标注抽象类: `<<abstract>>`
  - 添加注释: `note for ClassName "说明"`
  """,

  """
  **5. 优化类图结构**:
  - 确保关系方向正确（子类指向父类，组合指向部分）
  - 多重性标注清晰（使用引号包裹）
  - 类名语义化，易于理解
  - 避免使用保留关键字
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **类定义完整性**:
  - 每个类都有属性和方法定义
  - 可见性修饰符明确（+/-/#/~）
  - 属性类型和方法返回类型完整
  - 避免空实体（至少有一个属性）
  """,

  """
  **关系正确性**:
  - 关系符号正确（`--|>`, `..|>`, `*--`, `o--`, `-->`, `..>`）
  - 箭头方向符合业务逻辑（子类指向父类，组合指向部分）
  - 多重性格式正确（使用引号包裹，如 `"1"`, `"*"`）
  - 关系标签清晰（使用双引号处理特殊字符）
  """,

  """
  **泛型和注解规范**:
  - 泛型使用 `~T~` 语法（非 `<T>`）
  - 接口使用 `<<interface>>` 标注
  - 抽象类使用 `<<abstract>>` 标注
  - 注释使用 `note for ClassName` 语法
  """,

  """
  **命名和结构清晰**:
  - 类名使用大写驼峰（如 `UserService`）
  - 避免使用保留关键字
  - 类图结构清晰，关系易于理解
  - 注释说明关键类的业务含义
  """
]
