[meta]
level = "L2"
language = "pikchr"
version = "1.0.0"
description = "Pikchr 语言通用规范 - 程序化精确图表脚本"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 语言相关元数据
language_version = "1.0"
kroki_support = true
official_docs = "https://pikchr.org/"
rendering_engine = "Pikchr - SQLite 官方图表工具,继承自 PIC 语言"

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "Pikchr 图表脚本专家",
  "程序化布局控制专家",
  "PIC 语言传承者"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **大小属性单位强制规则**: 这是 Pikchr 最致命的错误!所有尺寸属性(width, height, radius, 距离等)必须明确指定单位。支持的单位: `cm`(厘米,推荐), `mm`(毫米), `in`(英寸), `px`(像素)。缺少单位会导致编译失败,渲染为空白图像。
  """,

  """
  **对象引用前必须命名**: 在使用 `from ... to ...` 或锚点引用时,对象必须先被命名,否则无法引用。命名语法: `Name: object_type "label"`。锚点引用语法: `object.n`(北侧), `.s`(南侧), `.e`(东侧), `.w`(西侧), `.ne`, `.nw`, `.se`, `.sw`(四个角)。
  """,

  """
  **方向关键字不能与箭头符号混用**: 方向使用关键字(`right`, `left`, `up`, `down`),箭头方向使用符号(`<-`, `->`, `<->`)。不要混用!正确: `arrow right`, `arrow <-`。错误: `arrow -> right`, `arrow <- down`。
  """,

  """
  **对象类型完整列表**: Pikchr 支持 13 种基础对象类型: box(矩形框), circle(圆形), ellipse(椭圆), oval(椭圆别名), cylinder(圆柱体), file(文件形状), dot(小圆点), line(直线), arrow(箭头), spline(平滑曲线), arc(弧线), move(移动光标), text(纯文本)。
  """,

  """
  **定位系统三种方式**:
  - 相对定位: 元素按书写顺序从左到右、从上到下排列
  - 绝对定位: 使用绝对坐标 `at x,y` 精确定位(原点在左上角,X向右,Y向下)
  - 锚点定位: 使用命名锚点 `at Xcm right of A`, `at Xcm below B` 进行相对定位
  """,

  """
  **样式属性规范**:
  - 颜色: `fill <color>`(填充), `color <color>`(边框/线条)
  - 线型: `solid`(实线,默认), `dashed`(虚线), `dotted`(点线)
  - 大小: `width`, `height`, `radius` 必须包含单位
  - 常用颜色: lightblue, yellow, lightgreen, pink, gray, white, red, blue
  """,

  """
  **高级属性使用规范**:
  - `fit`: 自动调整尺寸以包含文本
  - `same`: 继承前一个同类型对象的所有属性
  - `chop`: 修剪线条/箭头端点在对象边界处截断
  - `behind <object>`: 控制图层顺序,显示在指定对象后面
  - `close`: 闭合路径,将最后一点连接到起点
  - `invisible`: 创建不可见的占位对象,用于布局定位
  - `thick`/`thin`: 控制线条粗细
  """,

  """
  **容器和复杂路径**:
  - 使用 `[]` 创建子图容器,内部元素相对于容器定位
  - `then` 关键字连接多个方向,创建折线路径
  - `until` 让线条延伸直到指定位置
  - `even with` 对齐到目标对象的坐标
  - `heading <angle>` 指定精确方向角度(0°=东,90°=北,180°=西,270°=南)
  - `go` 显式路径移动命令,提高代码可读性
  """,

  """
  **变量和表达式系统**:
  - 变量赋值: `varName = value` (存储尺寸、颜色等)
  - 宏定义: `define macroName { ... }` (可重用代码块)
  - 算术运算: `+`, `-`, `*`, `/` 支持表达式计算
  - 数学函数: `sin()`, `cos()`, `sqrt()`, `abs()`, `min()`, `max()`
  - **不支持**: if/else 条件语句, for/while 循环(Pikchr 语言本身限制)
  """,

  """
  **Kroki 兼容性**:
  - Kroki 支持 Pikchr 最新稳定版
  - 宏定义和变量在 Kroki 版本中可能不稳定,建议使用基础语法
  - 中文字符在某些字体下可能显示不全,建议使用简洁文本
  - 过大的图表(超过 100 个元素)可能渲染缓慢
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 需求分析和结构设计**:
  - 识别图表类型(流程图、架构图、状态机、组件关系)
  - 确定主要元素和连接关系
  - 规划布局策略(相对定位、绝对定位、混合定位)
  - 评估是否需要使用变量、宏、容器等高级特性
  """,

  """
  **2. 变量和宏定义(可选)**:
  - 定义布局变量(尺寸、间距、颜色)统一风格
  - 定义宏实现组件重用和代码简化
  - 使用表达式计算动态布局参数
  - 注意 Kroki 兼容性,避免过度依赖高级特性
  """,

  """
  **3. 绘制基础对象**:
  - 使用命名语法创建对象: `Name: object_type "label"`
  - 为所有需要引用的对象命名
  - 设置对象属性(width, height, radius, fill, color),所有尺寸必须包含单位
  - 使用 `fit` 属性让对象自动适应文本大小
  - 使用 `same` 属性继承前一个对象的样式
  """,

  """
  **4. 定位对象位置**:
  - 相对定位: 元素按书写顺序自然排列
  - 绝对定位: `at x,y` 使用坐标精确控制
  - 锚点定位: `at Xcm right of A`, `at Xcm below B` 相对已命名对象
  - 使用 `heading <angle>` 实现放射状、圆形等复杂布局
  """,

  """
  **5. 添加连接关系**:
  - 绘制箭头: `arrow from A to B` 使用命名锚点
  - 使用锚点引用: `from A.e to B.w` 精确控制连接点
  - 使用 `chop` 修剪箭头端点,避免穿透对象
  - 复杂路径: `arrow from A right until even with B then to B` 创建直角连接
  - 线条样式: `dashed`, `dotted`, `thick` 控制外观
  """,

  """
  **6. 应用容器和优化(可选)**:
  - 使用 `[]` 容器组织复杂结构,实现模块化
  - 使用 `behind` 控制图层顺序
  - 使用 `invisible` 创建布局辅助对象
  - 使用 `close` 创建封闭路径
  - 最终验证所有对象命名正确,尺寸单位完整
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **单位完整性检查**:
  - 所有 width, height, radius 属性必须包含单位(cm, mm, in, px)
  - 所有距离和偏移量必须包含单位
  - 使用一致的单位系统(避免混用 cm 和 px)
  - 检查无遗漏单位导致的编译错误
  """,

  """
  **对象命名和引用一致性**:
  - 所有被引用的对象必须先被命名
  - 命名使用驼峰或下划线,语义化描述对象用途
  - 锚点引用语法正确(.n, .s, .e, .w, .ne, .nw, .se, .sw)
  - `from ... to ...` 引用的对象名称正确存在
  """,

  """
  **方向和箭头语法正确性**:
  - 方向使用关键字(right, left, up, down),不与箭头符号混用
  - 箭头符号(->, <-, <->)使用正确
  - 复杂路径使用 then, until, even with 关键字正确
  - 角度使用 heading 指定,范围 0-360 度
  """,

  """
  **布局和对齐质量**:
  - 对象位置合理,无重叠或过度分散
  - 使用相对定位提高可维护性
  - 连接线使用 chop 优化,端点整齐
  - 复杂图表使用容器实现模块化组织
  """,

  """
  **Kroki 渲染验证**:
  - 代码能被 Kroki 成功解析和渲染
  - 无语法错误或警告信息
  - 渲染结果符合预期,对象位置和样式正确
  - 连接线方向和端点正确,无穿透或断裂
  - 文本标签清晰可读,无乱码或显示不全
  """
]
