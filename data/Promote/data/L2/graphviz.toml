# ============================================
# L2 语言层 - GraphViz DOT 语言通用规范
# ============================================

[meta]
level = "L2"
language = "graphviz"
version = "1.0.0"
description = "GraphViz DOT 语言通用规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 语言相关元数据
language_version = "2.40+"
kroki_support = true
official_docs = "https://graphviz.org/documentation/"

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "GraphViz DOT 语言专家",
  "图论和图形布局专家",
  "依赖关系可视化专家"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **强制规则 1 - 连接符匹配**: digraph 必须使用 `->` 连接符, graph 必须使用 `--` 连接符。混用会导致编译失败。
  ```dot
  // ✅ 正确
  digraph { A -> B; }
  graph { A -- B; }

  // ❌ 错误 - 会导致语法错误
  digraph { A -- B; }
  graph { A -> B; }
  ```
  """,

  """
  **强制规则 2 - 分号结尾**: 所有语句必须以分号 `;` 结尾。这是 DOT 语法的硬性要求, 缺少分号会导致解析失败。
  ```dot
  // ✅ 正确
  digraph {
    A -> B;
    node [shape=box];
  }

  // ❌ 错误 - 缺少分号
  digraph {
    A -> B
    node [shape=box]
  }
  ```
  """,

  """
  **强制规则 3 - 聚类子图命名**: 如果要显示边框和标签, 子图名称必须以 `cluster_` 开头。不遵守此规则虽然不会报错, 但子图不会显示可视边框。
  ```dot
  // ✅ 正确 - 会显示边框
  subgraph cluster_group1 {
    label="组1";
    style=filled;
    color=lightgrey;
  }

  // ❌ 错误 - 不会显示边框
  subgraph group1 {
    label="组1";
  }
  ```
  """,

  """
  **强制规则 4 - 节点 ID 引号**: 节点 ID 包含空格或特殊字符必须用引号包裹, 否则会导致解析错误。
  ```dot
  // ✅ 正确
  "用户 管理员" -> 系统;
  "node@1" -> "node#2";

  // ❌ 错误 - 空格和特殊字符导致解析错误
  用户 管理员 -> 系统;
  node@1 -> node#2;
  ```
  """,

  """
  **强制规则 5 - 全局配置顺序**: rankdir 和全局样式必须在所有节点和边定义之前, 否则可能不生效。
  ```dot
  // ✅ 正确顺序
  digraph {
    rankdir=LR;
    node [shape=box];
    edge [color="#333"];
    A -> B;
  }

  // ❌ 错误顺序 - 配置可能不生效
  digraph {
    A -> B;
    rankdir=LR;
    node [shape=box];
  }
  ```
  """,

  """
  **Kroki 兼容性**: 生成的 DOT 代码必须能被 Kroki 成功渲染。支持所有标准 DOT 语法、中文节点和标签、所有布局引擎 (dot/neato/circo/fdp/twopi/osage)、HTML 标签。不支持外部图片引用、自定义字体文件、PostScript 自定义形状。
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 选择图类型和布局引擎**:
  - 有向图 (digraph): 使用 `->` 连接, 适合流程图、状态图、依赖关系
  - 无向图 (graph): 使用 `--` 连接, 适合关系网络、无向关系
  - 布局引擎选择:
    * dot: 层次化布局 (默认, 适合流程图、树形结构)
    * neato: 弹簧模型 (适合无向图)
    * circo: 环形布局 (适合循环关系)
    * fdp: 力导向布局 (适合大型图)
    * twopi: 径向布局 (适合中心辐射)
  """,

  """
  **2. 设计节点结构**:
  - 节点 ID 命名: 推荐直接使用中文 (Graphviz 完整支持), 或使用英文字母、数字、下划线
  - 节点形状选择:
    * box: 矩形 (通用步骤、实体)
    * circle: 圆形 (状态节点)
    * diamond: 菱形 (判断节点)
    * record/Mrecord: 表格结构 (ER 图、类图)
    * cylinder: 圆柱 (数据库)
    * folder: 文件夹 (目录结构)
  - 节点样式: 使用 fillcolor、style、fontcolor 等属性美化节点
  """,

  """
  **3. 设计边关系**:
  - 边样式: solid (实线)、dashed (虚线)、dotted (点线)、bold (粗线)
  - 边标签: 使用 label 属性说明关系或条件
  - 边方向: 使用 dir 属性控制箭头方向 (forward/back/both/none)
  - 端口连接: 使用 n/s/e/w/ne/nw/se/sw/c 九个方位端口精确控制连接点
  """,

  """
  **4. 应用全局配置**:
  - 布局方向: rankdir (TB/LR/BT/RL)
  - 间距控制: ranksep (层级间距)、nodesep (节点间距)
  - 边路径: splines (true/false/ortho/polyline/curved)
  - 全局样式: node[...] 和 edge[...] 设置默认样式
  - 确保配置在节点定义之前
  """,

  """
  **5. 高级布局控制**:
  - constraint: 控制边是否影响节点层级 (避免回退边影响布局)
  - rank: 强制多个节点处于同一水平层级
  - weight: 控制边的布局优先级 (强调主流程路径)
  - 子图分组: 使用 subgraph cluster_* 实现模块化分组
  - 性能优化: 大规模图表 (>50 节点) 使用 splines=false, 紧凑间距
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **DOT 语法验证**: 代码必须符合 DOT 语言官方语法规范, 无语法错误:
  - 所有语句以分号结尾
  - digraph 使用 `->`, graph 使用 `--`
  - 包含空格或特殊字符的 ID 用引号包裹
  - 全局配置在节点定义之前
  - 聚类子图以 cluster_ 开头
  """,

  """
  **Kroki 渲染测试**: 代码必须能被 Kroki 成功渲染为 SVG 图像, 无渲染错误或警告。测试要点:
  - 使用十六进制颜色 (`#4caf50`) 比颜色名称更精确
  - 避免过度嵌套 (最多 3 层子图)
  - 合理使用换行 (标签使用 `\n` 保持简洁)
  - 统一样式 (同类节点使用相同形状和颜色)
  """,

  """
  **节点关系完整性**: 所有节点都有明确的连接关系或独立语义:
  - 无悬空节点 (除非是独立的开始/结束节点)
  - 流程图有明确的起点和终点
  - 树形结构无循环引用
  - 状态图所有路径最终到达终止状态
  """,

  """
  **可读性和美观性**:
  - 节点布局合理, 避免过度拥挤或过度分散
  - 文本标签清晰易读, 长度适中
  - 连接线尽量不交叉或交叉最少
  - 颜色使用语义化 (成功用绿色、失败用红色、警告用黄色)
  - 使用子图分组提高复杂图表的可读性
  """
]
