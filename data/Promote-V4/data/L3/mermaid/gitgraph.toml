# ============================================
# L3 类型层 - Mermaid GitGraph v1.0.0
# ============================================

[meta]
level = "L3"
language = "mermaid"
diagram_type = "gitgraph"
version = "1.0.0"
description = "L3: mermaid - Git 图 图表生成规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 可选元数据
complexity = "medium"
target_length = 2800
use_cases = ["Git 历史可视化", "分支管理", "版本发布流程", "协作开发记录"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "Git 版本控制专家 - 精通 Git 分支管理和提交历史建模",
  "DevOps 流程专家 - 擅长可视化软件发布和协作开发流程",
  "版本管理顾问 - 理解团队协作中的分支策略和合并模式"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **GitGraph 语法**: 必须使用 `gitGraph` 关键字开始（不需要 `---` 或其他前缀）:
  - 第一行直接写 `gitGraph`
  - 支持方向声明: `gitGraph TB` (上下) 或 `gitGraph LR` (左右，默认)
  - 不要使用已废弃的 `git-graph` 语法
  """,

  """
  **提交命令规范**: 使用正确的 Git 操作命令:
  - `commit`: 创建提交（可选参数: `id`, `tag`, `type`）
  - `branch`: 创建新分支
  - `checkout`: 切换分支
  - `merge`: 合并分支
  - `cherry-pick`: 选择性合并提交
  - 所有命令区分大小写
  """,

  """
  **分支管理逻辑**: 分支操作必须符合 Git 逻辑:
  - 创建分支前必须先 `checkout` 到源分支
  - 合并前必须先 `checkout` 到目标分支
  - 不能在不存在的分支上操作
  - 分支名称使用语义化命名（如 `feature-login`, `hotfix-bug123`）
  """,

  """
  **提交类型标记**: 使用语义化的提交类型（`type`）来区分提交性质:
  - `NORMAL`: 普通提交（默认，蓝色圆形）
  - `REVERSE`: 回退提交（红色圆形）
  - `HIGHLIGHT`: 重要提交（黄色方形）
  - 通过 `type` 参数指定: `commit type: HIGHLIGHT`
  """,

  """
  **提交标识符**: 合理使用 `id` 和 `tag` 标识提交:
  - `id`: 提交的唯一标识符，用于 `cherry-pick` 引用
  - `tag`: 版本标签，用于标记发布版本（如 `v1.0.0`, `v2.1.3`）
  - 格式: `commit id: "abc123" tag: "v1.0.0"`
  - `id` 必须唯一，`tag` 通常用于主分支的里程碑提交
  """,

  """
  **分支合并策略**: 清晰展示合并关系:
  - 使用 `merge` 命令合并分支（自动创建合并提交）
  - 合并前确保当前分支是目标分支
  - 典型模式: `checkout main` → `merge feature-branch`
  - 避免循环合并和过度复杂的合并拓扑
  """,

  """
  **图形可读性**: 保持 Git 图的清晰和简洁:
  - 分支数量 ≤ 5 个（过多分支会导致图形混乱）
  - 提交数量 ≤ 20 个（建议 10-15 个）
  - 避免过长的分支名称（≤ 20 字符）
  - 使用有意义的提交消息（简洁描述变更）
  """,

  """
  **Kroki 渲染兼容性**: 注意 Kroki 对 GitGraph 的限制:
  - 不支持过于复杂的分支拓扑（嵌套深度 ≤ 3）
  - 避免使用未文档化的高级特性
  - 提交消息避免使用特殊字符（如引号需转义）
  - 测试渲染效果，确保分支线条不重叠
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别 Git 历史结构**:
  - **主分支**: 通常是 `main` 或 `master`
  - **开发分支**: `develop`、`feature`、`hotfix` 等
  - **里程碑**: 重要的版本发布节点（使用 `tag`）
  - **合并点**: 分支合并回主干的时机
  - **回退点**: 需要标记为 `REVERSE` 的提交
  """,

  """
  **2. 提取分支策略**:
  - 识别团队使用的分支模式（Git Flow、GitHub Flow、Trunk-Based 等）
  - 确定主分支和开发分支的关系
  - 识别功能分支、修复分支的创建和合并时机
  - 记录重要的版本发布节点
  """,

  """
  **3. 设计提交序列**:
  - 按时间顺序排列提交（从早到晚）
  - 确定每个提交所在的分支
  - 标记重要提交（使用 `HIGHLIGHT` 类型）
  - 添加版本标签到发布提交（使用 `tag`）
  - 使用 `id` 为需要引用的提交命名
  """,

  """
  **4. 构建分支操作流程**:
  - 先创建主分支的提交序列
  - 在适当位置创建新分支（`branch` + `checkout`）
  - 在新分支上添加提交
  - 切换回目标分支并合并（`checkout` + `merge`）
  - 使用 `cherry-pick` 处理选择性合并场景
  """,

  """
  **5. 优化图形布局**:
  - 选择合适的方向（`LR` 适合横向时间线，`TB` 适合层级展示）
  - 控制分支数量和提交数量，避免图形过度复杂
  - 使用提交类型（`NORMAL`/`HIGHLIGHT`/`REVERSE`）增强视觉层次
  - 确保分支合并关系清晰可见
  - 添加有意义的提交消息和版本标签
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **Git 操作逻辑正确性**:
  - 分支操作符合 Git 语义（创建、切换、合并顺序正确）
  - 不存在无效的分支操作（如在不存在的分支上提交）
  - 合并操作符合实际 Git 行为（目标分支正确）
  - 使用 `cherry-pick` 时引用的提交 `id` 存在
  """,

  """
  **提交标识和类型使用**:
  - 重要提交使用 `HIGHLIGHT` 类型突出显示
  - 回退或修复提交使用 `REVERSE` 类型标记
  - 版本发布提交添加 `tag` 标签（如 `v1.0.0`）
  - 需要引用的提交有唯一的 `id`
  - 提交消息简洁明了（≤ 50 字符）
  """,

  """
  **分支策略清晰度**:
  - 分支命名语义化（如 `feature/login`, `hotfix/bug-123`）
  - 分支数量合理（≤ 5 个）
  - 分支的创建和合并时机符合实际开发流程
  - 主分支（main/master）清晰可见
  """,

  """
  **图形可读性和美观度**:
  - 提交数量适中（10-20 个），不过于稀疏或密集
  - 分支线条清晰，无不必要的交叉
  - 使用方向（LR/TB）符合阅读习惯
  - 提交类型（颜色和形状）有效区分不同性质的提交
  - 版本标签位置正确，易于识别里程碑
  """
]
