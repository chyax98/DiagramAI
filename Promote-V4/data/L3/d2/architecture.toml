# ============================================
# L3 类型层: D2 系统架构图 (Architecture Diagram)
# ============================================

[meta]
level = "L3"
language = "d2"
diagram_type = "architecture"
version = "1.0.0"
description = "D2 系统架构图生成规范 - 系统架构、微服务架构、云原生架构"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关元数据
complexity = "high"
target_length = 3000
use_cases = ["系统架构设计", "微服务架构", "云原生架构", "三层架构"]

# ============================================
# Section 1: D 角色定义
# ============================================

[D_role]
additional_roles = [
  "架构设计专家 - 理解软件系统的分层架构 (展示层、业务层、数据层)",
  "D2 架构图工程师 - 精通 D2 的容器嵌套语法和布局方向",
  "视觉设计审查员 - 确保架构图层次清晰、配色统一、易于理解"
]

# ============================================
# Section 2: E 约束条件
# ============================================

[E_constraints]
items = [
  """
  **分层清晰使用容器**:
  架构图应该使用容器体现系统的分层结构,而不是简单的平铺连接。
  - ✅ 正确: `系统: { 前端层: { ... }, 应用层: { ... }, 数据层: { ... } }`
  - ❌ 错误: `A -> B -> C -> D` (平铺连接,无层次结构)
  """,

  """
  **组件形状规范**:
  使用约定俗成的形状能提高图表的可读性:
  - 数据库: `shape: cylinder`
  - 用户/客户端: `shape: person`
  - API 网关/路由器: `shape: hexagon`
  - 云服务: `shape: cloud`
  - 服务器/应用: `shape: rectangle`
  """,

  """
  **布局方向明确**:
  明确的布局方向能让架构图更符合数据流向的直觉。
  - ✅ 正确: `direction: right` (从左到右表示请求流)
  - ✅ 正确: `direction: down` (从上到下表示层次结构)
  - ❌ 错误: 缺少 `direction` 声明导致布局混乱
  """,

  """
  **配色统一和语义化**:
  同一层的组件应该使用统一的配色方案,使用柔和的颜色而非纯色。
  - ✅ 正确: 前端层统一使用蓝色系 (`#bbdefb`)
  - ✅ 正确: 应用层统一使用绿色系 (`#c8e6c9`)
  - ✅ 正确: 数据层统一使用橙色系 (`#ffccbc`)
  - ❌ 错误: 同层组件使用不同颜色 (红色、绿色、蓝色混用)
  """,

  """
  **连接关系明确标注**:
  架构图中的连接应该标注清楚通信协议或数据流类型。
  - ✅ 正确: `前端 -> 后端: "HTTP/REST"`
  - ✅ 正确: `服务A -> 服务B: "gRPC"`
  - ✅ 正确: `应用 -> 消息队列: "异步消息"`
  - ❌ 错误: `前端 -> 后端` (缺少标签)
  """,

  """
  **包含外部实体**:
  完整的架构图应该包含系统的使用者和外部依赖。
  - ✅ 正确: 包含用户 (`shape: person`)
  - ✅ 正确: 包含外部服务 (`shape: cloud`)
  - ❌ 错误: 只显示内部系统组件,缺少外部实体
  """,

  """
  **关键组件突出显示**:
  网关、负载均衡器等关键组件应使用加粗边框突出显示。
  - ✅ 正确: `API网关: { style.stroke-width: 2 }`
  - ✅ 正确: `负载均衡: { style.stroke-width: 2 }`
  - ❌ 错误: 所有组件边框粗细一致,无重点
  """,

  """
  **异步通信区分**:
  消息队列等异步连接应使用虚线样式区分同步调用。
  - ✅ 正确: `服务 -> 消息队列: "异步" { style.stroke-dash: 3 }`
  - ❌ 错误: 异步和同步调用使用相同样式
  """
]

# ============================================
# Section 3: P 流程规范
# ============================================

[P_process]
items = [
  """
  **1. 识别系统层次和组件**:
  - 确定系统的分层架构 (前端、应用、数据)
  - 识别每层的核心组件 (Web界面、API网关、服务、数据库)
  - 确定外部实体 (用户、外部服务)
  - 规划组件的逻辑分组
  """,

  """
  **2. 设计容器分层**:
  - 使用容器对组件分层 (前端层、应用层、数据层)
  - 嵌套容器表示子系统或服务分组
  - 确保嵌套层级合理 (不超过 3 层)
  - 为每层选择统一的配色方案
  """,

  """
  **3. 确定组件形状和样式**:
  - 数据库使用 `cylinder` 形状
  - 用户使用 `person` 形状
  - API 网关/路由器使用 `hexagon` 形状
  - 云服务使用 `cloud` 形状
  - 关键组件使用加粗边框 (`stroke-width: 2`)
  - 集群/多实例使用 `style.multiple: true`
  """,

  """
  **4. 设计组件连接**:
  - 确定组件之间的依赖关系
  - 标注连接类型 (HTTP/REST, gRPC, 消息队列)
  - 异步连接使用虚线 (`stroke-dash: 3`)
  - 双向连接使用 `<->`,单向使用 `->`
  - 在容器外定义连接线,保持布局清晰
  """,

  """
  **5. 应用 D2 语法和优化**:
  - 设置布局方向 (`direction: right` 或 `direction: down`)
  - 为每个组件设置形状和样式
  - 使用容器嵌套表示层次结构
  - 使用路径引用连接嵌套组件 (`系统.前端层.Web界面 -> 系统.应用层.API网关`)
  - 测试代码可在 Kroki 成功渲染
  """
]

# ============================================
# Section 4: H 质量标准
# ============================================

[H_quality]
items = [
  """
  **架构图结构正确性**:
  - 分层清晰,使用容器对组件分层 (前端/应用/数据)
  - 形状合适 (数据库用 `cylinder`, 用户用 `person`, 网关用 `hexagon`)
  - 布局方向明确,设置 `direction` 符合数据流向 (right/down)
  - 嵌套层级合理,不超过 3 层
  - 代码可在 Kroki 成功渲染
  """,

  """
  **配色与视觉规范**:
  - 配色统一: 同层组件使用相同色系
  - 配色柔和: 使用柔和色调 (如 `#c8e6c9`),避免纯色 (如 `#00ff00`)
  - 关键组件突出: 网关、负载均衡器使用加粗边框 (`stroke-width: 2`)
  - 外部服务区分: 云服务使用 `cloud` 形状和紫色系
  """,

  """
  **架构细节完整性**:
  - 连接标签清晰: 标注协议或数据类型 (HTTP/REST, gRPC, 消息队列)
  - 包含外部实体: 显示用户、外部服务等系统边界
  - 多实例表示: 集群使用 `style.multiple: true`
  - 异步通信区分: 消息队列等异步连接使用虚线 (`stroke-dash: 3`)
  """,

  """
  **架构设计质量**:
  - 可扩展性: 体现水平扩展能力 (多实例、负载均衡)
  - 高可用性: 显示冗余设计 (主备、集群)
  - 安全性: 体现安全边界 (防火墙、认证、隔离)
  - 完整性: 从用户请求到数据存储的完整路径清晰可见
  """
]

# ============================================
# Section 5: 使用场景
# ============================================

[[use_cases]]
title = "三层 Web 应用架构"
scenario = "展示前端、应用层和数据层的三层架构"
key_points = [
  "使用 `direction: right` 从左到右展示数据流",
  "用户使用 `person` 形状",
  "数据库使用 `cylinder` 形状",
  "API 网关使用 `hexagon` 形状突出其枢纽作用",
  "每层使用统一配色"
]

[[use_cases]]
title = "微服务架构"
scenario = "展示电商系统微服务架构,包含网关、多个业务服务和数据存储"
key_points = [
  "使用容器清晰分层 (前端、网关、服务、数据)",
  "每个微服务对应独立的数据库",
  "使用不同颜色区分缓存和数据库",
  "连接标签说明通信协议",
  "API 网关使用加粗边框突出"
]

[[use_cases]]
title = "云原生架构"
scenario = "展示云原生应用架构,包含容器编排、消息队列、监控服务"
key_points = [
  "使用 `style.multiple: true` 表示多实例部署",
  "外部云服务使用 `cloud` 形状",
  "使用 `direction: down` 从上到下展示请求流",
  "连接标签清晰说明数据流向",
  "Kafka 等中间件跨越所有列突出其枢纽作用"
]
