# ============================================
# L3 类型层 - BlockDiag 分组图规范
# ============================================

[meta]
level = "L3"
language = "blockdiag"
diagram_type = "group"
version = "1.0.0"
description = "L3: BlockDiag - 分组图生成规范 (强调逻辑分组和层次结构)"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关的元数据
complexity = "medium"
target_length = 2800
use_cases = ["系统模块化设计", "组织架构图", "逻辑分层展示", "微服务架构", "三层架构"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "模块化系统架构师 - 精通使用分组表达系统的模块化结构和层次关系",
  "组织结构设计师 - 擅长将组织架构转化为清晰的分组层级图",
  "逻辑分层专家 - 精通使用嵌套分组表达复杂的逻辑分层结构"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **分组图核心语法**:
  - 使用 `group {}` 定义逻辑分组
  - 分组必须包含 `label` 属性: `group { label = "模块名称"; }`
  - 分组内列出包含的节点: `group { label = "前端"; UI; View; }`
  - 分组外定义跨分组的连接关系: `UI -> API;`
  """,

  """
  **分组属性规范**:
  - **label**: 分组标签,必需,使用双引号包裹中文
  - **color**: 分组边框/背景颜色,推荐使用浅色 (#FFE0E0, #E0FFE0 等)
  - **shape**: 分组边框形状
    * `box` (默认): 完整矩形边框
    * `line`: 仅显示顶部横线 (轻量级分组)
  - **orientation**: 分组内节点布局方向 (landscape / portrait)
  """,

  """
  **嵌套分组规范**:
  - 支持嵌套分组表达层次结构: 部门 → 团队 → 小组
  - 不建议嵌套超过3层,避免图表过于复杂
  - 每层分组都必须有 `label` 属性
  - 嵌套分组的颜色应有区分度,避免混淆
  - 示例: `group 外层 { label = "部门"; group 内层 { label = "团队"; } }`
  """,

  """
  **颜色使用规范**:
  - 使用不同颜色区分不同类型或层级的分组
  - 推荐配色方案:
    * 前端层: #FFE0E0 (浅红)
    * 业务层: #E0FFE0 (浅绿)
    * 数据层: #E0E0FF (浅蓝)
    * 基础设施: #FFFFE0 (浅黄)
  - 避免使用高饱和度颜色,保证文字可读性
  - 同类分组使用相同或相近颜色
  """,

  """
  **节点定义规范**:
  - 分组内的所有节点必须定义 label
  - 节点可以在分组外集中定义属性,也可以在分组内定义
  - 推荐在分组内定义节点的基本属性: `group { A [label = "模块A"]; }`
  - 跨分组的连接关系必须在所有分组外定义
  """,

  """
  **连接关系规范**:
  - 所有跨分组的连接必须在分组外定义
  - 分组内的连接可以在分组内或分组外定义
  - 实线箭头表示强依赖: `A -> B;`
  - 虚线箭头表示弱依赖或协作: `A -> B [style = dashed];`
  - 为重要的连接添加标签: `A -> B [label = "调用"];`
  """,

  """
  **布局优化规范**:
  - 分层架构使用 `orientation = portrait` (上下布局)
  - 并列模块使用 `orientation = landscape` (左右布局)
  - 调整 `span_width` / `span_height` 控制分组间距
  - 使用 `shape = line` 创建轻量级分组,减少视觉干扰
  """,

  """
  **层次结构表达规范**:
  - 使用嵌套 group 表达包含关系: 系统 → 模块 → 组件
  - 使用箭头方向表达调用关系: 上层 → 下层
  - 使用颜色深浅表达层级: 外层浅色 → 内层深色
  - 使用 `orientation` 控制同级元素的排列方向
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别分组结构**:
  - 分析系统的模块化结构或组织的层级关系
  - 识别顶层分组: 如前端、后端、数据层,或高层、中层、基层
  - 识别子分组: 如认证服务、订单服务,或研发部、产品部
  - 确定分组的嵌套关系和层次深度 (建议 ≤3 层)
  """,

  """
  **2. 设计分组层次**:
  - 定义顶层分组并分配颜色:
    * `group 前端层 { label = "前端层"; color = "#FFE0E0"; }`
  - 定义子分组 (如需要):
    * `group 认证域 { label = "认证域"; Auth; User; }`
  - 确定分组的 `orientation`:
    * 分层架构 → portrait
    * 并列模块 → landscape
  """,

  """
  **3. 定义节点和连接**:
  - 在分组内定义节点及其基本属性
  - 在分组外定义所有跨分组的连接关系
  - 为重要连接添加标签和样式:
    * 强依赖 → 实线箭头
    * 弱依赖/协作 → 虚线箭头
  """,

  """
  **4. 优化视觉呈现**:
  - 使用颜色区分不同类型或层级的分组
  - 调整分组的 `shape` 属性:
    * 主要分组 → `shape = box` (完整边框)
    * 辅助分组 → `shape = line` (顶部横线)
  - 调整布局参数优化间距:
    * `span_width`, `span_height`, `node_width`, `node_height`
  """,

  """
  **5. 验证和完善**:
  - 检查所有分组都有 `label` 属性
  - 验证嵌套分组的层次不超过3层
  - 确保颜色使用一致性和区分度
  - 验证跨分组连接的逻辑正确性
  - 检查分组内节点都有明确的 label
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **分组结构完整性**:
  - 所有分组都有明确的 `label` 属性
  - 分组内的节点都有清晰的标签
  - 嵌套分组的层次结构清晰,不超过3层
  - 分组的包含关系符合实际系统结构
  """,

  """
  **视觉呈现清晰度**:
  - 使用颜色有效区分不同类型或层级的分组
  - 颜色使用一致性: 相同类型分组使用相同颜色
  - 分组边框清晰可见,不与节点混淆
  - 布局合理,分组间距适中,无过度拥挤
  """,

  """
  **连接关系准确性**:
  - 跨分组连接关系准确表达系统依赖
  - 实线和虚线的使用符合强弱依赖语义
  - 重要连接有标签说明
  - 连接线方向符合调用或汇报关系
  """,

  """
  **层次结构可读性**:
  - 嵌套分组的层次一目了然
  - 使用 `orientation` 优化同级元素排列
  - 颜色深浅或饱和度体现层级关系
  - 分组命名语义化,易于理解
  """
]

# ============================================
# Section 5: 使用场景 (Use Cases)
# ============================================

[[use_cases]]
title = "三层架构系统"
scenario = "展示经典的表现层、业务层、数据层三层架构,包括各层的主要组件和跨层依赖"
key_points = [
  "使用3个顶层 group 分别表示表现层、业务层、数据层",
  "使用不同颜色区分三层: #FFE0E0, #E0FFE0, #E0E0FF",
  "使用 orientation = portrait 实现垂直分层布局",
  "跨层连接使用实线箭头表示调用关系"
]

[[use_cases]]
title = "微服务架构模块图"
scenario = "展示微服务系统的模块化结构,包括客户端、API网关、核心服务域 (认证域、业务域)、基础设施、数据存储"
key_points = [
  "使用嵌套 group 表达服务域的子模块",
  "每个服务域使用不同颜色区分: 认证域、业务域、基础设施",
  "API网关作为独立节点,不属于任何分组",
  "使用虚线表示服务间的弱依赖关系"
]

[[use_cases]]
title = "企业组织架构图"
scenario = "展示企业的部门层级和汇报关系,包括高层管理、技术部、产品部、销售部及其子团队"
key_points = [
  "使用3层嵌套 group 表达: 公司 → 部门 → 团队",
  "实线箭头表示汇报关系,虚线表示协作关系",
  "不同部门使用不同颜色: 技术部 (#E0E0FF), 产品部 (#E0FFE0), 销售部 (#FFFFE0)",
  "使用 shape = line 为高层管理创建轻量级分组"
]
