
# ActDiag Swimlane 生成要求

## 图表类型：泳道图（Swimlane Diagram）

泳道图用于展示多角色活动分工，强调不同角色或系统之间的交互，适用于：
- 跨部门业务流程
- 多角色协作流程
- 前后端交互流程

## 核心语法

### 基础泳道图
```
actdiag {
  lane user {
    label = "用户";
    login [label = "登录"];
    browse [label = "浏览"];
  }

  lane system {
    label = "系统";
    validate [label = "验证"];
    load_data [label = "加载数据"];
  }

  login -> validate;
  validate -> browse;
  browse -> load_data;
}
```

**语法要点**：
- `lane` 定义泳道（代表角色或系统）
- `label` 定义泳道标签
- 泳道内定义该角色的活动
- 泳道外定义跨泳道的连接关系

## 生成示例

### 示例 1: 在线购物流程（简单场景）
**用户需求**：展示用户和系统在购物流程中的交互

**生成代码**：
```
actdiag {
  lane customer {
    label = "顾客";
    browse [label = "浏览商品"];
    add_to_cart [label = "加入购物车"];
    checkout [label = "提交订单"];
    pay [label = "支付"];
  }

  lane frontend {
    label = "前端系统";
    display_products [label = "展示商品"];
    update_cart [label = "更新购物车"];
    create_order [label = "创建订单"];
  }

  lane backend {
    label = "后端系统";
    query_inventory [label = "查询库存"];
    reserve_stock [label = "预留库存"];
    process_payment [label = "处理支付"];
    confirm_order [label = "确认订单"];
  }

  lane payment_gateway {
    label = "支付网关";
    validate_payment [label = "验证支付"];
    deduct_amount [label = "扣款"];
  }

  // 交互流程
  browse -> display_products;
  display_products -> query_inventory;
  query_inventory -> display_products;

  add_to_cart -> update_cart;
  update_cart -> reserve_stock;

  checkout -> create_order;
  pay -> process_payment;
  process_payment -> validate_payment;
  validate_payment -> deduct_amount;
  deduct_amount -> confirm_order;
}
```

**关键点**：
- 四个泳道：顾客、前端、后端、支付网关
- 跨泳道连接表示角色间的交互
- 清晰展示数据流和控制流

### 示例 2: 请假审批流程（中等复杂度）
**用户需求**：展示员工请假的多级审批流程

**生成代码**：
```
actdiag {
  lane employee {
    label = "员工";
    submit [label = "提交请假申请"];
    receive_notification [label = "收到审批结果"];
  }

  lane direct_manager {
    label = "直属经理";
    review_request [label = "审查申请"];
    approve_or_reject_1 [label = "批准/拒绝"];
  }

  lane hr {
    label = "HR 部门";
    check_policy [label = "检查假期政策"];
    record_leave [label = "记录假期"];
  }

  lane department_head {
    label = "部门总监";
    final_review [label = "最终审查"];
    approve_or_reject_2 [label = "批准/拒绝"];
  }

  lane system {
    label = "OA 系统";
    create_ticket [label = "创建工单"];
    send_notification_1 [label = "通知经理"];
    send_notification_2 [label = "通知总监"];
    update_status [label = "更新状态"];
    send_result [label = "发送结果"];
  }

  // 流程连接
  submit -> create_ticket;
  create_ticket -> send_notification_1;
  send_notification_1 -> review_request;

  review_request -> check_policy;
  check_policy -> approve_or_reject_1;

  approve_or_reject_1 -> send_notification_2;
  send_notification_2 -> final_review;
  final_review -> approve_or_reject_2;

  approve_or_reject_2 -> record_leave;
  record_leave -> update_status;
  update_status -> send_result;
  send_result -> receive_notification;
}
```

**关键点**：
- 五个泳道：员工、直属经理、HR、部门总监、OA 系统
- 展示多级审批流程
- 系统负责通知和状态管理

### 示例 3: 服务注册与发现流程（高级场景）
**用户需求**：展示微服务架构中的服务注册与发现流程

**生成代码**：
```
actdiag {
  lane microservice {
    label = "微服务实例";
    start [label = "启动"];
    register [label = "注册服务"];
    heartbeat [label = "发送心跳"];
    shutdown [label = "关闭"];
    deregister [label = "注销服务"];
  }

  lane registry {
    label = "服务注册中心";
    receive_registration [label = "接收注册"];
    store_metadata [label = "存储元数据"];
    receive_heartbeat [label = "接收心跳"];
    update_status [label = "更新状态"];
    remove_service [label = "移除服务"];
  }

  lane api_gateway {
    label = "API 网关";
    query_services [label = "查询服务列表"];
    cache_routes [label = "缓存路由"];
    route_request [label = "路由请求"];
  }

  lane client {
    label = "客户端";
    send_request [label = "发送请求"];
    receive_response [label = "接收响应"];
  }

  lane load_balancer {
    label = "负载均衡器";
    select_instance [label = "选择实例"];
    forward_request [label = "转发请求"];
  }

  // 服务注册流程
  start -> register;
  register -> receive_registration;
  receive_registration -> store_metadata;

  // 心跳流程
  heartbeat -> receive_heartbeat;
  receive_heartbeat -> update_status;

  // 服务发现流程
  send_request -> route_request;
  route_request -> query_services;
  query_services -> cache_routes;
  cache_routes -> select_instance;
  select_instance -> forward_request;
  forward_request -> receive_response;

  // 服务注销流程
  shutdown -> deregister;
  deregister -> remove_service;
}
```

**关键点**：
- 五个泳道：微服务、注册中心、网关、客户端、负载均衡
- 展示完整的服务生命周期
- 包含注册、心跳、发现、注销四个子流程

## 常见错误

### 错误 1: 跨泳道连接在泳道内定义
**❌ 错误写法**：
```
actdiag {
  lane user {
    login -> validate;  // validate 在另一个泳道中
  }

  lane system {
    validate;
  }
}
```

**✅ 正确写法**：
```
actdiag {
  lane user {
    login [label = "登录"];
  }

  lane system {
    validate [label = "验证"];
  }

  login -> validate;  // 跨泳道连接在泳道外定义
}
```

**原因**：跨泳道的连接关系必须在泳道外定义。

### 错误 2: 泳道缺少标签
**❌ 错误写法**：
```
actdiag {
  lane user {
    login;
  }
}
```

**✅ 正确写法**：
```
actdiag {
  lane user {
    label = "用户";
    login [label = "登录"];
  }
}
```

**原因**：每个泳道都应该定义 `label`。

## 生成检查清单

- [ ] **图表声明**：使用 `actdiag {}` 包裹
- [ ] **泳道定义**：每个 `lane` 都有 `label`
- [ ] **活动标签**：泳道内的活动都定义了 `label`
- [ ] **跨泳道连接**：在泳道外正确定义
- [ ] **角色明确**：泳道标签清晰表示角色或系统
- [ ] **交互清晰**：跨泳道连接表示角色间的交互
- [ ] **代码可渲染**：语法正确，可直接通过 Kroki 渲染

**任何检查项不通过，立即修正后重新生成**
