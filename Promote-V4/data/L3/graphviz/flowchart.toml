# ============================================
# L3 类型层 - GraphViz Flowchart (流程图) 规范
# ============================================

[meta]
level = "L3"
language = "graphviz"
diagram_type = "flowchart"
version = "1.0.0"
description = "GraphViz 流程图规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关元数据
complexity = "medium"
target_length = 2800
use_cases = ["业务流程", "算法流程", "系统流程", "决策流程", "工作流管理"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "业务流程设计专家",
  "流程图逻辑建模专家"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **流程图必须使用 digraph**: 流程图表达有向的执行顺序, 必须使用 `digraph` 声明和 `->` 连接符。
  ```dot
  // ✅ 正确
  digraph FlowchartName {
    A -> B -> C;
  }

  // ❌ 错误 - 流程图不能用 graph
  graph FlowchartName {
    A -- B -- C;
  }
  ```
  """,

  """
  **明确的开始和结束节点**: 流程图必须有清晰的起点和终点:
  - 开始节点: 使用 `shape=circle` 或 `shape=box`, 绿色填充 `fillcolor="#4caf50"`
  - 结束节点: 使用 `shape=doublecircle`, 绿色填充 `fillcolor="#4caf50"`
  - 所有流程路径都必须最终汇聚到结束节点
  """,

  """
  **决策节点使用菱形**: 判断/分支节点必须使用 `shape=diamond`, 并且:
  - 必须有至少两个输出分支
  - 每个分支必须标注判断结果 (如 "是"/"否", "成功"/"失败")
  - 使用不同颜色区分 (如 `fillcolor="#ff9800"` 黄色表示判断)
  ```dot
  decision [label="库存充足?", shape=diamond, fillcolor="#ff9800"];
  decision -> success [label="是"];
  decision -> fail [label="否", color="red", style=dashed];
  ```
  """,

  """
  **节点形状语义化**: 根据节点类型选择合适的形状:
  - 圆角矩形 `shape=box, style="rounded,filled"`: 普通操作步骤
  - 菱形 `shape=diamond`: 决策节点
  - 平行四边形 `shape=parallelogram`: 输入输出节点
  - 圆柱 `shape=cylinder`: 数据库操作
  - 圆形 `shape=circle`: 开始节点
  - 双圆 `shape=doublecircle`: 结束节点
  """,

  """
  **流程逻辑完整性**: 所有流程路径都必须有明确的终点:
  - 不得出现悬空分支
  - 决策节点的所有分支都必须处理
  - 异常情况也应有处理路径
  - 循环流程使用 `constraint=false` 避免布局混乱
  ```dot
  retry -> check [label="重试", constraint=false, color="blue", style=dashed];
  ```
  """,

  """
  **布局方向选择**: 根据流程特点选择合适的布局方向:
  - `rankdir=TB` (上→下): 适合垂直流程, 层次分明的流程
  - `rankdir=LR` (左→右): 适合水平流程, 时序性强的长流程
  - 长流程 (>6 步) 推荐使用 LR 布局, 避免图表过高
  """,

  """
  **条件分支清晰标注**: 使用清晰的连接线和标签:
  - 顺序流: `A -> B`
  - 条件流: `A -> B [label="条件"]`
  - 正常流程: 实线黑色
  - 异常流程: 虚线红色 `style=dashed, color="red"`
  - 循环回退: 虚线蓝色 + `constraint=false`
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别流程要素**:
  - 起点: 流程的触发条件或开始动作
  - 终点: 流程的结束状态 (成功、失败、取消等)
  - 关键步骤: 核心操作节点
  - 决策点: 需要判断和分支的地方
  - 异常处理: 错误情况的处理路径
  """,

  """
  **2. 提取流程逻辑**:
  - 主流程: 正常情况下的标准流程路径
  - 分支流程: 基于条件判断的不同路径
  - 异常流程: 错误、失败、超时等异常情况的处理
  - 循环流程: 需要重复执行的步骤 (使用反向连接 + `constraint=false`)
  """,

  """
  **3. 设计节点关系**:
  - 确定节点的先后顺序和依赖关系
  - 设计清晰的决策节点和分支逻辑
  - 处理流程的汇合点 (多个路径汇合到同一节点)
  - 避免流程死锁和无限循环
  - 使用 `weight` 属性强调主流程路径
  ```dot
  A -> B [weight=5];   // 主流程高权重
  A -> C [weight=1];   // 异常分支低权重
  ```
  """,

  """
  **4. 选择布局配置**:
  - 布局方向: `rankdir=TB` (垂直) 或 `rankdir=LR` (水平)
  - 边样式: `splines=ortho` (正交路由, 严谨风格) 或 `splines=true` (曲线, 美观)
  - 性能优化: 大规模流程图 (>50 节点) 使用 `splines=false`, 提升渲染速度
  """,

  """
  **5. 优化流程结构**:
  - 使用颜色区分流程阶段或节点类型
  - 确保流程路径清晰, 避免连接线交叉
  - 节点命名语义化, 使用动词开头 (如 "验证用户", "发送邮件")
  - 添加必要的连接标签说明
  - 复杂流程考虑使用子图 (subgraph cluster_*) 分组
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **流程逻辑完整性**:
  - 所有流程路径都有明确的终点 (结束节点)
  - 决策节点的所有分支都有处理
  - 无悬空节点或断裂路径
  - 循环逻辑合理, 有明确的退出条件
  - 异常路径最终汇聚到结束节点
  """,

  """
  **决策节点清晰度**:
  - 决策节点使用菱形表示
  - 判断条件清晰明确 (如 "库存充足?", "验证通过?")
  - 每个分支都有标签说明 ("是"/"否", "成功"/"失败")
  - 覆盖所有可能的情况
  """,

  """
  **节点命名规范**:
  - 节点文本简洁明了, 表达核心操作
  - 使用动词开头 (如 "验证用户", "发送邮件", "保存数据")
  - 避免过长 (>15 字) 或过于简单 (<2 字) 的文本
  - 节点 ID 语义化, 易于理解
  """,

  """
  **流程可读性**:
  - 布局合理, 节点分布均匀
  - 连接线尽量不交叉
  - 主流程路径清晰 (使用 weight 属性)
  - 异常路径明显区分 (红色虚线)
  - 颜色使用语义化 (绿色=成功, 红色=失败, 黄色=判断, 蓝色=处理)
  """
]
