# ============================================
# L3 类型层 - DBML Migration v1.0.0
# DBML 数据库迁移规范
# ============================================

[meta]
level = "L3"
language = "dbml"
diagram_type = "migration"
version = "1.0.0"
description = "DBML 数据库迁移 (Database Migration) 规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关的元数据
complexity = "high"
target_length = 3500
use_cases = ["数据库架构演进", "版本对比", "迁移文档", "变更记录"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "数据库架构演进专家",
  "数据库迁移专家",
  "风险评估专家"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **迁移图核心要求 - 版本标识清晰**: 必须使用版本后缀区分不同版本,Kroki 会将不同版本渲染为独立的表。

  ✅ **正确做法**:
  ```dbml
  // ========== 版本 v1.0 ==========
  Table users_v1 {
    id integer [pk, increment]
    username varchar(50)

    Note: '用户表 v1.0 - 初始版本'
  }

  // ========== 版本 v2.0 ==========
  Table users_v2 {
    id integer [pk, increment]
    username varchar(50)
    phone varchar(20) [note: '新增:手机号']

    Note: '用户表 v2.0 - 添加手机号字段'
  }
  ```

  ❌ **错误做法**:
  ```dbml
  Table users {  // 无法区分版本!
    id integer [pk]
  }

  Table users {  // 重复表名,渲染失败!
    id integer [pk]
    phone varchar(20)
  }
  ```

  **命名规范**:
  - 使用 `_v1`, `_v2` 后缀
  - 在 `Note:` 中说明版本号和日期
  - 使用分隔注释 `// ========== 版本 v1.0 ==========`
  """,

  """
  **迁移图变更标注 - 必须明确标注变更类型**: 使用 emoji 和注释清晰标注新增、修改、删除的字段。

  **标注规范**:
  - ✨ 新增字段: `[note: '新增:字段说明']` 或 `// 🆕 新增字段`
  - 🔄 修改字段: `[note: '修改:varchar(100) → varchar(255)']`
  - ❌ 删除字段: 在 v1 中标注 `[note: '⚠️ v2 将删除此字段']`
  - 🔄 重命名字段: `[note: '重命名:old_name → new_name']`

  ✅ **正确示例**:
  ```dbml
  Table users_v2 {
    id integer [pk]
    username varchar(50)

    // 🆕 新增字段
    phone varchar(20) [note: '新增:手机号']
    membership_level varchar(20) [default: 'basic', note: '新增:会员等级']

    // 🔄 修改字段
    email varchar(255) [note: '修改:长度从 100 增加到 255']

    Note: '用户表 v2.0 - 添加手机号和会员等级,扩展邮箱长度'
  }
  ```

  **变更类型说明**:
  - **非破坏性添加** (Additive, Non-Breaking): 添加新字段 (允许 NULL 或有默认值)
  - **破坏性变更** (Breaking Change): 字段重命名、类型变更、删除字段
  - **架构重构** (Refactoring): 表拆分、关系重构、规范化调整
  """,

  """
  **迁移说明 - 必须包含详细的迁移策略**: 在代码注释中提供完整的迁移说明。

  **必需内容**:
  1. **变更类型**: 非破坏性/破坏性/架构重构
  2. **迁移策略**: 详细的迁移步骤 (ALTER TABLE 或新建表)
  3. **SQL 示例**: 提供完整的数据迁移 SQL
  4. **风险评估**: 说明风险和注意事项
  5. **回滚策略**: 提供清晰的回滚步骤

  ✅ **正确示例**:
  ```dbml
  // ========== 迁移说明 ==========
  // 变更类型:非破坏性添加 (Additive, Non-Breaking)
  //
  // 迁移策略:
  //   1. 使用 ALTER TABLE 添加新字段
  //   2. 新字段允许 NULL 或有默认值,不影响现有数据
  //   3. 应用程序可以渐进式采用新字段
  //
  // SQL 迁移示例:
  //   ALTER TABLE users ADD COLUMN phone varchar(20);
  //   ALTER TABLE users ADD COLUMN membership_level varchar(20) DEFAULT 'basic';
  //
  // ⚠️ 风险:
  //   - 无破坏性变更
  //   - 需要更新应用层代码以使用新字段
  //
  // 回滚策略:
  //   ALTER TABLE users DROP COLUMN phone;
  //   ALTER TABLE users DROP COLUMN membership_level;
  ```

  ❌ **错误做法** (缺少迁移说明):
  ```dbml
  Table users_v1 { ... }
  Table users_v2 { ... }
  // 没有任何迁移说明!
  ```
  """,

  """
  **迁移风险评估 - 破坏性变更必须说明风险**: 字段重命名、类型变更、删除字段等破坏性变更必须明确说明风险。

  **风险评估内容**:
  - **数据丢失风险**: 删除字段或修改类型
  - **性能影响**: 大表添加索引或修改约束
  - **应用兼容性**: 字段类型变更或重命名
  - **停机时间**: 需要锁表或停机维护
  - **数据清洗**: 类型转换前需要数据清洗

  ✅ **正确示例**:
  ```dbml
  // ⚠️ 风险和注意事项:
  //   1. 类型转换可能失败 (如包含非数字字符)
  //   2. 需要先数据清洗:UPDATE products SET price = '0' WHERE price = '' OR price IS NULL
  //   3. 需要锁表,影响可用性,建议低峰期执行
  //   4. 预计锁表时间:30 秒 (10 万条记录)
  //   5. 应用程序需要同步更新字段名
  //
  // 回滚策略:
  //   1. 保留原表备份 products_backup
  //   2. 如果失败:DROP TABLE products; RENAME products_backup TO products;
  //   3. 等待验证通过后再删除备份表 (建议保留 30 天)
  ```
  """,

  """
  **迁移 SQL 示例 - 复杂变更必须提供完整 SQL**: 字段重命名、类型变更、表拆分等复杂变更必须提供完整的数据迁移 SQL。

  ✅ **类型变更示例**:
  ```dbml
  // 数据迁移 SQL:
  //   INSERT INTO orders_v2 (id, user_id, total_amount, status, created_at, updated_at)
  //   SELECT
  //     id,
  //     user_id,
  //     CAST(amount AS DECIMAL(10,2)),  -- varchar → decimal
  //     CASE order_status                -- integer → varchar 映射
  //       WHEN 1 THEN 'pending'
  //       WHEN 2 THEN 'processing'
  //       WHEN 3 THEN 'shipped'
  //       WHEN 4 THEN 'completed'
  //     END,
  //     create_time,
  //     NOW()
  //   FROM orders_v1;
  ```

  ✅ **表拆分示例**:
  ```dbml
  // 数据迁移 SQL:
  //   -- 迁移用户基本信息
  //   INSERT INTO users_v2 (id, username, email, created_at)
  //   SELECT id, username, email, created_at
  //   FROM users_v1;
  //
  //   -- 迁移地址信息 (只迁移有地址的用户)
  //   INSERT INTO user_addresses_v2
  //     (user_id, address_type, address_line1, city, is_default, created_at)
  //   SELECT
  //     id,
  //     'shipping',
  //     address_line1,
  //     city,
  //     true,  -- 设置为默认地址
  //     NOW()
  //   FROM users_v1
  //   WHERE address_line1 IS NOT NULL;
  ```
  """,

  """
  **迁移版本注释 - 在 Note 中说明版本和变更**: 每个版本的表必须在 `Note:` 中说明版本号、变更内容和日期。

  ✅ **正确示例**:
  ```dbml
  Table users_v1 {
    Note: '用户表 v1.0 - 初始版本 (2024-01-01)'
  }

  Table users_v2 {
    Note: '''
    用户表 v2.0 (2024-06-15)
    ✨ 新增:phone, membership_level
    🔄 修改:email varchar(100) → varchar(255)
    '''
  }
  ```

  **Note 多行格式**:
  - 使用三引号 `'''` 包裹多行内容
  - 第一行:表名 + 版本号 + 日期
  - 后续行:变更列表 (使用 emoji 标注)
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 理解迁移需求**: 从用户需求中识别迁移类型和变更内容。

  **迁移类型**:
  - **字段添加**: 添加新字段 (非破坏性)
  - **字段修改**: 类型变更、长度调整、约束修改
  - **字段删除**: 移除不再使用的字段 (破坏性)
  - **字段重命名**: 更改字段名 (破坏性)
  - **表拆分**: 将宽表拆分为多个规范化表 (架构重构)
  - **表合并**: 合并多个表 (架构重构)
  - **关系变更**: 调整外键关系或添加新关系

  **识别方法**:
  - 分析需求中的关键词:"添加"、"修改"、"删除"、"重命名"、"拆分"
  - 明确新旧版本的差异
  - 识别破坏性变更和非破坏性变更
  """,

  """
  **2. 设计版本对比结构**: 创建 v1 和 v2 版本的表定义,使用版本后缀区分。

  **设计原则**:
  - 使用 `_v1`, `_v2` 后缀明确版本
  - 使用分隔注释 `// ========== 版本 v1.0 ==========`
  - v1 版本:旧版本的完整表结构
  - v2 版本:新版本的完整表结构,标注变更字段

  **示例结构**:
  ```dbml
  // ========== 版本 v1.0 ==========
  Table users_v1 { ... }

  // ========== 版本 v2.0 ==========
  Table users_v2 { ... }

  // ========== 迁移说明 ==========
  // ...
  ```
  """,

  """
  **3. 标注变更内容**: 在 v2 版本中明确标注新增、修改、删除的字段。

  **标注方法**:
  - 新增字段:使用 `// 🆕 新增字段` 注释分组,字段添加 `[note: '新增:...']`
  - 修改字段:使用 `// 🔄 修改字段` 注释分组,字段添加 `[note: '修改:old → new']`
  - 删除字段:在 v1 中标注 `[note: '⚠️ v2 将删除']`
  - 重命名字段:在 v2 中标注 `[note: '重命名:old_name → new_name']`

  **示例**:
  ```dbml
  Table users_v2 {
    id integer [pk]

    // 🆕 新增字段
    phone varchar(20) [note: '新增:手机号']

    // 🔄 修改字段
    email varchar(255) [note: '修改:长度从 100 增加到 255']
  }
  ```
  """,

  """
  **4. 编写迁移说明**: 在代码注释中提供完整的迁移说明。

  **必需内容**:
  1. **变更类型**: 非破坏性/破坏性/架构重构
  2. **业务价值**: 说明为什么要做这个变更 (架构重构必需)
  3. **迁移策略**: 详细步骤 (ALTER TABLE 或新建表)
  4. **SQL 示例**: 提供完整的迁移 SQL (特别是复杂变更)
  5. **风险评估**: 说明风险和注意事项
  6. **回滚策略**: 提供清晰的回滚步骤

  **模板**:
  ```dbml
  // ========== 迁移说明 ==========
  // 变更类型:...
  //
  // 业务价值: (架构重构必需)
  //   - ...
  //
  // 迁移策略:
  //   1. ...
  //   2. ...
  //
  // SQL 迁移示例:
  //   ALTER TABLE ...
  //
  // ⚠️ 风险和注意事项:
  //   1. ...
  //   2. ...
  //
  // 回滚策略:
  //   1. ...
  //   2. ...
  ```
  """,

  """
  **5. 风险评估和回滚策略**: 识别迁移风险并提供回滚方案。

  **风险评估维度**:
  - **数据安全**: 是否有数据丢失风险
  - **性能影响**: 锁表时间、索引重建时间
  - **应用兼容**: 是否需要同步更新应用代码
  - **可逆性**: 是否可以安全回滚

  **回滚策略**:
  - **简单变更**: 提供反向 SQL (如 DROP COLUMN)
  - **复杂变更**: 保留原表备份,验证后再删除
  - **架构重构**: 保留旧表至少 30 天,提供反向迁移 SQL
  """,

  """
  **6. 提供数据迁移 SQL**: 复杂变更必须提供完整的数据迁移 SQL。

  **需要提供 SQL 的场景**:
  - 字段类型变更 (需要 CAST 或 CASE 映射)
  - 字段重命名 (需要数据复制)
  - 表拆分/合并 (需要多表 INSERT SELECT)
  - 数据清洗 (需要 UPDATE 语句)

  **SQL 要求**:
  - 包含完整的 SELECT、INSERT、UPDATE 语句
  - 处理 NULL 值和异常数据
  - 包含数据验证 SQL (检查迁移是否成功)
  - 包含性能优化 (如批量插入、索引优化)
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **版本标识清晰度**:
  - 使用 `_v1`, `_v2` 后缀区分版本
  - 使用分隔注释 `// ========== 版本 v1.0 ==========`
  - 每个版本的表都有 `Note:` 说明版本号和日期
  - 版本号语义化 (如 v1.0, v2.0, v2.1)
  """,

  """
  **变更标注完整性**:
  - 所有新增字段都有 `[note: '新增:...']`
  - 所有修改字段都有 `[note: '修改:old → new']`
  - 删除字段在 v1 中标注 `[note: '⚠️ v2 将删除']`
  - 重命名字段在 v2 中标注 `[note: '重命名:old → new']`
  - 使用 emoji (🆕 ✨ 🔄 ❌ ⚠️) 增强可读性
  """,

  """
  **迁移说明完整性**:
  - 包含变更类型 (非破坏性/破坏性/架构重构)
  - 包含迁移策略 (详细步骤)
  - 包含 SQL 示例 (复杂变更必需)
  - 包含风险评估 (破坏性变更必需)
  - 包含回滚策略 (所有变更必需)
  - 架构重构包含业务价值说明
  """,

  """
  **SQL 质量**:
  - SQL 语法正确,可以直接执行
  - 处理 NULL 值和异常数据
  - 包含数据验证 SQL
  - 类型转换使用 CAST 或 CASE
  - 复杂查询有注释说明
  """,

  """
  **风险评估准确性**:
  - 明确说明数据丢失风险
  - 说明性能影响 (锁表时间、索引重建)
  - 说明应用兼容性问题
  - 说明停机时间和执行窗口
  - 提供风险缓解措施
  """,

  """
  **回滚策略可行性**:
  - 提供清晰的回滚步骤
  - 简单变更:反向 SQL
  - 复杂变更:保留备份,验证后删除
  - 架构重构:保留旧表,提供反向迁移 SQL
  - 说明回滚的前提条件和风险
  """
]
