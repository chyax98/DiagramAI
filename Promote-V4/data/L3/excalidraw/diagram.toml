# ============================================
# L3 类型层 - Excalidraw Diagram (通用图表) v1.0.0
# 手绘风格的技术图表,平衡美观性和专业性
# ============================================

[meta]
level = "L3"
language = "excalidraw"
diagram_type = "diagram"
version = "1.0.0"
description = "Excalidraw 通用图表规范 - 技术架构和系统关系"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关元数据
complexity = "medium"
target_length = 2200
use_cases = ["系统架构图", "技术栈展示", "数据流图", "组件关系图"]

# ============================================
# Section 1: D 角色定义
# ============================================

[D_role]
additional_roles = [
  "系统架构师 - 清晰表达技术架构和系统关系,合理组织层次结构和模块划分",
  "信息可视化专家 - 平衡美观性和信息密度,使用颜色和形状编码信息类型"
]

# ============================================
# Section 2: E 约束条件
# ============================================

[E_constraints]
items = [
  """
  **适度手绘风格 [核心特征]**: 使用中等程度的手绘效果,平衡专业性和视觉趣味:
  - `roughness: 1` (标准手绘,是 diagram 的推荐值)
  - `fillStyle: "hachure"` (斜线填充,增强手绘感)
  - `fontFamily: 1` (手绘字体 Virgil) 或 `fontFamily: 3` (代码字体,适合技术图表)
  - 避免过于强烈 (`roughness: 2`) 或完全精确 (`roughness: 0`)
  """,

  """
  **分层架构表达**: 技术图表应该清晰展示系统层次:
  - 使用不同的 y 坐标区分层级 (如展示层 y=100, 业务层 y=300, 数据层 y=500)
  - 使用颜色区分不同类型的组件:
    - 蓝色系 `#1971c2`, `#e7f5ff`: 前端、客户端
    - 绿色系 `#2f9e44`, `#d3f9d8`: 后端、服务端
    - 橙色系 `#f08c00`, `#fff4e6`: 数据库、存储
    - 紫色系 `#5f3dc4`, `#e5dbff`: 中间件、网关
  """,

  """
  **形状语义规范**: 使用不同形状表达不同类型的组件:
  - 矩形 (rectangle): 服务、模块、组件
  - 菱形 (diamond): 数据库、存储、缓存
  - 椭圆 (ellipse): 外部系统、第三方服务
  - 箭头 (arrow): 调用关系、数据流向
  - 文本 (text): 标题、注释、说明
  """,

  """
  **箭头样式规范**: 使用不同的箭头样式表达不同类型的关系:
  - `strokeStyle: "solid"` (实线): 主要业务流程、同步调用
  - `strokeStyle: "dashed"` (虚线): API 调用、网关路由
  - `strokeStyle: "dotted"` (点线): 数据库连接、异步消息
  - 箭头必须有 `label.text` 标注关系类型 (如 "HTTP", "gRPC", "SQL")
  """,

  """
  **清晰的布局**: 图表应该有清晰的视觉组织:
  - 从上到下或从左到右的逻辑流向
  - 元素间距一致 (建议 50-80px)
  - 同类型组件对齐 (如所有数据库都在同一 y 坐标)
  - 避免连接线交叉或过度拥挤
  """
]

# ============================================
# Section 3: P 流程规范
# ============================================

[P_process]
items = [
  """
  **1. 识别系统组件**: 从用户描述中提取技术组件:
  - 前端组件: Web、移动端、桌面端
  - 后端服务: API 服务、业务逻辑、微服务
  - 数据存储: 数据库、缓存、文件存储
  - 中间件: 网关、消息队列、负载均衡
  - 外部系统: 第三方 API、云服务
  """,

  """
  **2. 设计分层布局**: 规划清晰的层次结构:
  - 顶层 (y=100-200): 展示层 (前端、用户界面)
  - 中层 (y=300-400): 业务层 (后端服务、业务逻辑)
  - 底层 (y=500-600): 数据层 (数据库、缓存、存储)
  - 侧边或单独区域: 外部系统、第三方服务
  - 使用颜色编码区分层级和类型
  """,

  """
  **3. 创建组件元素**: 为每个组件创建合适的图形:
  - 服务/模块: 矩形,宽 200-250px,高 100-150px
  - 数据库: 菱形,宽高 100-120px
  - 外部系统: 椭圆,宽 140-180px,高 80-100px
  - 设置 `roughness: 1` 和 `fillStyle: "hachure"`
  - 使用 `label.text` 标注组件名称 (如 "用户服务", "MySQL")
  """,

  """
  **4. 添加连接关系**: 使用箭头表达组件之间的关系:
  - 确定箭头起点和终点的 ID
  - 选择合适的箭头样式 (solid, dashed, dotted)
  - 使用 `label.text` 标注协议或关系类型
  - 常见标注: "HTTP", "gRPC", "SQL", "Redis", "Kafka", "WebSocket"
  - 箭头颜色可以与起点或终点颜色呼应
  """
]

# ============================================
# Section 4: H 质量标准
# ============================================

[H_quality]
items = [
  """
  **手绘风格一致性**: 所有元素使用一致的适度手绘风格:
  - 所有形状的 `roughness` 都是 1
  - `fillStyle` 使用 "hachure" 或 "cross-hatch"
  - 字体使用 `fontFamily: 1` (手绘) 或 `fontFamily: 3` (代码)
  - 避免混用不同的 roughness 值
  """,

  """
  **分层清晰性**: 图表应该有清晰的层次结构:
  - 不同层级使用不同的 y 坐标区间
  - 同层级的组件 y 坐标相近或相同
  - 使用颜色编码区分层级 (蓝色前端、绿色后端、橙色数据)
  - 层级之间有明显的视觉分隔
  """,

  """
  **箭头标注完整性**: 所有箭头都有清晰的标注:
  - 必须使用 `label.text` 标注关系类型
  - 标注应该是常见的技术术语 (HTTP, gRPC, SQL 等)
  - 箭头样式 (solid, dashed, dotted) 有明确的语义
  - 箭头颜色与业务语义一致
  """,

  """
  **布局合理性**: 图表布局应该合理、易读:
  - 逻辑流向清晰 (上到下或左到右)
  - 元素间距一致 (建议 50-80px)
  - 同类型组件对齐
  - 连接线尽量不交叉
  - 元素不过度拥挤或分散
  """,

  """
  **技术准确性**: 图表应该准确反映技术架构:
  - 组件类型选择正确 (服务用矩形、数据库用菱形)
  - 连接关系符合实际 (HTTP 调用用实线、数据库连接用点线)
  - 协议标注准确 (HTTP, gRPC, SQL, Redis 等)
  - 层次划分合理 (展示层、业务层、数据层)
  """
]
