# ============================================
# L3 类型层 v1.0.0
# PlantUML Object (对象图) 规范
# ============================================

[meta]
level = "L3"
language = "plantuml"
diagram_type = "object"
version = "1.0.0"
description = "PlantUML 对象图规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关的元数据
complexity = "medium"
target_length = 2700
use_cases = ["运行时实例展示", "配置示例", "数据快照", "系统状态"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "对象实例建模专家",
  "运行时系统分析专家",
  "数据结构可视化专家"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **对象定义规范**: 对象必须表示具体的实例,而不是抽象的类:
  - 使用 `object 对象名` 定义对象
  - 对象名通常使用具体的实例名称 (如 `user1`, `订单123`)
  - 对象名可以包含类型信息: `对象名 : 类名`
  - 必须包含具体的属性值,而不是属性类型
  - 对象代表运行时的实际数据状态
  """,

  """
  **属性值规范**: 对象的属性必须展示具体的值:
  - 基本格式: `属性名 = 具体值`
  - 字符串值: `name = "张三"`
  - 数字值: `age = 25`, `price = 99.99`
  - 布尔值: `isActive = true`
  - 日期值: `createTime = "2025-10-19"`
  - 引用值: `owner = user1` (引用另一个对象)
  - 空值: `address = null`
  """,

  """
  **对象关系规范**: 对象之间的关系表示运行时的实际引用:
  - 关联关系: `对象A --> 对象B` (A 引用 B)
  - 聚合关系: `对象A o-- 对象B` (A 聚合 B)
  - 组合关系: `对象A *-- 对象B` (A 组合 B)
  - 依赖关系: `对象A ..> 对象B` (A 依赖 B)
  - 关系可以标注具体的引用名称: `对象A --> 对象B : owns`
  """,

  """
  **对象命名约定**: 对象名应该清晰表达具体实例的身份:
  - 使用具体的标识符: `user_1001`, `订单ID_12345`
  - 使用业务相关的名称: `张三的购物车`, `主数据库连接`
  - 使用角色或功能命名: `管理员账号`, `系统配置`
  - 避免使用抽象的类名: `User`, `Order` (这些是类,不是对象)
  - 可以使用 `对象名 : 类名` 格式同时展示实例和类型
  """,

  """
  **类型标注规范**: 对象可以标注其所属的类:
  - 格式: `object "对象名 : 类名"`
  - 示例: `object "user1 : User"`, `object "订单123 : Order"`
  - 类型标注帮助理解对象的结构来源
  - 对于已知类结构的对象,建议标注类型
  """,

  """
  **属性完整性**: 对象的属性应该展示关键的数据字段:
  - 包含足够的属性以展示对象的状态
  - 可以省略不重要的属性 (使用 `...` 表示省略)
  - 重点展示与场景相关的属性
  - 建议每个对象包含 3-8 个属性
  - 避免属性过多导致图表臃肿
  """,

  """
  **真实数据约束**: 对象图展示的数据应该真实合理:
  - 使用符合业务逻辑的数据值
  - 日期、数字、状态等值应该合理
  - 对象之间的引用关系应该正确
  - 避免使用 `xxx`, `test`, `foo` 等占位符
  - 数据值应该帮助理解系统的实际运行状态
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别关键对象实例**:
  - 确定需要展示的具体对象 (用户、订单、商品、配置等)
  - 选择代表性的实例 (典型场景、边界情况)
  - 确定对象的身份标识 (ID、名称、角色)
  - 识别对象的所属类 (如果需要类型标注)
  - 限制对象数量,聚焦关键实例 (建议 ≤ 15 个)
  """,

  """
  **2. 提取对象属性和值**:
  - 识别每个对象的关键属性
  - 填充真实的属性值 (符合业务逻辑)
  - 使用合适的数据类型 (字符串、数字、布尔、日期)
  - 处理空值和默认值
  - 省略不重要的属性 (使用 `...`)
  """,

  """
  **3. 设计对象关系**:
  - 识别对象之间的引用关系 (A 引用 B)
  - 确定关系的类型 (关联、聚合、组合、依赖)
  - 标注引用的名称或角色 (如 `owns`, `references`)
  - 处理双向引用和循环引用
  - 确保关系符合运行时的实际情况
  """,

  """
  **4. 组织对象布局**:
  - 按照逻辑关系组织对象位置
  - 相关对象靠近放置
  - 使用 `package` 对对象分组 (按模块、层次)
  - 优化布局,减少关系线交叉
  - 使用 `left to right direction` 调整布局方向
  """,

  """
  **5. 添加场景说明**:
  - 使用 `note` 说明对象图的场景背景
  - 说明关键对象的业务含义
  - 解释特殊的数据值或状态
  - 标注时间点或系统状态 (如 "用户登录后的状态")
  - 帮助读者理解对象图的上下文
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **对象实例真实性**:
  - 对象代表具体的实例,而不是抽象的类
  - 对象名清晰表达实例的身份
  - 属性值真实合理,符合业务逻辑
  - 数据类型正确 (字符串、数字、布尔、日期)
  - 空值和默认值正确处理
  """,

  """
  **属性和关系准确性**:
  - 每个对象包含关键属性 (3-8 个)
  - 属性值展示对象的实际状态
  - 对象之间的引用关系正确
  - 关系类型符合运行时语义 (关联、聚合、组合)
  - 循环引用和双向引用正确表达
  """,

  """
  **场景代表性**:
  - 对象图展示有意义的运行时场景
  - 选择典型或重要的实例
  - 数据值帮助理解系统状态
  - 对象数量适中 (建议 ≤ 15 个)
  - 使用注释说明场景背景
  """,

  """
  **可读性和专业性**:
  - 对象命名清晰,易于识别
  - 布局合理,关系线不交叉或交叉最少
  - 使用包 (package) 组织复杂对象图
  - 适当省略不重要的属性 (使用 `...`)
  - 添加注释说明关键对象或场景
  - 类型标注 (对象名 : 类名) 帮助理解结构
  """
]

# ============================================
# 使用场景示例
# ============================================

[[use_cases]]
title = "电商订单快照"
scenario = "展示一个典型订单及其关联对象的运行时状态"
key_points = [
  "对象: 订单、用户、商品、地址、支付记录",
  "属性值: 订单号、用户名、商品价格、收货地址、支付时间",
  "关系: 订单引用用户、订单包含商品、订单关联地址和支付",
  "场景说明: 用户下单后,系统中的对象状态快照",
]

[[use_cases]]
title = "系统配置示例"
scenario = "展示系统配置对象的实际数据"
key_points = [
  "对象: 数据库配置、缓存配置、日志配置、API配置",
  "属性值: 数据库连接串、缓存过期时间、日志级别、API超时",
  "关系: 主配置聚合各个子配置对象",
  "类型标注: 对象名 : Config 格式展示配置类型",
]

[[use_cases]]
title = "社交网络关系图"
scenario = "展示用户和好友的社交关系网络"
key_points = [
  "对象: 用户A、用户B、用户C、好友关系",
  "属性值: 用户ID、用户名、关注数、粉丝数",
  "关系: 用户之间的关注、好友、粉丝关系",
  "双向引用: 用户A 关注 用户B,用户B 也关注 用户A",
]
