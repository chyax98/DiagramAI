# ============================================
# L3 类型层 v1.0.0
# PlantUML Sequence (时序图) 规范
# ============================================

[meta]
level = "L3"
language = "plantuml"
diagram_type = "sequence"
version = "1.0.0"
description = "PlantUML 时序图规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关的元数据
complexity = "medium"
target_length = 2800
use_cases = ["交互设计", "API 调用流程", "系统间通信", "业务流程交互"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "时序图专家",
  "交互设计专家"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **参与者声明规范**: 必须显式声明所有参与者,使用合适的参与者类型:
  - `participant` : 默认矩形框 (通用参与者)
  - `actor` : 人形图标 (用户、外部角色)
  - `boundary` : 边界圆形 (系统边界、接口)
  - `control` : 控制器 (业务逻辑、服务)
  - `entity` : 实体 (数据对象)
  - `database` : 数据库图标
  - `queue` : 消息队列
  参与者的声明顺序决定了从左到右的显示顺序。
  """,

  """
  **箭头类型规范**: 根据消息语义选择正确的箭头类型:
  - `->` : 同步调用 (实线箭头,等待响应)
  - `-->` : 同步返回 (虚线箭头,返回值)
  - `->>` : 异步消息 (实线开放箭头,不等待响应)
  - `-->>` : 异步响应 (虚线开放箭头)
  - `->x` : 丢失的消息 (网络故障、超时场景)
  """,

  """
  **激活状态管理**: 必须正确管理参与者的激活状态 (生命线):
  - 使用 `activate/deactivate` 手动控制
  - 或使用 `++/--` 自动激活/去激活 (推荐)
  - 嵌套激活必须正确配对
  - 所有激活状态必须有对应的去激活
  """,

  """
  **分组结构规范**: 使用分组结构组织复杂逻辑:
  - `alt/else/end` : 条件分支 (if-else)
  - `opt/end` : 可选执行 (if)
  - `loop/end` : 循环执行
  - `group/end` : 逻辑分组
  分组结构可以嵌套,但建议不超过 3 层。
  """,

  """
  **消息顺序正确性**: 消息的时序必须符合业务逻辑:
  - 请求和响应成对出现
  - 激活状态与消息顺序一致
  - 异步消息和同步消息区分清晰
  - 所有交互路径都有明确的终点
  """,

  """
  **特殊字符处理**: 消息文本中包含特殊字符 (如 [], {}, ()) 时,必须用双引号包裹。
  错误: `A -> B: GET /api/users[id]`
  正确: `A -> B: "GET /api/users[id]"`
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别参与者和交互对象**:
  - 确定系统中的所有参与者 (用户、服务、数据库、外部系统等)
  - 根据参与者类型选择合适的 PlantUML 类型 (actor, boundary, control, database, queue)
  - 按照从左到右的逻辑顺序声明参与者 (用户 → 前端 → 后端 → 数据库)
  """,

  """
  **2. 提取交互流程**:
  - 识别主流程: 正常情况下的标准交互路径
  - 识别分支流程: 基于条件判断的不同路径 (使用 alt/else)
  - 识别循环流程: 需要重复执行的交互 (使用 loop)
  - 识别异常流程: 错误、失败、超时等异常情况的处理
  """,

  """
  **3. 选择箭头类型**:
  - 同步调用场景: HTTP 请求、方法调用、数据库查询 → 使用 `->`
  - 同步返回场景: HTTP 响应、返回值、查询结果 → 使用 `-->`
  - 异步消息场景: 发送到消息队列、发布事件、异步通知 → 使用 `->>`
  - 异步响应场景: WebSocket 推送、异步回调、事件订阅通知 → 使用 `-->>`
  - 错误场景: 网络故障、超时 → 使用 `->x`
  """,

  """
  **4. 管理激活状态**:
  - 使用 `++/--` 语法简化激活/去激活 (推荐)
  - 嵌套激活时确保正确配对
  - 激活状态反映参与者的活动时间
  - 避免激活状态未关闭或重复激活
  """,

  """
  **5. 组织复杂流程**:
  - 使用 `alt/else/end` 处理条件分支
  - 使用 `opt/end` 处理可选步骤
  - 使用 `loop/end` 处理循环逻辑
  - 使用 `group/end` 对相关交互进行逻辑分组
  - 使用 `== 阶段标题 ==` 为复杂流程添加阶段划分
  - 使用 `autonumber` 自动为消息添加序号
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **时序逻辑完整性**:
  - 所有请求都有对应的响应 (除非是异步消息)
  - 激活状态正确配对,无悬空激活
  - 分组结构正确闭合 (所有 alt/opt/loop/group 都有 end)
  - 消息顺序符合业务逻辑
  """,

  """
  **参与者顺序合理性**:
  - 参与者从左到右的顺序符合逻辑 (用户 → 前端 → 后端 → 数据库)
  - 参与者类型正确 (actor, boundary, control, database 等)
  - 所有参与者都有明确的交互
  """,

  """
  **箭头类型准确性**:
  - 同步消息使用实线箭头 (->)
  - 异步消息使用实线开放箭头 (->>)
  - 返回消息使用虚线箭头 (-->)
  - 箭头方向正确反映消息流向
  """,

  """
  **可读性和专业性**:
  - 消息文本简洁明了,表达核心操作
  - 使用注释说明关键交互逻辑
  - 布局合理,参与者和消息清晰可读
  - 适当使用分组和阶段划分
  - 特殊字符正确转义 (用双引号包裹)
  """
]
