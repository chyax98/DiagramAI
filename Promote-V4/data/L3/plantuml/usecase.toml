# ============================================
# L3 类型层 v1.0.0
# PlantUML UseCase (用例图) 规范
# ============================================

[meta]
level = "L3"
language = "plantuml"
diagram_type = "usecase"
version = "1.0.0"
description = "PlantUML 用例图规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关的元数据
complexity = "low"
target_length = 2400
use_cases = ["需求分析", "系统功能设计", "用户交互建模", "系统边界定义"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "需求分析专家",
  "用例建模专家"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **用例命名规范**: 用例名称必须使用动宾结构 (动词 + 名词),描述一个动作或功能。
  错误: "用户"、"订单"
  正确: "管理用户"、"查看订单"、"下单购买"
  用例应该明确表达系统提供的功能。
  """,

  """
  **参与者定义规范**: 使用 `actor` 关键字定义参与者 (外部实体):
  - 参与者可以是人 (用户、管理员)
  - 参与者可以是外部系统 (支付系统、第三方 API)
  - 参与者定义在系统边界外部
  - 参与者通过关联线 (`--`) 与用例连接
  """,

  """
  **系统边界规范**: 使用 `rectangle` 定义系统边界,明确区分系统内部和外部:
  - 系统边界内的用例属于该系统的功能范围
  - 参与者定义在系统边界外部
  - 系统边界必须用 `}` 闭合
  - 系统边界名称应该清晰表达系统功能域
  """,

  """
  **包含关系规范** (<<include>>):
  - 使用 `..>` + `<<include>>` 表示包含关系
  - 箭头方向: 从主用例指向被包含的用例 (A ..> B : <<include>>)
  - 包含关系表示 A 执行时必然执行 B (如 "登录" 包含 "验证")
  - 被包含的用例是主用例的必要前置条件或子步骤
  """,

  """
  **扩展关系规范** (<<extend>>):
  - 使用 `..>` + `<<extend>>` 表示扩展关系
  - 箭头方向: 从扩展用例指向基础用例 (B ..> A : <<extend>>)
  - 扩展关系表示 B 是 A 的可选扩展 (如 "使用优惠券" 扩展 "支付订单")
  - 扩展用例在特定条件下才执行
  """,

  """
  **泛化关系规范**: 使用 `--|>` 表示用例的继承关系:
  - 箭头方向: 从子用例指向父用例
  - 子用例继承父用例的所有行为
  - 常用于支付方式、登录方式等场景
  - 如: (在线支付) --|> (支付订单)
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别参与者 (Actor)**:
  - 识别系统的所有外部参与者 (用户、管理员、外部系统)
  - 确定每个参与者的角色和职责
  - 使用 `actor` 关键字定义参与者
  - 参与者定义在系统边界外部
  """,

  """
  **2. 识别用例 (Use Case)**:
  - 从用户视角识别系统提供的功能
  - 用例名称使用动宾结构 (如 "浏览商品"、"下单购买")
  - 使用 `usecase` 关键字定义用例
  - 用例定义在系统边界内部
  """,

  """
  **3. 定义系统边界**:
  - 使用 `rectangle` 定义系统边界
  - 系统边界名称清晰表达系统功能域
  - 将所有用例放在系统边界内部
  - 参与者定义在系统边界外部
  """,

  """
  **4. 建立关联关系**:
  - 使用 `--` 连接参与者和用例 (表示参与者使用该用例)
  - 一个参与者可以关联多个用例
  - 一个用例可以关联多个参与者
  - 关联关系表示参与者与系统的交互
  """,

  """
  **5. 设计用例关系**:
  - 识别包含关系: 主用例包含的必要子用例 (使用 <<include>>)
  - 识别扩展关系: 基础用例的可选扩展 (使用 <<extend>>)
  - 识别泛化关系: 用例的继承关系 (使用 --|>)
  - 使用 `package` 对相关用例进行逻辑分组
  """,

  """
  **6. 选择布局方向**:
  - `left to right direction` : 横向布局,适合宽屏显示和时间线效果
  - `top to bottom direction` : 纵向布局 (默认),适合层次分明的系统
  - 横向布局适合演员数量较多 (2-5 个) 的场景
  - 纵向布局适合用例数量较多 (> 10 个) 的场景
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **用例命名规范性**:
  - 所有用例使用动宾结构 (如 "查看订单"、"管理用户")
  - 用例名称清晰表达系统功能
  - 避免使用名词作为用例名称
  - 用例名称简洁明了,不过长
  """,

  """
  **系统边界完整性**:
  - 使用 `rectangle` 定义系统边界
  - 系统边界正确闭合 (有对应的 `}`)
  - 所有用例都在系统边界内部
  - 参与者都在系统边界外部
  - 系统边界名称清晰表达功能域
  """,

  """
  **关系类型准确性**:
  - 包含关系箭头方向正确 (主用例 → 被包含用例)
  - 扩展关系箭头方向正确 (扩展用例 → 基础用例)
  - 泛化关系箭头方向正确 (子用例 → 父用例)
  - 关系类型使用正确 (<<include>>, <<extend>>, --|>)
  - 参与者与用例使用 `--` 连接,不使用虚线
  """,

  """
  **可读性和专业性**:
  - 布局方向选择合理 (横向或纵向)
  - 参与者和用例分布均匀,不过度拥挤
  - 适当使用 `package` 对用例进行逻辑分组
  - 关系线清晰,不交叉或交叉最少
  - 用例数量适中 (建议 ≤ 30 个)
  - 适当使用注释说明复杂关系
  """
]
