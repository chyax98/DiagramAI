# ============================================
# L3 类型层 v1.0.0
# Structurizr Dynamic (动态图) 规范
# ============================================

[meta]
level = "L3"
language = "structurizr"
diagram_type = "dynamic"
version = "1.0.0"
description = "Structurizr 动态图规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关的元数据
complexity = "medium"
target_length = 2800
use_cases = ["业务流程建模", "时序交互展示", "API 调用链"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "业务流程专家",
  "时序交互设计师"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **步骤编号规范**: Dynamic 视图中的关系必须包含步骤编号,格式为 "数字. 描述"。
  正确: `user -> webApp "1. 点击下单按钮"`
  错误: `user -> webApp "点击下单按钮"` (缺少编号)
  """,

  """
  **步骤编号连续性**: 步骤编号必须连续,不得跳跃。
  正确: 1. → 2. → 3. → 4.
  错误: 1. → 3. → 5. (跳过了 2 和 4)
  """,

  """
  **关系方向正确性**: 关系方向必须正确反映消息流向。
  - 请求: 客户端 → 服务端
  - 响应: 服务端 → 客户端
  错误: 客户端 → 服务端 "返回数据" (方向错误)
  正确: 服务端 → 客户端 "返回数据"
  """,

  """
  **Dynamic 视图层次一致性**: dynamic 视图可以基于 Software System 或 Container,但元素层次必须一致。
  正确: `dynamic system "key"` 使用 container 层次元素
  正确: `dynamic container "key"` 使用 component 层次元素
  错误: 在 container 层次的 dynamic 视图中使用 component
  """,

  """
  **流程完整性**: 动态视图必须有明确的开始和结束。
  - 开始: 用户操作或外部触发
  - 结束: 返回结果或状态更新
  错误: 流程中断,没有明确的终点
  """,

  """
  **描述清晰性**: 步骤描述应清晰明确,说明具体操作。
  正确: `webApp -> apiGateway "2. POST /api/orders (带 Token)"`
  错误: `webApp -> apiGateway "2. 调用"` (描述过于简单)
  """,

  """
  **正常和异常流程分离**: 正常流程和异常流程应创建独立的 dynamic 视图,避免混合。
  正确: 创建 "支付成功流程" 和 "支付失败流程" 两个视图
  错误: 在一个视图中混合成功和失败分支
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别业务流程**:
  - 确定要展示的业务流程 (用户下单、支付、登录等)
  - 识别流程的触发者 (用户、外部系统、定时任务)
  - 识别流程涉及的参与者 (容器、组件、外部系统)
  - 确定流程的开始和结束状态
  """,

  """
  **2. 提取交互步骤**:
  - 按时间顺序列出所有交互步骤
  - 为每个步骤分配连续的编号 (1, 2, 3, ...)
  - 明确每个步骤的操作内容 (调用 API、查询数据、发送消息)
  - 区分同步和异步操作
  """,

  """
  **3. 创建 dynamic 视图**:
  - Container 层次: `dynamic system "key" "title"`
  - Component 层次: `dynamic container "key" "title"`
  - 使用 `元素1 -> 元素2 "编号. 描述"` 语法
  - 使用 `autolayout lr/tb` 自动布局
  """,

  """
  **4. 优化步骤描述**:
  - 用户操作: 明确用户做什么 (点击按钮、输入信息)
  - API 调用: 包含 HTTP 方法和路径 (POST /api/orders)
  - 数据库操作: 说明操作类型 (INSERT, UPDATE, SELECT)
  - 返回值: 明确返回的数据或状态
  """,

  """
  **5. 处理复杂流程**:
  - 正常流程: 标准的成功路径
  - 异常流程: 错误、失败、超时等情况
  - 为不同流程创建独立的 dynamic 视图
  - 使用清晰的视图标题区分流程类型
  - 可选: 使用 HTTP 状态码或错误码
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **时序逻辑完整性**:
  - 步骤编号连续,无跳跃
  - 所有请求都有对应的响应 (除非是异步消息)
  - 流程有明确的开始和结束
  - 关系方向正确反映消息流向
  """,

  """
  **业务流程清晰性**:
  - 步骤描述清晰明确,说明具体操作
  - 用户操作易于理解
  - API 调用包含必要的技术信息
  - 数据操作类型明确
  """,

  """
  **视图层次一致性**:
  - Container 层次视图使用 container 元素
  - Component 层次视图使用 component 元素
  - 不混合不同层次的元素
  - 层次选择符合受众需求
  """,

  """
  **流程建模专业性**:
  - 正常流程和异常流程分离
  - 异步操作明确标识
  - 返回值清晰说明
  - 复杂流程分解为多个视图
  """
]

# ============================================
# Section 5: 使用场景 (Use Cases)
# ============================================

[[use_cases]]
title = "用户下单流程"
scenario = "展示用户下单的完整流程,包括用户点击、API 网关路由、认证服务验证、订单服务创建订单、数据库保存、返回结果"
key_points = [
  "1. 用户 → Web 应用: 选择商品,点击下单",
  "2. Web 应用 → API 网关: POST /api/orders (带 Token)",
  "3. API 网关 → 认证服务: 验证 Token",
  "4. 认证服务 → API 网关: Token 有效",
  "5. API 网关 → 订单服务: 创建订单",
  "6. 订单服务 → 数据库: 保存订单",
  "7-9. 逐层返回结果,最终显示订单详情"
]

[[use_cases]]
title = "支付流程 (正常和异常)"
scenario = "展示支付流程的正常路径 (支付成功) 和异常路径 (支付失败、超时重试),创建三个独立的 dynamic 视图"
key_points = [
  "支付成功流程: 1. 确认支付 → 2-5. 调用支付网关 → 6-7. 更新状态 → 8. 发布成功事件",
  "支付失败流程: 1. 确认支付 → 2-5. 调用支付网关 → 6. 返回失败 (余额不足) → 7-8. 更新失败状态",
  "支付超时重试: 1. 确认支付 → 2-5. 调用超时 → 6-7. 重试成功 → 8-10. 更新状态",
  "三个视图独立展示,避免混合"
]

[[use_cases]]
title = "API 调用链 (Component 层次)"
scenario = "展示 API 应用内部的组件交互,包括订单控制器 → 订单服务 → 支付客户端 → 支付网关 → 订单仓储 → 数据库"
key_points = [
  "Component 层次 dynamic 视图",
  "1. 订单控制器 → 订单服务: 调用 processPayment()",
  "2-4. 订单服务 → 支付客户端 → 支付网关: 调用支付",
  "5-6. 订单服务 → 订单仓储 → 数据库: 更新订单状态",
  "7-9. 逐层返回结果"
]
