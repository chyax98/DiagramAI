# ============================================
# L3 类型层 - ActDiag 泳道图规范
# ============================================

[meta]
level = "L3"
language = "actdiag"
diagram_type = "swimlane"
version = "1.0.0"
description = "L3: ActDiag - 泳道图生成规范 (强调多角色协作和交互)"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 类型相关的元数据
complexity = "medium"
target_length = 2800
use_cases = ["跨部门业务流程", "多角色协作", "前后端交互", "服务间通信", "审批流程"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "泳道图专家 - 精通使用 lane 系统表达多角色分工和协作关系",
  "跨部门流程分析师 - 擅长分析多角色业务流程和角色间的交互逻辑",
  "交互设计专家 - 精通表达系统间、角色间的消息传递和控制流"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **泳道图语法基础**:
  - 必须使用 `lane` 关键字定义泳道 (代表角色或系统)
  - 语法: `lane 角色名 { label = "显示名称"; 活动列表; }`
  - 泳道内定义该角色的活动
  - 泳道外定义跨泳道的连接关系 (表示交互)
  - 泳道顺序决定图表中的显示顺序 (从上到下)
  """,

  """
  **泳道定义规范 (强制)**:
  - 所有泳道必须有 `label` 属性
  - 泳道名称使用语义化命名: user, system, database, payment_gateway
  - 泳道数量建议 2-5 个 (过多会导致图表难以阅读)
  - 泳道命名使用角色/系统而非个人姓名
  """,

  """
  **泳道属性规范**:
  - **label**: 泳道显示名称 (必需)
  - **color**: 泳道边框颜色
  - **background**: 泳道背景颜色 (半透明填充)
  - **textcolor**: 泳道标题文本颜色
  - 推荐按职责使用不同颜色:
    * 用户侧: green / #E8F5E9
    * 系统侧: blue / #E3F2FD
    * 数据层: purple / #F3E5F5
    * 异常处理: red / #FFEBEE
  """,

  """
  **泳道顺序规则 (重要)**:
  - 泳道在代码中的定义顺序决定图表中的显示顺序 (从上到下)
  - 建议按业务流程的自然顺序定义:
    * 客户端 → 前端 → 后端 → 数据库
    * 员工 → 经理 → HR → 系统
  - 第一个定义的泳道显示在最上方
  """,

  """
  **活动命名规则 (强制)**:
  - 活动名称不得使用连字符 `-`
  - 活动名称仅支持 ASCII 字符,不得使用中文
  - 推荐命名: 下划线分隔 (`submit_request`) 或驼峰 (`submitRequest`)
  - 中文显示通过 label: `submit_request [label = "提交申请"]`
  """,

  """
  **跨泳道连接规范 (关键)**:
  - 所有跨泳道的连接必须在泳道外定义
  - 连接表示角色间的交互: `用户活动 -> 系统活动;`
  - 实线箭头表示同步调用或控制流
  - 虚线箭头表示异步消息或数据流 (可选)
  - 重要连接添加标签: `A -> B [label = "发送请求"];`
  """,

  """
  **交互模式规范**:
  - **请求-响应模式**:
    * `客户端活动 -> 服务器活动;` (请求)
    * `服务器活动 -> 客户端活动;` (响应,使用不同活动)
  - **顺序调用模式**:
    * `前端 -> 后端 -> 数据库;` (链式调用)
  - **并行协作模式**:
    * 多个泳道的活动同时开始,最后汇聚
  """,

  """
  **布局优化规范**:
  - 默认 landscape 布局 (从左到右) 适合时序性强的流程
  - 调整 `span_width` / `span_height` 控制泳道和活动间距
  - 使用 `default_shape = roundedbox` 统一活动形状
  - 复杂流程可使用 group 划分阶段
  """,

  """
  **样式一致性规范**:
  - 同类泳道使用相同或相近的颜色
  - 关键活动使用颜色突出: `[color = red]`
  - 可选活动使用虚线: `[shape = dots]`
  - 使用 numbered 属性标注时间顺序
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别参与者和角色**:
  - 分析业务流程涉及的所有角色或系统
  - 确定每个角色的职责和活动范围
  - 确定泳道数量 (建议 2-5 个)
  - 设计泳道顺序 (按业务流程自然顺序)
  """,

  """
  **2. 设计泳道结构**:
  - 为每个参与者创建泳道并分配颜色:
    * `lane 用户 { label = "用户"; color = green; }`
    * `lane 系统 { label = "系统"; color = blue; }`
  - 在泳道内定义该角色的所有活动
  - 为泳道设置语义化的颜色区分职责
  """,

  """
  **3. 定义活动和交互**:
  - 在各泳道内定义该角色的活动
  - 在泳道外定义跨泳道的连接关系:
    * 用户活动 → 系统活动 (用户触发系统处理)
    * 系统活动 → 数据库活动 (系统查询数据)
  - 为关键交互添加标签说明
  """,

  """
  **4. 优化交互逻辑**:
  - 确保请求-响应模式完整:
    * 用户请求 → 系统处理 → 系统响应 → 用户接收
  - 检查顺序调用链的完整性
  - 验证并行协作的汇聚点
  - 为复杂流程添加分组或注释活动
  """,

  """
  **5. 验证和完善**:
  - 检查所有泳道都有 label
  - 验证跨泳道连接的逻辑正确性
  - 确保活动命名规则正确 (无连字符,无中文)
  - 验证泳道顺序符合业务流程自然顺序
  - 检查颜色使用的一致性和区分度
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **泳道结构完整性**:
  - 所有泳道都有明确的 label
  - 泳道数量合理 (2-5 个)
  - 泳道顺序符合业务流程自然顺序
  - 每个泳道内的活动都有清晰的 label
  """,

  """
  **交互逻辑准确性**:
  - 跨泳道连接准确表达角色间的交互
  - 请求-响应模式完整
  - 顺序调用链逻辑清晰
  - 连接方向符合业务流程方向
  """,

  """
  **角色职责清晰度**:
  - 泳道标签清晰表示角色或系统
  - 每个泳道的活动符合该角色的职责
  - 泳道颜色有效区分不同类型的角色
  - 无跨职责活动 (活动应属于正确的泳道)
  """,

  """
  **视觉呈现质量**:
  - 泳道区分清晰,颜色使用一致性
  - 活动在泳道内布局合理
  - 跨泳道连接线清晰可见,无过多交叉
  - 整体布局均匀,无过度拥挤或分散
  """
]

# ============================================
# Section 5: 使用场景 (Use Cases)
# ============================================

[[use_cases]]
title = "在线购物流程"
scenario = "展示顾客、前端系统、后端系统、支付网关在购物流程中的协作,包括浏览、下单、支付、确认等环节"
key_points = [
  "4 个泳道: 顾客、前端、后端、支付网关",
  "跨泳道连接表示角色间的交互",
  "使用不同颜色区分客户端和服务器侧",
  "清晰展示数据流和控制流"
]

[[use_cases]]
title = "多级审批流程"
scenario = "展示员工请假的多级审批流程,涉及员工、直属经理、HR、部门总监、OA系统"
key_points = [
  "5 个泳道: 员工、经理、HR、总监、系统",
  "系统负责通知和状态管理",
  "展示审批流的流转逻辑",
  "使用 numbered 属性标注执行顺序"
]

[[use_cases]]
title = "微服务注册与发现"
scenario = "展示微服务架构中的服务注册、心跳、发现、路由、注销完整生命周期"
key_points = [
  "5 个泳道: 微服务、注册中心、API网关、客户端、负载均衡",
  "展示服务注册、心跳、发现、注销四个子流程",
  "跨泳道连接表示服务间通信",
  "使用 group 划分不同流程阶段"
]
