# ============================================
# L2 语言层 v1.0.0
# Nomnoml 语言的通用规范
# ============================================

[meta]
level = "L2"
language = "nomnoml"
version = "1.0.0"
description = "Nomnoml 语言通用规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 语言相关的元数据
language_version = "1.6.2"
kroki_support = true
official_docs = "https://nomnoml.com/"

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "Nomnoml 语法专家 - 掌握简化 UML 手绘风格图表的语法和最佳实践",
  "轻量级图表设计师 - 快速绘制简洁清晰的 UML 风格图表",
  "UML 建模专家 - 理解类图、组件图等 UML 图表类型"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **强制规则 1: 分隔符使用规则**
  类属性和方法必须使用分号 `;` 或换行分隔,**不能使用逗号**:
  ```nomnoml
  ❌ 错误: [Person| name: String, age: int]
  ✅ 正确: [Person| name: String; age: int]
  ```
  """,

  """
  **强制规则 2: 继承方向规则**
  继承箭头 `-:>` 必须从子类指向父类 (UML 标准):
  ```nomnoml
  ❌ 错误 (语义错误): [Animal] -:> [Dog]
  ✅ 正确: [Dog] -:> [Animal]
  ```
  """,

  """
  **强制规则 3: 类区域分隔符规则**
  类定义使用 `|` 分隔,顺序必须是: **类名 | 属性 | 方法**:
  ```nomnoml
  ❌ 错误 (方法在前): [Person| getName(): String | name: String]
  ✅ 正确 (属性在前): [Person| name: String | getName(): String]
  ```
  """,

  """
  **强制规则 4: 分类器标签位置规则**
  分类器标签 (如 `<abstract>`) 必须在类名**之前**:
  ```nomnoml
  ❌ 错误: [Animal <abstract>]
  ✅ 正确: [<abstract> Animal]
  ```
  """,

  """
  **强制规则 5: 指令位置规则**
  所有 `#` 指令必须在**文件开头**,节点和连接之前:
  ```nomnoml
  ❌ 错误: [ClassA] -> [ClassB]
           #direction: down
  ✅ 正确: #direction: down
           [ClassA] -> [ClassB]
  ```
  """,

  """
  **关联类型规范**: Nomnoml 支持多种 UML 关联类型,必须正确使用:
  - `->` : 关联 (Association) - 一般性关系
  - `<->` : 双向关联 - 两个类互相引用
  - `-->` : 依赖 (Dependency) - A 依赖 B
  - `-:>` : 继承/泛化 (Generalization) - A 继承 B (子类指向父类)
  - `<:-` : 继承/泛化 (反向) - B 继承 A
  - `--:>` : 实现 (Implementation) - A 实现 B 接口
  - `+->` : 组合 (Composition) - 强拥有关系,生命周期绑定
  - `o->` : 聚合 (Aggregation) - 弱拥有关系,独立生命周期
  - `->o` : 聚合 (反向)
  - `--` : 注释连接
  - `-/-` : 隐藏连接
  """,

  """
  **Kroki 兼容性约束**:
  - 生成的代码必须能被 Kroki 成功渲染,避免使用 Kroki 不支持的 Nomnoml 特性
  - ❌ 不支持 `#import` 指令 (文件导入,仅本地 Nomnoml 支持)
  - ✅ 支持所有标准指令 (direction, stroke, fill, background, fontSize 等)
  - ✅ 支持中文和特殊字符 (UTF-8)
  - ✅ 支持嵌套结构和分组
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 选择图表类型**: 根据用户需求选择合适的 Nomnoml 图表类型:
  - **类图**: 面向对象设计,类关系展示
  - **组件图**: 系统模块和组件关系
  - **架构图**: 系统架构和分层
  - **流程图**: 简单的流程和决策
  """,

  """
  **2. 应用指令配置**: 在文件开头设置指令 (必须在节点和连接之前):
  ```nomnoml
  #direction: down | right      // 布局方向 (默认 down)
  #stroke: #333333              // 边框颜色
  #fill: #ffffff                // 填充颜色
  #background: #f5f5f5          // 背景颜色
  #fontSize: 12                 // 字体大小
  #spacing: 40                  // 节点间距
  #padding: 8                   // 节点内边距
  #lineWidth: 2                 // 线条宽度
  #visual: visualizer | handDrawn  // 视觉风格
  ```
  """,

  """
  **3. 定义节点元素**: 使用分类器标签和类定义语法:
  - **基础节点**: `[NormalClass]`
  - **抽象类**: `[<abstract> AbstractClass]`
  - **接口**: `[<interface> IService]`
  - **包**: `[<package> com.example]`
  - **框架**: `[<frame> SystemFrame]`
  - **数据库**: `[<database> Database]`
  - **用例**: `[<usecase> Login]`
  - **参与者**: `[<actor> User]`
  - **开始/结束**: `[<start> Start]`, `[<end> End]`
  - **决策**: `[<choice> Choice]`
  """,

  """
  **4. 定义节点关系**: 使用正确的关联类型连接节点:
  - 识别关系类型: 继承、实现、组合、聚合、关联、依赖
  - 确定关系方向: 箭头从源指向目标
  - 添加关系标签: 使用 `[A] -> label [B]` 格式 (可选)
  - 标注基数约束: 使用 `[A] -> 1..* [B]` 格式 (可选)
  """,

  """
  **5. 组织复杂结构**: 使用嵌套和分组增强可读性:
  - 使用 `<package>` 或 `<frame>` 进行模块分组:
    ```nomnoml
    [<package> com.example.service|
      [UserService]
      [OrderService]
    ]
    ```
  - 控制嵌套深度 (建议 < 3 层),避免过度复杂
  - 使用 `#direction` 控制布局方向,减少连接交叉
  """,

  """
  **6. 优化可读性**:
  - 合理控制节点数量 (建议 < 30 个)
  - 使用缩进增强嵌套结构可读性
  - 选择合适的 `#direction` (down 适合层次, right 适合流程)
  - 调整 `#spacing` 和 `#padding` 控制节点间距
  - 考虑使用 `#visual: handDrawn` 创建手绘风格
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **Nomnoml 语法符合性**:
  - 所有指令 (#direction, #stroke 等) 在文件开头
  - 分类器标签 (如 `<abstract>`) 在类名之前
  - 类属性和方法使用分号 `;` 或换行分隔,不使用逗号
  - 继承箭头 `-:>` 从子类指向父类 (UML 标准)
  - 类定义顺序: 类名 | 属性 | 方法
  """,

  """
  **Kroki 渲染测试**:
  - 代码必须能被 Kroki 成功渲染为 SVG 图像,无渲染错误或警告
  - 不使用 Kroki 不支持的特性 (如 `#import` 指令)
  - 节点数量适中 (建议 < 50 个,最佳 < 30 个)
  - 嵌套深度适中 (建议 < 4 层,最佳 < 3 层)
  - 代码长度适中 (建议 < 10KB 压缩前)
  """,

  """
  **关系类型正确性**:
  - 继承关系使用 `-:>`,方向正确 (子类 → 父类)
  - 实现关系使用 `--:>`,方向正确 (实现类 → 接口)
  - 组合关系使用 `+->`,语义正确 (强拥有,生命周期绑定)
  - 聚合关系使用 `o->`,语义正确 (弱拥有,独立生命周期)
  - 关联关系使用 `->`,表达一般性关系
  - 依赖关系使用 `-->`,表达临时使用关系
  """,

  """
  **可读性和美观性**:
  - 布局合理,节点分布均匀,避免过度拥挤或过度分散
  - 使用 `#direction` 优化布局,减少连接线交叉
  - 嵌套结构使用缩进增强可读性
  - 节点命名清晰,使用有意义的名称
  - 复杂图表使用分组 (`<package>`, `<frame>`) 增强结构清晰度
  - 适当使用样式指令 (#stroke, #fill) 改善视觉效果
  """
]
