# ============================================
# L3 类型层模板 v1.0.0
# Mermaid Flowchart (流程图) 规范
# ============================================
#
# 使用说明:
# 1. 此文件定义特定图表类型的规范 (类型层)
# 2. 包含 5 个固定 Section: meta, D_role, E_constraints, P_process, H_quality
# 3. 不包含 T_task_instructions (任务指令在 L1 或用户消息中)
# 4. 实际数据文件应放在: data/L3/{language}/{diagram_type}.toml
#
# 创建新类型的步骤:
# 1. 复制此模板
# 2. 修改 [meta].language 和 diagram_type (必须在 LANGUAGE_DIAGRAM_TYPES 中)
# 3. 修改 [D_role].additional_roles 为类型特定角色
# 4. 修改 [E_constraints].items 为类型特定约束
# 5. 修改 [P_process].items 为类型特定流程
# 6. 修改 [H_quality].items 为类型特定标准
#
# 注意事项:
# - additional_roles 至少 1 个
# - 每个 items 数组至少 3 条内容 (E_constraints 至少 5 条)
# - 内容应该是类型特定的,针对具体图表类型
# ============================================

[meta]
level = "L3"
language = "mermaid"
diagram_type = "flowchart"  # 必须与 LANGUAGE_DIAGRAM_TYPES[language] 对齐
version = "1.0.0"
description = "Mermaid 流程图规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 可选: 类型相关的元数据
complexity = "medium"  # low | medium | high
target_length = 2800   # 目标字数 (根据复杂度动态分配)
use_cases = ["业务流程", "算法流程", "系统流程", "决策流程"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================
# 定义类型特定的专业角色
# - additional_roles: 在 L1 + L2 角色基础上增加的角色
# - 至少 1 个类型特定角色

[D_role]
additional_roles = [
  "流程图逻辑专家",
  "业务流程建模专家"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================
# 定义流程图特定的约束
# - 至少 5 条约束
# - 应该是流程图的硬性要求和最佳实践

[E_constraints]
items = [
  """
  **流程图语法**: 必须使用 `flowchart TD` (上下布局) 或 `flowchart LR` (左右布局) 语法,不得使用已废弃的 `graph` 语法。
  """,

  """
  **开始和结束节点**: 必须明确标注流程的开始节点 (使用圆角矩形 `[开始]` 或 `(开始)`) 和结束节点 (使用圆角矩形 `[结束]` 或圆形 `((结束))`)。
  """,

  """
  **决策节点规范**: 决策节点 (判断、分支) 必须使用菱形 `{条件?}`,并且必须有至少两个输出分支,每个分支应标注判断结果 (如 "是"/"否", "成功"/"失败")。
  """,

  """
  **节点形状规范**: 根据节点类型选择合适的形状:
  - 圆角矩形 `[操作]`: 普通操作步骤
  - 菱形 `{判断?}`: 决策节点
  - 平行四边形 `[/输入/]` 或 `[\\输出\\]`: 输入输出
  - 圆柱 `[(数据库)]`: 数据存储
  - 圆形 `((开始/结束))`: 起止节点
  """,

  """
  **流程逻辑完整性**: 所有流程路径都必须有明确的终点,不得出现悬空分支。决策节点的所有分支都必须处理,异常情况也应有处理路径。
  """,

  """
  **节点连接规范**: 使用清晰的连接线和标签:
  - 顺序流: `A --> B`
  - 条件流: `A -->|条件| B`
  - 多步骤: `A --> B --> C --> D`
  - 分支汇合: `A --> C` 和 `B --> C`
  """,

  """
  **子图分组**: 对于复杂流程,使用 `subgraph` 进行逻辑分组,提高可读性:
  ```
  subgraph 子系统名称
    节点1 --> 节点2
  end
  ```
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================
# 定义流程图特定的代码生成流程
# - 至少 3 条流程
# - 应该是流程图设计和实现的关键步骤

[P_process]
items = [
  """
  **1. 识别流程要素**:
  - 起点: 流程的触发条件或开始动作
  - 终点: 流程的结束状态 (成功、失败、取消等)
  - 关键步骤: 核心操作节点
  - 决策点: 需要判断和分支的地方
  - 异常处理: 错误情况的处理路径
  """,

  """
  **2. 提取流程逻辑**:
  - 主流程: 正常情况下的标准流程路径
  - 分支流程: 基于条件判断的不同路径
  - 异常流程: 错误、失败、超时等异常情况的处理
  - 循环流程: 需要重复执行的步骤 (使用反向连接)
  """,

  """
  **3. 设计节点关系**:
  - 确定节点的先后顺序和依赖关系
  - 设计清晰的决策节点和分支逻辑
  - 处理流程的汇合点 (多个路径汇合到同一节点)
  - 避免流程死锁和无限循环
  """,

  """
  **4. 选择布局方向**:
  - `flowchart TD`: 上下布局,适合层次分明的流程
  - `flowchart LR`: 左右布局,适合时序性强的流程
  - 考虑流程的自然阅读顺序
  """,

  """
  **5. 优化流程结构**:
  - 使用子图对复杂流程进行模块化分组
  - 确保流程路径清晰,避免连接线交叉
  - 节点命名语义化,便于理解
  - 添加必要的连接标签说明
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================
# 定义流程图的质量检查标准
# - 至少 2 条标准
# - 应该是可验证的流程图质量指标

[H_quality]
items = [
  """
  **流程逻辑完整性**:
  - 所有流程路径都有明确的终点 (结束节点)
  - 决策节点的所有分支都有处理
  - 无悬空节点或断裂路径
  - 循环逻辑合理,有明确的退出条件
  """,

  """
  **决策节点清晰度**:
  - 决策节点使用菱形表示
  - 判断条件清晰明确
  - 每个分支都有标签说明 (是/否, 成功/失败等)
  - 覆盖所有可能的情况
  """,

  """
  **节点命名规范**:
  - 节点文本简洁明了,表达核心操作
  - 使用动词开头 (如 "验证用户", "发送邮件")
  - 避免过长或过于简单的文本
  - ID 语义化,易于理解
  """,

  """
  **流程可读性**:
  - 布局合理,节点分布均匀
  - 连接线尽量不交叉
  - 复杂流程使用子图分组
  - 关键路径突出显示
  """
]

# ============================================
# 示例: 如何为其他类型创建 L3 文件
# ============================================
#
# 1. Mermaid Sequence Diagram (data/L3/mermaid/sequence.toml):
# [meta]
# diagram_type = "sequence"
# [D_role]
# additional_roles = ["时序图专家", "交互设计师"]
# [E_constraints]
# items = ["必须使用 sequenceDiagram 语法", "参与者必须明确声明", ...]
#
# 2. Mermaid Class Diagram (data/L3/mermaid/class.toml):
# [meta]
# diagram_type = "class"
# [D_role]
# additional_roles = ["面向对象设计专家", "UML 专家"]
# [E_constraints]
# items = ["必须使用 classDiagram 语法", "类关系必须明确", ...]
#
# 3. PlantUML Sequence (data/L3/plantuml/sequence.toml):
# [meta]
# language = "plantuml"
# diagram_type = "sequence"
# [D_role]
# additional_roles = ["PlantUML 时序图专家"]
# [E_constraints]
# items = ["使用 @startuml/@enduml", "参与者用 participant 声明", ...]
# ============================================
