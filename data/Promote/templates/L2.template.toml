# ============================================
# L2 语言层模板 v1.0.0
# Mermaid 语言的通用规范
# ============================================
#
# 使用说明:
# 1. 此文件定义特定语言的通用规范 (语言层)
# 2. 包含 5 个固定 Section: meta, D_role, E_constraints, P_process, H_quality
# 3. 不包含 T_task_instructions (任务指令在 L1 或用户消息中)
# 4. 实际数据文件应放在: data/L2/{language}.toml
#
# 创建新语言的步骤:
# 1. 复制此模板
# 2. 修改 [meta].language 为目标语言 (必须在 RENDER_LANGUAGES 中)
# 3. 修改 [D_role].additional_roles 为语言特定角色
# 4. 修改 [E_constraints].items 为语言特定约束
# 5. 修改 [P_process].items 为语言特定流程
# 6. 修改 [H_quality].items 为语言特定标准
#
# 注意事项:
# - additional_roles 至少 2 个
# - 每个 items 数组至少 3 条内容
# - 内容应该是语言通用的,不涉及特定图表类型
# ============================================

[meta]
level = "L2"
language = "mermaid"  # 必须是有效的 RenderLanguage
version = "1.0.0"
description = "Mermaid 语言通用规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 可选: 语言相关的元数据
language_version = "10.0.0"  # Mermaid 版本
kroki_support = true
official_docs = "https://mermaid.js.org/"

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================
# 定义语言特定的专业角色
# - additional_roles: 在 L1.base_roles 基础上增加的角色
# - 至少 2 个语言特定角色

[D_role]
additional_roles = [
  "Mermaid 语法专家",
  "流程图设计师",
  "UML 建模专家"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================
# 定义 Mermaid 语言特定的约束
# - 至少 3 条约束
# - 应该是 Mermaid 语法的硬性要求

[E_constraints]
items = [
  """
  **Mermaid 语法规范**: 必须使用 Mermaid 官方语法规范,避免使用实验性功能或非标准语法。参考官方文档: https://mermaid.js.org/
  """,

  """
  **节点 ID 规范**: 节点 ID 必须唯一且语义化,使用字母、数字、下划线,不得使用特殊字符或中文。推荐使用驼峰命名或下划线命名。
  """,

  """
  **连接符规范**: 使用正确的连接符语法:
  - 实线箭头: `-->` (流程图)
  - 虚线箭头: `-.->` (依赖关系)
  - 粗线箭头: `==>` (强调)
  - 双向箭头: `<-->` (双向关系)
  """,

  """
  **文本标签规范**: 节点文本和连接标签必须清晰表达含义,避免过长或过于简单。支持使用 `[文本]`、`(文本)`、`{文本}` 等不同形状。
  """,

  """
  **Kroki 兼容性**: 生成的代码必须能被 Kroki 成功渲染,避免使用 Kroki 不支持的 Mermaid 特性。
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================
# 定义 Mermaid 特定的代码生成流程
# - 至少 2 条流程
# - 应该是 Mermaid 代码生成的关键步骤

[P_process]
items = [
  """
  **1. 选择图表类型**: 根据用户需求选择合适的 Mermaid 图表类型:
  - flowchart/graph: 流程图
  - sequenceDiagram: 时序图
  - classDiagram: 类图
  - erDiagram: ER 图
  - gantt: 甘特图
  - pie: 饼图
  - stateDiagram-v2: 状态图
  - journey: 用户旅程图
  """,

  """
  **2. 设计节点结构**:
  - 设计清晰的节点命名规范 (使用语义化的 ID)
  - 设计合理的节点层次和分组
  - 选择合适的节点形状 (矩形、圆角、菱形、圆形等)
  """,

  """
  **3. 设计连接关系**:
  - 明确节点之间的逻辑关系 (顺序、分支、循环)
  - 使用合适的连接符类型 (实线、虚线、粗线)
  - 添加必要的连接标签说明
  """,

  """
  **4. 应用 Mermaid 语法**:
  - 使用正确的语法格式 (注意空格、换行、缩进)
  - 添加必要的配置项 (方向、主题、样式)
  - 确保语法完整性和正确性
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================
# 定义 Mermaid 代码的质量检查标准
# - 至少 2 条标准
# - 应该是可验证的 Mermaid 代码质量指标

[H_quality]
items = [
  """
  **Mermaid 语法验证**: 代码必须符合 Mermaid 官方语法规范,无语法错误,能被 Mermaid 解析器成功解析。
  """,

  """
  **Kroki 渲染测试**: 代码必须能被 Kroki 成功渲染为 SVG 图像,无渲染错误或警告。
  """,

  """
  **节点关系完整性**: 所有节点都有明确的连接关系,无悬空节点 (除非是独立的开始/结束节点)。
  """,

  """
  **可读性和美观性**:
  - 节点布局合理,避免过度拥挤或过度分散
  - 文本标签清晰易读,长度适中
  - 连接线不交叉或交叉最少
  """
]

# ============================================
# 示例: 如何为其他语言创建 L2 文件
# ============================================
#
# 1. PlantUML (data/L2/plantuml.toml):
# [meta]
# language = "plantuml"
# [D_role]
# additional_roles = ["PlantUML 语法专家", "UML 建模专家"]
# [E_constraints]
# items = ["必须使用 PlantUML 官方语法", "使用 @startuml/@enduml 包裹", ...]
#
# 2. D2 (data/L2/d2.toml):
# [meta]
# language = "d2"
# [D_role]
# additional_roles = ["D2 语法专家", "现代图表设计师"]
# [E_constraints]
# items = ["必须使用 D2 官方语法", "使用缩进表示层次", ...]
#
# 3. Graphviz (data/L2/graphviz.toml):
# [meta]
# language = "graphviz"
# [D_role]
# additional_roles = ["Graphviz 语法专家", "图论专家"]
# [E_constraints]
# items = ["必须使用 DOT 语言语法", "使用 digraph/graph 声明", ...]
# ============================================
