# ============================================
# L3 类型层 - Vega-Lite Heatmap v1.0.0
# ============================================

[meta]
level = "L3"
language = "vegalite"
diagram_type = "heatmap"
version = "1.0.0"
description = "Vega-Lite 热力图规范"
author = "DiagramAI Team"
created_at = "2025-10-19"
updated_at = "2025-10-19"

# 可选元数据
complexity = "medium"
target_length = 2700
use_cases = ["二维矩阵数据", "相关性矩阵", "时间热力图", "地理热力图"]

# ============================================
# Section 1: D 角色定义 (Role Definition)
# ============================================

[D_role]
additional_roles = [
  "多维数据可视化专家 - 精通二维交叉数据和矩阵结构设计",
  "热力图专家 - 擅长颜色方案选择和热力图布局优化"
]

# ============================================
# Section 2: E 约束条件 (Constraints)
# ============================================

[E_constraints]
items = [
  """
  **mark 类型固定**: 热力图必须使用 `"rect"` 标记类型:
  - ✅ **正确**: `"mark": "rect"` 或 `"mark": {"type": "rect"}`
  - ❌ **错误**: `"mark": "heatmap"` 或 `"mark": "cell"`
  - 热力图使用矩形（rect）单元格
  """,

  """
  **坐标轴类型**: x/y 轴通常使用 `ordinal` 或 `nominal` 类型:
  - ✅ **正确**: `{"field": "category", "type": "ordinal"}`
  - 适用于分类数据（行列标签）
  - 特殊情况: 时间热力图可使用 `temporal` 类型
  """,

  """
  **color 通道类型**: 必须使用 `quantitative` 类型映射数值到颜色:
  - ✅ **正确**: `"color": {"field": "value", "type": "quantitative"}`
  - ❌ **错误**: 使用 `nominal` 类型会导致离散颜色
  - 数值映射到连续颜色梯度
  """,

  """
  **数据展平格式**: 数据必须是矩阵展平格式（long format）:
  - ✅ **正确**: `[{"row": "A", "column": "1", "value": 10}]`
  - ❌ **错误**: `[{"row": "A", "col1": 10, "col2": 20}]`
  - 每行一个单元格（row, column, value）
  """,

  """
  **颜色方案选择**: 根据数据类型选择合适的颜色方案:
  - **顺序数据**: `blues`, `greens`, `reds`, `viridis`, `plasma`
  - **发散数据**: `redblue`, `redyellowblue` (需设置 domainMid)
  - **分类数据**: `category10`, `tableau10` (通常不用于热力图)
  """,

  """
  **去除单元格边框**: 建议去除单元格边框:
  - 使用 `"config": {"view": {"strokeWidth": 0}}`
  - 使单元格无缝连接
  - 提升视觉效果
  """,

  """
  **发散颜色方案**: 对称数据（如相关性）使用发散颜色:
  - 使用 `"scheme": "redyellowblue"`
  - 设置 `"domain": [-1, 1]` 指定值域范围
  - 设置 `"domainMid": 0` 指定中间值（黄色）
  """,

  """
  **排序控制**: 可使用 `sort` 控制行列顺序:
  - `"sort": ["周一", "周二", ...]` 自定义顺序
  - 确保数据按逻辑顺序排列
  """
]

# ============================================
# Section 3: P 流程规范 (Process)
# ============================================

[P_process]
items = [
  """
  **1. 识别热力图类型**:
  - **基础热力图**: 行列矩阵数据（如产品-地区）
  - **时间热力图**: 时间段-星期/日期（如访问量）
  - **相关性矩阵**: 特征-特征相关性（需发散颜色）
  """,

  """
  **2. 准备数据结构**:
  - 将矩阵数据转换为展平格式
  - 每行包含: row, column, value
  - 确保所有单元格都有数据（无缺失值）
  """,

  """
  **3. 配置坐标轴**:
  - x/y 轴使用 `ordinal` 类型（分类数据）
  - 添加坐标轴标题
  - 必要时使用 `sort` 指定顺序
  """,

  """
  **4. 设置颜色映射**:
  - color 通道使用 `quantitative` 类型
  - 选择合适的颜色方案（`scale.scheme`）
  - 顺序数据: blues, viridis 等
  - 发散数据: redyellowblue + domain + domainMid
  - 添加图例标题
  """,

  """
  **5. 优化视觉效果**:
  - 去除单元格边框（`config.view.strokeWidth: 0`）
  - 设置合理的尺寸（width, height）
  - 启用 tooltip
  - 确保颜色对比度足够
  """
]

# ============================================
# Section 4: H 质量标准 (Quality Standards)
# ============================================

[H_quality]
items = [
  """
  **标记和通道正确性**:
  - 使用 `rect` 标记类型
  - x/y 轴使用 `ordinal` 类型
  - color 通道使用 `quantitative` 类型
  """,

  """
  **数据格式正确性**:
  - 数据为展平格式（每行一个单元格）
  - 字段名与 encoding 一致
  - 无缺失数据单元格
  """,

  """
  **颜色方案合理性**:
  - 颜色方案符合数据类型
  - 发散数据正确设置 domain 和 domainMid
  - 颜色对比度足够
  - 图例清晰
  """,

  """
  **视觉效果**:
  - 单元格边框已去除
  - 布局紧凑无缝
  - 热力图清晰展示数据模式
  - 整体美观专业
  """
]

# ============================================
# Section 5: 使用场景 (Use Cases)
# ============================================

[[use_cases]]
title = "产品地区销量热力图"
scenario = "展示不同产品在各地区的销量分布，识别热销地区"
key_points = [
  "x 轴地区，y 轴产品",
  "color 映射销量（quantitative）",
  "使用 blues 颜色方案（顺序数据）"
]

[[use_cases]]
title = "每周访问量时段热力图"
scenario = "展示一周内每天各时段的访问量分布，识别高峰时段"
key_points = [
  "x 轴星期，y 轴时段",
  "使用 sort 指定星期顺序（周一到周日）",
  "使用 viridis 颜色方案（科学可视化）"
]

[[use_cases]]
title = "特征相关性矩阵热力图"
scenario = "展示特征之间的相关性矩阵，识别高相关特征"
key_points = [
  "x/y 轴都是特征名称",
  "使用发散颜色方案（redyellowblue）",
  "domain: [-1, 1], domainMid: 0",
  "对角线值为 1.0（完全相关）"
]

[[use_cases]]
title = "A/B 测试效果热力图"
scenario = "展示不同变体在不同用户群体的转化率，识别最佳组合"
key_points = [
  "x 轴用户群体，y 轴测试变体",
  "color 映射转化率",
  "使用 greens 颜色方案强调高转化"
]
